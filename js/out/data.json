{
    "project": {},
    "files": {
        "classes\\attributesStyle.js": {
            "name": "classes\\attributesStyle.js",
            "modules": {},
            "classes": {
                "Style": 1,
                "BorderStyle": 1,
                "Attributes": 1,
                "TableAttributes": 1,
                "TextStyle": 1,
                "LinkStyle": 1,
                "TableStyle": 1,
                "TableRowStyle": 1,
                "TableCellStyle": 1,
                "ImageStyle": 1,
                "ListStyle": 1,
                "ListItemStyle": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "classes\\cell.js": {
            "name": "classes\\cell.js",
            "modules": {},
            "classes": {
                "Cell": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "classes\\content.js": {
            "name": "classes\\content.js",
            "modules": {},
            "classes": {
                "Content": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "classes\\list.js": {
            "name": "classes\\list.js",
            "modules": {},
            "classes": {
                "List": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "classes\\listItem.js": {
            "name": "classes\\listItem.js",
            "modules": {},
            "classes": {
                "ListItem": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "classes\\row.js": {
            "name": "classes\\row.js",
            "modules": {},
            "classes": {
                "Row": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "classes\\string.js": {
            "name": "classes\\string.js",
            "modules": {
                "String": 1
            },
            "classes": {
                "generateId": 1,
                "createTableFromHtml": 1,
                "createRowFromHtml": 1,
                "createUlFromHtml": 1,
                "isFramedTable": 1,
                "createTagFromHtml": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "classes\\table.js": {
            "name": "classes\\table.js",
            "modules": {
                "HtmlElements": 1
            },
            "classes": {
                "Table": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "classes\\tag.js": {
            "name": "classes\\tag.js",
            "modules": {},
            "classes": {
                "Tag": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "helpers.js": {
            "name": "helpers.js",
            "modules": {
                "attributes": 1,
                "helpers": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "jquery-1.10.2.js": {
            "name": "jquery-1.10.2.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "start.js": {
            "name": "start.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "attributes": {
            "name": "attributes",
            "submodules": {},
            "classes": {
                "Style": 1,
                "BorderStyle": 1,
                "Attributes": 1,
                "TableAttributes": 1,
                "TextStyle": 1,
                "LinkStyle": 1,
                "TableStyle": 1,
                "TableRowStyle": 1,
                "TableCellStyle": 1,
                "ImageStyle": 1,
                "ListStyle": 1,
                "ListItemStyle": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "classes\\attributesStyle.js",
            "line": 677,
            "description": "Produces a string of properties in inline-style fashion\nThis function is supposed to be added to prototypes of different objects.\nIt takse into consideration only properties, methods are ignored.\nIf attribite value is a number, the measurement unit will be appended.",
            "params": [
                {
                    "name": "style",
                    "description": "string of label-value pairs or object.",
                    "type": "String|object"
                }
            ],
            "extends": "Style",
            "return": {
                "description": "a concatenation of substrings; each substring is of this format: \"attribute: value;\".",
                "type": "String"
            },
            "example": [
                " The return value is of the form: \"padding: 0px;margin: 10px;color: #ababab;\""
            ]
        },
        "HtmlElements": {
            "name": "HtmlElements",
            "submodules": {},
            "classes": {
                "Cell": 1,
                "Content": 1,
                "List": 1,
                "ListItem": 1,
                "Row": 1,
                "Table": 1,
                "Tag": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "classes\\tag.js",
            "line": 5,
            "description": "Represents table.",
            "params": [
                {
                    "name": "arg",
                    "description": "",
                    "type": "Mixed"
                }
            ],
            "extends": "Tag"
        },
        "String": {
            "name": "String",
            "submodules": {},
            "classes": {
                "generateId": 1,
                "createTableFromHtml": 1,
                "createRowFromHtml": 1,
                "createUlFromHtml": 1,
                "isFramedTable": 1,
                "createTagFromHtml": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "classes\\string.js",
            "line": 403,
            "description": "Generates a string that can be used as id for the elements of the target string. This means that\nthe generated string must be not present among id of the elements of the target string. The argument\nserves as a hint to create the id: if the hint string is available as id, it will be returned. Otherwise,\na symbo from range 0-9, a-z will be appended to the hint string until it becomes a valid id.",
            "itemtype": "method",
            "params": [
                {
                    "name": "seed",
                    "description": "",
                    "type": "String|Null"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            }
        },
        "helpers": {
            "name": "helpers",
            "submodules": {},
            "classes": {},
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "helpers.js",
            "line": 44,
            "description": "transforms each element of the input array into a non-negative number.\nIf an element is negative, its absolute value is used.\nIf an element fails to be converted to a number, it is substituted by zero.",
            "example": [
                "   [1.1, 2.4, 2] -> [1.1, 2.4, 2],\n           [\"4\", -3, 3.2, \"a\"] -> [4, 3, 3.2, 0]"
            ],
            "params": [
                {
                    "name": "arr",
                    "description": "Array      array of numbers"
                }
            ],
            "return": {
                "description": "Array      array of numbers"
            },
            "itemtype": "method"
        }
    },
    "classes": {
        "Style": {
            "name": "Style",
            "shortname": "Style",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "attributes",
            "namespace": "",
            "file": "classes\\attributesStyle.js",
            "line": 5,
            "description": "This class is supposed to characterize inline styles of html tags.",
            "params": [
                {
                    "name": "style",
                    "description": "string of label-value pairs or object.",
                    "type": "String|object"
                }
            ]
        },
        "BorderStyle": {
            "name": "BorderStyle",
            "shortname": "BorderStyle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "attributes",
            "namespace": "",
            "file": "classes\\attributesStyle.js",
            "line": 123,
            "description": "Styles specific for the table border.",
            "extends": "Style"
        },
        "Attributes": {
            "name": "Attributes",
            "shortname": "Attributes",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "attributes",
            "namespace": "",
            "file": "classes\\attributesStyle.js",
            "line": 158,
            "description": "This class is supposed to define attributes of html tags",
            "params": [
                {
                    "name": "attr",
                    "description": "a string or object from which this object properties are to be created.",
                    "type": "String|object"
                }
            ]
        },
        "TableAttributes": {
            "name": "TableAttributes",
            "shortname": "TableAttributes",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "attributes",
            "namespace": "",
            "file": "classes\\attributesStyle.js",
            "line": 231,
            "description": "Table-specific attributes.",
            "extends": "Attributes"
        },
        "TextStyle": {
            "name": "TextStyle",
            "shortname": "TextStyle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "attributes",
            "namespace": "",
            "file": "classes\\attributesStyle.js",
            "line": 258,
            "description": "Text specific style class.",
            "extends": "Style"
        },
        "LinkStyle": {
            "name": "LinkStyle",
            "shortname": "LinkStyle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "attributes",
            "namespace": "",
            "file": "classes\\attributesStyle.js",
            "line": 303,
            "description": "Represents hyperlink style."
        },
        "TableStyle": {
            "name": "TableStyle",
            "shortname": "TableStyle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "attributes",
            "namespace": "",
            "file": "classes\\attributesStyle.js",
            "line": 355,
            "description": "Represents table style."
        },
        "TableRowStyle": {
            "name": "TableRowStyle",
            "shortname": "TableRowStyle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "attributes",
            "namespace": "",
            "file": "classes\\attributesStyle.js",
            "line": 432,
            "description": "Represents table row style."
        },
        "TableCellStyle": {
            "name": "TableCellStyle",
            "shortname": "TableCellStyle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "attributes",
            "namespace": "",
            "file": "classes\\attributesStyle.js",
            "line": 495,
            "description": "Represents table cell styles."
        },
        "ImageStyle": {
            "name": "ImageStyle",
            "shortname": "ImageStyle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "attributes",
            "namespace": "",
            "file": "classes\\attributesStyle.js",
            "line": 570,
            "description": "Represents image styles."
        },
        "ListStyle": {
            "name": "ListStyle",
            "shortname": "ListStyle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "attributes",
            "namespace": "",
            "file": "classes\\attributesStyle.js",
            "line": 627,
            "description": "Represents image styles."
        },
        "ListItemStyle": {
            "name": "ListItemStyle",
            "shortname": "ListItemStyle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "attributes",
            "namespace": "",
            "file": "classes\\attributesStyle.js",
            "line": 677,
            "description": "Represents list item styles."
        },
        "Cell": {
            "name": "Cell",
            "shortname": "Cell",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "HtmlElements",
            "namespace": "",
            "file": "classes\\cell.js",
            "line": 5,
            "description": "Represents a table cell. The argument is supposed to be passed to the \"content\" property."
        },
        "Content": {
            "name": "Content",
            "shortname": "Content",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "HtmlElements",
            "namespace": "",
            "file": "classes\\content.js",
            "line": 5,
            "description": "This class is used to encompass other objects."
        },
        "List": {
            "name": "List",
            "shortname": "List",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "HtmlElements",
            "namespace": "",
            "file": "classes\\list.js",
            "line": 5,
            "description": "This class is used to represent ordered and unordered lists. If argument is provided and is allowed one, it will be used\nto set the property \"name\". Otherwise, \"name\" property will be set to the first allowed value.",
            "params": [
                {
                    "name": "listType",
                    "description": "",
                    "type": "Sting"
                }
            ]
        },
        "ListItem": {
            "name": "ListItem",
            "shortname": "ListItem",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "HtmlElements",
            "namespace": "",
            "file": "classes\\listItem.js",
            "line": 5,
            "description": "This class is used to represent a list item."
        },
        "Row": {
            "name": "Row",
            "shortname": "Row",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "HtmlElements",
            "namespace": "",
            "file": "classes\\row.js",
            "line": 5,
            "description": "Represents a table row"
        },
        "generateId": {
            "name": "generateId",
            "shortname": "generateId",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "String",
            "namespace": "",
            "file": "classes\\string.js",
            "line": 5,
            "description": "Generates a string that can be used as id for the elements of the target string. This means that\nthe generated string must be not present among id of the elements of the target string. The argument\nserves as a hint to create the id: if the hint string is available as id, it will be returned. Otherwise,\na symbo from range 0-9, a-z will be appended to the hint string until it becomes a valid id."
        },
        "createTableFromHtml": {
            "name": "createTableFromHtml",
            "shortname": "createTableFromHtml",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "String",
            "namespace": "",
            "file": "classes\\string.js",
            "line": 279,
            "description": "Transforms a list item string into a ListItem object. It is supposed that the string to process is of the\nfollowing form: <li ... > ... </li>. Inside the tag, there might be other nodes. If they are recognized\nas a \"supported\" ones, the corresponding functions will be called to transform them into objects."
        },
        "createRowFromHtml": {
            "name": "createRowFromHtml",
            "shortname": "createRowFromHtml",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "String",
            "namespace": "",
            "file": "classes\\string.js",
            "line": 74,
            "description": "Transforms a row-html string into a Row object. It is supposed that the string to process is of the\nfollowing form: <tr ... > ... </tr>. Inside the tag, there might be elements \"td\" that will be\nprocessed one by one by function String::createCellFromHtml()."
        },
        "createUlFromHtml": {
            "name": "createUlFromHtml",
            "shortname": "createUlFromHtml",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "String",
            "namespace": "",
            "file": "classes\\string.js",
            "line": 268,
            "description": "Calls String::createListFromHtml('ol') on the target string.",
            "params": [
                {
                    "name": "listType",
                    "description": "",
                    "type": "String"
                }
            ]
        },
        "isFramedTable": {
            "name": "isFramedTable",
            "shortname": "isFramedTable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "String",
            "namespace": "",
            "file": "classes\\string.js",
            "line": 349,
            "description": "Returns true, if tableHtml is an html code corresponding to a table each row of which\ncontains just one cell, and this cell in its turn contains only one table.\nReturns false otherwise."
        },
        "createTagFromHtml": {
            "name": "createTagFromHtml",
            "shortname": "createTagFromHtml",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "String",
            "namespace": "",
            "file": "classes\\string.js",
            "line": 403,
            "description": "Creates an instance of Tag class and fills in its property \"elements\" with\nthe elements recognized inside the string. It is supposed that the string is of the\nform <tag [tag-attributes] [style=\"...\"]>....</tag>."
        },
        "Table": {
            "name": "Table",
            "shortname": "Table",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "HtmlElements",
            "namespace": "",
            "file": "classes\\table.js",
            "line": 5,
            "description": "Represents table."
        },
        "Tag": {
            "name": "Tag",
            "shortname": "Tag",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "HtmlElements",
            "namespace": "",
            "file": "classes\\tag.js",
            "line": 5,
            "description": "This class is used to represent a general html tag."
        }
    },
    "classitems": [
        {
            "file": "classes\\attributesStyle.js",
            "line": 18,
            "description": "Fill in the properties with the values from the argument if any",
            "class": "Style",
            "module": "attributes"
        },
        {
            "file": "classes\\attributesStyle.js",
            "line": 54,
            "description": "Appends style. Converts the argument to a Style object and appends it to existing one.\nProperties with the same name will be overridden.",
            "itemtype": "method",
            "name": "appendStyle",
            "params": [
                {
                    "name": "stl",
                    "description": "",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Style",
            "module": "attributes"
        },
        {
            "file": "classes\\attributesStyle.js",
            "line": 71,
            "description": "Generates string representation of this object (as inline styles)",
            "itemtype": "method",
            "name": "toString",
            "type": "String",
            "return": {
                "description": "html-like string for this object",
                "type": "String"
            },
            "example": [
                " The return value might be one of this form: style=\"width: 100px; color: red;\""
            ],
            "class": "Style",
            "module": "attributes"
        },
        {
            "file": "classes\\attributesStyle.js",
            "line": 80,
            "description": "Imposes the width, min-width and max-width",
            "itemtype": "method",
            "name": "setWidth",
            "type": "Void",
            "params": [
                {
                    "name": "w",
                    "description": "value of width",
                    "type": "Mixed"
                }
            ],
            "class": "Style",
            "module": "attributes"
        },
        {
            "file": "classes\\attributesStyle.js",
            "line": 90,
            "description": "returns object with keys 'width', 'color', 'style' describing the border.\nIf the Style object has 'border-style' equal to 'none', then in the\nreturn object, the key 'width' is set to 0.\nIf 'border-style' is not 'none' and 'border-width' is present, then in the\nreturn object, the key 'width' the 'border-width' value.\nOtherwise, the 'width' key is not present.",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Style",
            "module": "attributes"
        },
        {
            "file": "classes\\attributesStyle.js",
            "line": 135,
            "description": "border width in px",
            "itemtype": "property",
            "name": "border-width",
            "type": "String|Number",
            "default": "1px",
            "class": "BorderStyle",
            "module": "attributes"
        },
        {
            "file": "classes\\attributesStyle.js",
            "line": 142,
            "description": "border style. Possible values: none, solid, dotted etc.",
            "itemtype": "property",
            "name": "border-style",
            "type": "String",
            "default": "'solid'",
            "class": "BorderStyle",
            "module": "attributes"
        },
        {
            "file": "classes\\attributesStyle.js",
            "line": 149,
            "description": "border color. In case one wants black color, one should use a color maximally close to the black (e.g. #000001)\notherwise some web browsers (e.g. GMail) will remove it and substitute it with its own one.",
            "itemtype": "property",
            "name": "border-color",
            "type": "String",
            "default": "#000001",
            "class": "BorderStyle",
            "module": "attributes"
        },
        {
            "file": "classes\\attributesStyle.js",
            "line": 170,
            "description": "Fill in the properties with the values from the argument if any",
            "class": "Attributes",
            "module": "attributes"
        },
        {
            "file": "classes\\attributesStyle.js",
            "line": 202,
            "description": "Generates string representation of this object (as html attributes)",
            "itemtype": "method",
            "name": "toString",
            "type": "String",
            "return": {
                "description": "html-like string for this object",
                "type": "String"
            },
            "example": [
                " The return value might be one of this form: <b>class=\"example\" id=\"tag\"</b>"
            ],
            "class": "Attributes",
            "module": "attributes"
        },
        {
            "file": "classes\\attributesStyle.js",
            "line": 212,
            "description": "Appends object. If non-object is given, error is thrown. This is a copy-paste of Styles::appendStyle",
            "itemtype": "method",
            "name": "appendAttribute",
            "params": [
                {
                    "name": "stl",
                    "description": "style to be appended",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Attributes",
            "module": "attributes"
        },
        {
            "file": "classes\\attributesStyle.js",
            "line": 243,
            "description": "Cellpadding attribute of the table. It is supposed that measurement unit is \"px\".",
            "itemtype": "property",
            "name": "cellpadding",
            "type": "Number",
            "default": "0",
            "class": "TableAttributes",
            "module": "attributes"
        },
        {
            "file": "classes\\attributesStyle.js",
            "line": 249,
            "description": "Cellspacing attribute of the table. It is supposed that measurement unit is \"px\".",
            "itemtype": "property",
            "name": "cellspacing",
            "type": "Number",
            "default": "0",
            "class": "TableAttributes",
            "module": "attributes"
        },
        {
            "file": "classes\\attributesStyle.js",
            "line": 270,
            "description": "Font size, including unit of measurement.",
            "itemtype": "property",
            "name": "font-size",
            "type": "String",
            "default": "\"12px\"",
            "class": "TextStyle",
            "module": "attributes"
        },
        {
            "file": "classes\\attributesStyle.js",
            "line": 276,
            "description": "Font color",
            "itemtype": "property",
            "name": "color \tFont color",
            "type": "String",
            "default": "\"#000001\". NB: Gmail removes color tags corresponding to the black color, so use #000001 instead of #000000.",
            "class": "TextStyle",
            "module": "attributes"
        },
        {
            "file": "classes\\attributesStyle.js",
            "line": 282,
            "description": "Font weight. Some possible values: \"normal\", \"bold\", \"bolder\", 100, 200, ..., 900. See html manuals for more info.",
            "itemtype": "property",
            "name": "font-weight",
            "type": "String|Integer",
            "default": "\"normal\"",
            "class": "TextStyle",
            "module": "attributes"
        },
        {
            "file": "classes\\attributesStyle.js",
            "line": 288,
            "description": "Padding value along with unit of measurement",
            "itemtype": "property",
            "name": "padding",
            "type": "String",
            "default": "\"0px\"",
            "class": "TextStyle",
            "module": "attributes"
        },
        {
            "file": "classes\\attributesStyle.js",
            "line": 294,
            "description": "Margin value along with unit of measurement",
            "itemtype": "property",
            "name": "margin",
            "type": "String",
            "default": "\"0px\"",
            "class": "TextStyle",
            "module": "attributes"
        },
        {
            "file": "classes\\attributesStyle.js",
            "line": 315,
            "description": "Text decoration attribute",
            "itemtype": "property",
            "name": "text-decoration",
            "type": "String",
            "default": "\"underline\"",
            "class": "LinkStyle",
            "module": "attributes"
        },
        {
            "file": "classes\\attributesStyle.js",
            "line": 322,
            "description": "Font size",
            "itemtype": "property",
            "name": "font size",
            "type": "String|Integer",
            "default": "12",
            "class": "LinkStyle",
            "module": "attributes"
        },
        {
            "file": "classes\\attributesStyle.js",
            "line": 328,
            "description": "Font color attribute",
            "itemtype": "property",
            "name": "font color",
            "type": "String",
            "default": "\"blue\"",
            "class": "LinkStyle",
            "module": "attributes"
        },
        {
            "file": "classes\\attributesStyle.js",
            "line": 334,
            "description": "Font wieght attribute. See html manuals for possible values.",
            "itemtype": "property",
            "name": "font weight",
            "type": "String|Integer",
            "default": "\"normal\"",
            "class": "LinkStyle",
            "module": "attributes"
        },
        {
            "file": "classes\\attributesStyle.js",
            "line": 340,
            "description": "Padding.",
            "itemtype": "property",
            "name": "padding",
            "type": "String|Number",
            "default": "0",
            "class": "LinkStyle",
            "module": "attributes"
        },
        {
            "file": "classes\\attributesStyle.js",
            "line": 346,
            "description": "Margin.",
            "itemtype": "property",
            "name": "margin",
            "type": "String|Number",
            "default": "0",
            "class": "LinkStyle",
            "module": "attributes"
        },
        {
            "file": "classes\\attributesStyle.js",
            "line": 367,
            "description": "Color of the border table",
            "itemtype": "property",
            "name": "border-color",
            "type": "String",
            "default": "\"#FFFFFF\"",
            "class": "TableStyle",
            "module": "attributes"
        },
        {
            "file": "classes\\attributesStyle.js",
            "line": 373,
            "description": "Style of the border table. See html manuals for possible values.",
            "itemtype": "property",
            "name": "border-style",
            "type": "String",
            "default": "\"none\"",
            "class": "TableStyle",
            "module": "attributes"
        },
        {
            "file": "classes\\attributesStyle.js",
            "line": 379,
            "description": "Width of the border table.",
            "itemtype": "property",
            "name": "border-width",
            "type": "String|Number",
            "default": "0",
            "class": "TableStyle",
            "module": "attributes"
        },
        {
            "file": "classes\\attributesStyle.js",
            "line": 385,
            "description": "Margin of the table.",
            "itemtype": "property",
            "name": "margin",
            "type": "String|Number",
            "default": "0",
            "class": "TableStyle",
            "module": "attributes"
        },
        {
            "file": "classes\\attributesStyle.js",
            "line": 391,
            "description": "Padding of the table.",
            "itemtype": "property",
            "name": "padding",
            "type": "String|Number",
            "default": "0",
            "class": "TableStyle",
            "module": "attributes"
        },
        {
            "file": "classes\\attributesStyle.js",
            "line": 397,
            "description": "Table width.",
            "itemtype": "property",
            "name": "width",
            "type": "String|Number",
            "default": "0",
            "class": "TableStyle",
            "module": "attributes"
        },
        {
            "file": "classes\\attributesStyle.js",
            "line": 403,
            "description": "Table maximal width. It is supposed to be equal to \"width\" property.",
            "itemtype": "property",
            "name": "max-width",
            "type": "String|Number",
            "default": "0",
            "class": "TableStyle",
            "module": "attributes"
        },
        {
            "file": "classes\\attributesStyle.js",
            "line": 409,
            "description": "Table minimal width. It is supposed to be equal to \"width\" property.",
            "itemtype": "property",
            "name": "min-width",
            "type": "String|Number",
            "default": "0",
            "class": "TableStyle",
            "module": "attributes"
        },
        {
            "file": "classes\\attributesStyle.js",
            "line": 416,
            "description": "Whether to collapse the table borders or not.",
            "deprecated": true,
            "deprecationMessage": "Do not use, because it causes problems in MS Outlook.",
            "itemtype": "property",
            "name": "border-collapse",
            "type": "String",
            "default": "0",
            "class": "TableStyle",
            "module": "attributes"
        },
        {
            "file": "classes\\attributesStyle.js",
            "line": 423,
            "description": "Border spacing.",
            "itemtype": "property",
            "name": "border-spacing",
            "type": "String",
            "default": "'0px 0px'",
            "class": "TableStyle",
            "module": "attributes"
        },
        {
            "file": "classes\\attributesStyle.js",
            "line": 444,
            "description": "Color of the border table",
            "itemtype": "property",
            "name": "border-color",
            "type": "String",
            "default": "\"#FFFFFF\"",
            "class": "TableRowStyle",
            "module": "attributes"
        },
        {
            "file": "classes\\attributesStyle.js",
            "line": 450,
            "description": "Style of the border table. See html manuals for possible values.",
            "itemtype": "property",
            "name": "border-style",
            "type": "String",
            "default": "\"none\"",
            "class": "TableRowStyle",
            "module": "attributes"
        },
        {
            "file": "classes\\attributesStyle.js",
            "line": 456,
            "description": "Width of the border table.",
            "itemtype": "property",
            "name": "border-width",
            "type": "String|Number",
            "default": "0",
            "class": "TableRowStyle",
            "module": "attributes"
        },
        {
            "file": "classes\\attributesStyle.js",
            "line": 462,
            "description": "Margin of the table.",
            "itemtype": "property",
            "name": "margin",
            "type": "String|Number",
            "default": "0",
            "class": "TableRowStyle",
            "module": "attributes"
        },
        {
            "file": "classes\\attributesStyle.js",
            "line": 468,
            "description": "Padding of the table.",
            "itemtype": "property",
            "name": "padding",
            "type": "String|Number",
            "default": "0",
            "class": "TableRowStyle",
            "module": "attributes"
        },
        {
            "file": "classes\\attributesStyle.js",
            "line": 474,
            "description": "Table width.",
            "itemtype": "property",
            "name": "width",
            "type": "String|Number",
            "default": "0",
            "class": "TableRowStyle",
            "module": "attributes"
        },
        {
            "file": "classes\\attributesStyle.js",
            "line": 480,
            "description": "Table maximal width. It is supposed to be equal to \"width\" property.",
            "itemtype": "property",
            "name": "max-width",
            "type": "String|Number",
            "default": "0",
            "class": "TableRowStyle",
            "module": "attributes"
        },
        {
            "file": "classes\\attributesStyle.js",
            "line": 486,
            "description": "Table minimal width. It is supposed to be equal to \"width\" property.",
            "itemtype": "property",
            "name": "min-width",
            "type": "String|Number",
            "default": "0",
            "class": "TableRowStyle",
            "module": "attributes"
        },
        {
            "file": "classes\\attributesStyle.js",
            "line": 507,
            "description": "Color of the border table",
            "itemtype": "property",
            "name": "border-color",
            "type": "String",
            "default": "\"#FFFFFF\"",
            "class": "TableCellStyle",
            "module": "attributes"
        },
        {
            "file": "classes\\attributesStyle.js",
            "line": 513,
            "description": "Style of the border table. See html manuals for possible values.",
            "itemtype": "property",
            "name": "border-style",
            "type": "String",
            "default": "\"none\"",
            "class": "TableCellStyle",
            "module": "attributes"
        },
        {
            "file": "classes\\attributesStyle.js",
            "line": 519,
            "description": "Width of the border table.",
            "itemtype": "property",
            "name": "border-width",
            "type": "String|Number",
            "default": "\"0px\"",
            "class": "TableCellStyle",
            "module": "attributes"
        },
        {
            "file": "classes\\attributesStyle.js",
            "line": 525,
            "description": "Padding.",
            "itemtype": "property",
            "name": "padding",
            "type": "String|Number",
            "default": "0",
            "class": "TableCellStyle",
            "module": "attributes"
        },
        {
            "file": "classes\\attributesStyle.js",
            "line": 531,
            "description": "Margin.",
            "itemtype": "property",
            "name": "margin",
            "type": "String|Number",
            "default": "0",
            "class": "TableCellStyle",
            "module": "attributes"
        },
        {
            "file": "classes\\attributesStyle.js",
            "line": 537,
            "description": "Table width.",
            "itemtype": "property",
            "name": "width",
            "type": "String|Number",
            "default": "0",
            "class": "TableCellStyle",
            "module": "attributes"
        },
        {
            "file": "classes\\attributesStyle.js",
            "line": 543,
            "description": "Table minimal width. It is supposed to be equal to \"width\" property.",
            "itemtype": "property",
            "name": "max-width",
            "type": "String|Number",
            "default": "0",
            "class": "TableCellStyle",
            "module": "attributes"
        },
        {
            "file": "classes\\attributesStyle.js",
            "line": 549,
            "description": "Table minimal width. It is supposed to be equal to \"width\" property.",
            "itemtype": "property",
            "name": "min-width",
            "type": "String|Number",
            "default": "0",
            "class": "TableCellStyle",
            "module": "attributes"
        },
        {
            "file": "classes\\attributesStyle.js",
            "line": 555,
            "description": "Vertical align of the cell content.",
            "itemtype": "property",
            "name": "vertical-align",
            "type": "String",
            "default": "0",
            "class": "TableCellStyle",
            "module": "attributes"
        },
        {
            "file": "classes\\attributesStyle.js",
            "line": 561,
            "description": "Font color",
            "itemtype": "property",
            "name": "color",
            "type": "String",
            "default": "\"#000001\". NB: Gmail removes color tags corresponding to the black color, so use #000001 instead of #000000.",
            "class": "TableCellStyle",
            "module": "attributes"
        },
        {
            "file": "classes\\attributesStyle.js",
            "line": 582,
            "description": "Width of the border around the image.",
            "itemtype": "property",
            "name": "border-width",
            "type": "String|Number",
            "default": "0",
            "class": "ImageStyle",
            "module": "attributes"
        },
        {
            "file": "classes\\attributesStyle.js",
            "line": 588,
            "description": "Style of the border around the image. See html manuals for possible values.",
            "itemtype": "property",
            "name": "border-style",
            "type": "String",
            "default": "\"none\"",
            "class": "ImageStyle",
            "module": "attributes"
        },
        {
            "file": "classes\\attributesStyle.js",
            "line": 594,
            "description": "Color of the border around the image.",
            "itemtype": "property",
            "name": "border-color",
            "type": "String",
            "default": "\"#FFFFFF\"",
            "class": "ImageStyle",
            "module": "attributes"
        },
        {
            "file": "classes\\attributesStyle.js",
            "line": 600,
            "description": "Padding.",
            "itemtype": "property",
            "name": "padding",
            "type": "String|Number",
            "default": "0",
            "class": "ImageStyle",
            "module": "attributes"
        },
        {
            "file": "classes\\attributesStyle.js",
            "line": 606,
            "description": "Margin.",
            "itemtype": "property",
            "name": "margin",
            "type": "String|Number",
            "default": "0",
            "class": "ImageStyle",
            "module": "attributes"
        },
        {
            "file": "classes\\attributesStyle.js",
            "line": 612,
            "description": "Image width.",
            "itemtype": "property",
            "name": "width",
            "type": "String|Number",
            "default": "0",
            "class": "ImageStyle",
            "module": "attributes"
        },
        {
            "file": "classes\\attributesStyle.js",
            "line": 618,
            "description": "Image height.",
            "itemtype": "property",
            "name": "height",
            "type": "String|Number",
            "default": "0",
            "class": "ImageStyle",
            "module": "attributes"
        },
        {
            "file": "classes\\attributesStyle.js",
            "line": 639,
            "description": "Padding.",
            "itemtype": "property",
            "name": "padding",
            "type": "String|Number",
            "default": "0",
            "class": "ListStyle",
            "module": "attributes"
        },
        {
            "file": "classes\\attributesStyle.js",
            "line": 646,
            "description": "Margin left.",
            "itemtype": "property",
            "name": "margin-left",
            "type": "String|Number",
            "default": "0",
            "class": "ListStyle",
            "module": "attributes"
        },
        {
            "file": "classes\\attributesStyle.js",
            "line": 653,
            "description": "Margin-right.",
            "itemtype": "property",
            "name": "margin-right",
            "type": "String|Number",
            "default": "0",
            "class": "ListStyle",
            "module": "attributes"
        },
        {
            "file": "classes\\attributesStyle.js",
            "line": 660,
            "description": "Margin-top.",
            "itemtype": "property",
            "name": "margin-top",
            "type": "String|Number",
            "default": "0",
            "class": "ListStyle",
            "module": "attributes"
        },
        {
            "file": "classes\\attributesStyle.js",
            "line": 667,
            "description": "Margin-bottom.",
            "itemtype": "property",
            "name": "margin-bottom",
            "type": "String|Number",
            "default": "0",
            "class": "ListStyle",
            "module": "attributes"
        },
        {
            "file": "classes\\attributesStyle.js",
            "line": 689,
            "description": "Font size of the  text in the list.",
            "itemtype": "property",
            "name": "font-size",
            "type": "String|Number",
            "default": "12",
            "class": "ListItemStyle",
            "module": "attributes"
        },
        {
            "file": "classes\\attributesStyle.js",
            "line": 695,
            "description": "Text color of the list item content.",
            "itemtype": "property",
            "name": "color",
            "type": "{String}",
            "default": "\"#000001\". NB: Gmail removes color tags corresponding to the black color, so use #000001 instead of #000000.",
            "class": "ListItemStyle",
            "module": "attributes"
        },
        {
            "file": "classes\\attributesStyle.js",
            "line": 703,
            "description": "Font weight. Some possible values: \"normal\", \"bold\", \"bolder\", 100, 200, ..., 900. See html manuals for more info.",
            "itemtype": "property",
            "name": "font-weight",
            "type": "String|Integer",
            "default": "\"normal\"",
            "class": "ListItemStyle",
            "module": "attributes"
        },
        {
            "file": "classes\\attributesStyle.js",
            "line": 709,
            "description": "Padding.",
            "itemtype": "property",
            "name": "padding",
            "type": "String|Number",
            "default": "0",
            "class": "ListItemStyle",
            "module": "attributes"
        },
        {
            "file": "classes\\attributesStyle.js",
            "line": 715,
            "description": "Margin.",
            "itemtype": "property",
            "name": "margin",
            "type": "String|Number",
            "default": "0",
            "class": "ListItemStyle",
            "module": "attributes"
        },
        {
            "file": "classes\\cell.js",
            "line": 19,
            "description": "Type of the object. Set to value \"Cell\" for the objects of this type.",
            "itemtype": "method",
            "name": "getType",
            "type": "String",
            "return": {
                "description": "",
                "type": "String"
            },
            "deprecated": true,
            "deprecationMessage": "in favor of getName()",
            "class": "Cell",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\cell.js",
            "line": 29,
            "description": "Html tag corresponding to Cell instances.",
            "itemtype": "property",
            "name": "name",
            "type": "{String}",
            "default": "table",
            "class": "Cell",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\cell.js",
            "line": 37,
            "description": "Overrides the inherited methods in order to pass the argument to the constructor of Content class.",
            "itemtype": "property",
            "name": "content",
            "type": "{Content}",
            "class": "Cell",
            "module": "HtmlElements",
            "subprops": [
                {
                    "name": "arg",
                    "description": "",
                    "type": "Any"
                }
            ]
        },
        {
            "file": "classes\\cell.js",
            "line": 45,
            "description": "Styles of the cell",
            "itemtype": "property",
            "name": "style",
            "type": "{TableCellStyle}",
            "default": "TableCellStyle",
            "class": "Cell",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\content.js",
            "line": 16,
            "description": "Container of items. If an item has a method \"toHtml\", it will be applied when transforming the whole Content object into a string.",
            "itemtype": "property",
            "name": "elements",
            "type": "Array",
            "default": "[str]",
            "class": "Content",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\content.js",
            "line": 23,
            "description": "The number of items in the \"elements\" property",
            "itemtype": "method",
            "name": "length",
            "return": {
                "description": "",
                "type": "Integer"
            },
            "class": "Content",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\content.js",
            "line": 32,
            "description": "Gets the element with index \"pos\". If it does not exist, null is returned.",
            "itemtype": "method",
            "name": "getElem",
            "params": [
                {
                    "name": "pos",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Mixed"
            },
            "class": "Content",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\content.js",
            "line": 42,
            "description": "Gets the first element. Delegates to Content::getElem(0)",
            "itemtype": "method",
            "name": "getFirst",
            "return": {
                "description": "",
                "type": "Mixed"
            },
            "class": "Content",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\content.js",
            "line": 51,
            "description": "Gets the last element. Delegates to Content::getElem()",
            "itemtype": "method",
            "name": "getLast",
            "return": {
                "description": "",
                "type": "Mixed"
            },
            "class": "Content",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\content.js",
            "line": 62,
            "description": "Appends the element to the array Content::elements.",
            "params": [
                {
                    "name": "elem",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Content",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\content.js",
            "line": 71,
            "description": "Inserts element at position pos inside the array of elements. If the lenght of array \"elements\"\nis equal to N, than the allowed position index is inside the range [0, 1, ..., N]. If the given\nposition index is outside that range, an error is thrown. If the position index is equal to N\n(that corresponds to appending the element), then Content::appendElem is called.",
            "itemtype": "method",
            "name": "insertElemAt",
            "params": [
                {
                    "name": "pos",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "elem",
                    "description": "",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Content",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\content.js",
            "line": 95,
            "description": "Appends element to the array of Content::elements.",
            "itemtype": "method",
            "name": "appendElem",
            "params": [
                {
                    "name": "elem",
                    "description": "",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Content",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\content.js",
            "line": 106,
            "description": "Drops the element at the given position and returns it. If element at the position does not exist,\nan error is thrown.",
            "itemtype": "method",
            "name": "dropElemAt",
            "params": [
                {
                    "name": "pos",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Mixed"
            },
            "class": "Content",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\content.js",
            "line": 122,
            "description": "Transforms the object into html form.  If item of the \"elements\" property is of Object type, then it should have \"toHtml\" method which is to be applied to the item.",
            "itemtype": "method",
            "name": "toHtml",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Content",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\list.js",
            "line": 20,
            "description": "Array of allowed values for the tag names: ['ol', 'ul'].",
            "itemtype": "property",
            "name": "allowedNames",
            "type": "{Array}",
            "access": "private",
            "tagname": "",
            "class": "List",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\list.js",
            "line": 28,
            "description": "Styles corresponding to the list as a whole object.",
            "itemtype": "property",
            "name": "style",
            "type": "ListStyle",
            "class": "List",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\list.js",
            "line": 34,
            "description": "Html tag corresponding to List object. It is taken from the name provided\nwhen creating the object: list = new List('ul'). If not provided or  if it\nis provided, but it is not allowed, then the first allowed value is used.",
            "itemtype": "property",
            "name": "name",
            "type": "{String}",
            "default": "'ol'",
            "class": "List",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\list.js",
            "line": 44,
            "description": "Gets the number of the list items",
            "itemtype": "method",
            "name": "itemNum",
            "return": {
                "description": "an integer number",
                "type": "Number"
            },
            "class": "List",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\list.js",
            "line": 53,
            "description": "Appends an object to the list items. The object must be a ListItem instance.\nIf not, an error is thrown.",
            "itemtype": "method",
            "name": "appendItem",
            "params": [
                {
                    "name": "item",
                    "description": "an instance of ListItem",
                    "type": "ListItem"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "List",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\list.js",
            "line": 67,
            "description": "Inserts the item at the given position. If the item to insert is a ListItem instance, then\nContent::insertElemAt() is called. Otherwise, an error is thrown.",
            "itemtype": "method",
            "name": "isertItemAt",
            "params": [
                {
                    "name": "pos",
                    "description": "index of the position of there to insert the item",
                    "type": "Number"
                },
                {
                    "name": "item",
                    "description": "item to insert",
                    "type": "ListItem"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "List",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\listItem.js",
            "line": 19,
            "description": "List item html tag.",
            "itemtype": "property",
            "name": "name",
            "type": "{String}",
            "default": "'li'",
            "class": "ListItem",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\listItem.js",
            "line": 27,
            "description": "List item styles",
            "itemtype": "property",
            "name": "style",
            "type": "{ListItemStyle}",
            "default": "ListItemStyle()",
            "class": "ListItem",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\listItem.js",
            "line": 35,
            "description": "Appends the element to the content of the list item.",
            "itemtype": "method",
            "name": "appendElem",
            "params": [
                {
                    "name": "elem",
                    "description": "",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "ListItem",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\row.js",
            "line": 19,
            "description": "Type of the object. Return \"Row\" for the objects of this type.",
            "itemtype": "method",
            "name": "getType",
            "type": "String",
            "return": {
                "description": "",
                "type": "String"
            },
            "deprecated": true,
            "deprecationMessage": "in favour of getName()",
            "class": "Row",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\row.js",
            "line": 29,
            "description": "Html tag corresponding to Row instances.",
            "itemtype": "property",
            "name": "name",
            "type": "{String}",
            "default": "td",
            "class": "Row",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\row.js",
            "line": 37,
            "description": "Styles of the row.",
            "itemtype": "property",
            "name": "style",
            "type": "{TableCellStyle}",
            "default": "TableRowStyle",
            "class": "Row",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\row.js",
            "line": 45,
            "description": "Gets an array of the widths of the cells inside the row.",
            "itemtype": "method",
            "name": "getCellWidths",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Row",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\row.js",
            "line": 60,
            "description": "Alias for length() method of the parent class.",
            "itemtype": "method",
            "name": "cellNum",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Row",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\row.js",
            "line": 69,
            "description": "Sets widths of the cells inside the row.",
            "itemtype": "method",
            "name": "setCellWidths",
            "params": [
                {
                    "name": "profile",
                    "description": "each elements if this array is a width of the corresp. cell in the row.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Row",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\row.js",
            "line": 86,
            "description": "Inserts a cell into a given position. If the object to insert is a Cell instance,\nthen parent method insertElemAt is called. Otherwise, an error is thrown.",
            "itemtype": "method",
            "name": "insertCellAt",
            "params": [
                {
                    "name": "cell",
                    "description": "a cell to insert. If not a Cell instance, an error will be thrown.",
                    "type": "Cell"
                },
                {
                    "name": "pos",
                    "description": "position at which the cell is to be inserted.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Row",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\row.js",
            "line": 101,
            "description": "Appends a cell to the row cells. If one tries to append a non-Cell object, an exception is thrown.\nOtherwise, a method appendElem of the parent class is called.",
            "itemtype": "method",
            "name": "appendCell",
            "params": [
                {
                    "name": "cell",
                    "description": "a cell to be appended. If not a Cell instance, an error is thrown.",
                    "type": "Cell"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Row",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\row.js",
            "line": 115,
            "description": "Returns true if the row contains only one cell and this cell contains a only one element\nthat is a Table() instance. Otherwise, false is returned.",
            "itemtype": "method",
            "name": "onlyTableInside",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Row",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\row.js",
            "line": 133,
            "description": "Alias for dropElemAt().",
            "itemtype": "method",
            "name": "dropCellAt",
            "params": [
                {
                    "name": "pos",
                    "description": "index of the cell to de dropped out.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Row",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\row.js",
            "line": 143,
            "description": "12/02/2014 11:55: dropCell --> knockOutCell\nDrops the cell at the given position and resizes the remaining cells. If the cell is utmost left, the freed space is then\nassigned to its right neighbour:\n|xxx| a | b   | c | -> |     a | b   | c |\n| a |xxx| b   | c | -> | a |     b   | c |\nIf there is no right neighbour, then it is assigned to the left one:\n| a | b | c | xxx | -> | a | b | c       |\nIf the cell to delete does not exist, nothing is performed.",
            "itemtype": "method",
            "name": "knockOutCell",
            "params": [
                {
                    "name": "cellNum",
                    "description": "cell number to delete. Numeration starts with 0.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "after",
                "type": "Void"
            },
            "class": "Row",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\row.js",
            "line": 176,
            "description": "Appends style to a given cell of the row. Alias for Tag::appendStyleToElemAt().",
            "itemtype": "method",
            "name": "appendStyleToCellAt",
            "params": [
                {
                    "name": "cellNum",
                    "description": "index of the target cell",
                    "type": "Number"
                },
                {
                    "name": "stl",
                    "description": "style to be appended",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Row",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\row.js",
            "line": 187,
            "description": "Populates the attributes from a string that is an html repersentation of some row.\nIt takes a string that is an html representation of a row and update current object\nparameters such that it will correspond to the html representation.\nIn other words, (new Row()).loadFromHtml(htmlString).toHtml() should be similar to htmlString\n(eventually up to presence/absence of some parameters and attributes).",
            "itemtype": "method",
            "name": "loadFromHtml",
            "params": [
                {
                    "name": "htmlStr",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "deprecated": true,
            "deprecationMessage": "in favour of String::createRowFromHtml()",
            "class": "Row",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\table.js",
            "line": 19,
            "description": "Type of the object. Returns \"Table\" for the objects of this type.",
            "itemtype": "method",
            "name": "getType",
            "type": "String",
            "return": {
                "description": "",
                "type": "String"
            },
            "deprecated": true,
            "deprecationMessage": "in favor of getName()",
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\table.js",
            "line": 29,
            "description": "Html tag corresponding to Table instances.",
            "itemtype": "property",
            "name": "name",
            "type": "{String}",
            "default": "table",
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\table.js",
            "line": 37,
            "description": "Attributes of the table. Overrides parent property \"attr\".",
            "itemtype": "property",
            "name": "attr",
            "type": "{TableAttributes}",
            "default": "TableAttributes",
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\table.js",
            "line": 45,
            "description": "Styles of the row. Overrides parent property \"style\".",
            "itemtype": "property",
            "name": "style",
            "type": "{TableStyle}",
            "default": "TableStyle",
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\table.js",
            "line": 53,
            "description": "The number of the rows in the table. Alias of length() of the parent class.",
            "itemtype": "method",
            "name": "rowNum",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\table.js",
            "line": 62,
            "description": "Appends a row to the content property. If the argument is not a Row instance, an error is thrown.",
            "itemtype": "method",
            "name": "appendRow",
            "params": [
                {
                    "name": "row",
                    "description": "a row to append. If not a Row instance, an error is thrown.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\table.js",
            "line": 75,
            "description": "Gives a two-dimensional array [[w_11, w_12, ..., w_1n], ..., [w_m1, w_m2, ..., w_m3]]\nwhere w_ij is width of the cell located in the row i and column j.",
            "itemtype": "method",
            "name": "getMatrix",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\table.js",
            "line": 90,
            "description": "Returns array of widths of the cells in the table rows if all rows\nhave the same cell widths. Otherwise null is returned.",
            "itemtype": "method",
            "name": "getProfile",
            "return": {
                "description": "",
                "type": "Array|Null"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\table.js",
            "line": 100,
            "description": "Imposes the widths of all cell in all rows of the table. If the argument is not array, an error is thrown.\nIf the array length is different from the number of columns, an error is thrown. Otherwise, it is called\nmethod of Row::setCellWidths on each table row.",
            "itemtype": "method",
            "name": "setProfile",
            "params": [
                {
                    "name": "profile",
                    "description": "an array of cell widths that will be applied to each row.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\table.js",
            "line": 123,
            "description": "Inserts a cell \"cell\" into a given position \"pos\" of each row of the table.\nIf the table has 5 columns, then after insertion it will have 5+1=6 columns.\nPosition \"pos\" will correspond to the index of the inserted cell in the row after insertion.\n\"pos\" must be a valid cell number into the table after insertion. So, for the example above,\nthe valid values for \"pos\" are 0, 1, 2, 3, 4 and 5.",
            "itemtype": "method",
            "name": "insertColAt",
            "params": [
                {
                    "name": "cell",
                    "description": "",
                    "type": "Cell"
                },
                {
                    "name": "pos",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\table.js",
            "line": 155,
            "description": "Knocks out given column from the table. The operation is delegated to the Row::knockOutCell()",
            "itemtype": "method",
            "name": "knockOutCol",
            "params": [
                {
                    "name": "colNum",
                    "description": "the number of the column to be knocked out. Numeration starts with 0.",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\table.js",
            "line": 169,
            "description": "Drops specified column from the table. The operation is delegated to the Row::dropCellAt()",
            "itemtype": "method",
            "name": "dropColAt",
            "params": [
                {
                    "name": "colNum",
                    "description": "the number of the column to delete. Numeration starts with 0.",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\table.js",
            "line": 183,
            "description": "Gives the number of columns in the table or null if not all rows have the same number of cells.\nThe operation is delegated to the Row::cellNum().",
            "itemtype": "method",
            "name": "colNum",
            "return": {
                "description": "",
                "type": "Number|null"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\table.js",
            "line": 210,
            "description": "Whether all rows in the table have the same cell widths.",
            "itemtype": "method",
            "name": "isSameWidth",
            "return": {
                "description": "true, if all rows have the same cells' widths, false otherwise.",
                "type": "Boolean"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\table.js",
            "line": 246,
            "description": "Set the border of the table. It updates the properties 'attr' and 'style' of the instance:\n1. in 'style' property, sets up the following properties: 'border-width', 'border-color' and 'border-style'\n2. in 'attr' property, sets up 'border' property.\nNote that if after setting the border there is an assigment of 'style' or 'attr' property, then some info about the border might be overwritten.",
            "itemtype": "method",
            "name": "setBorder",
            "params": [
                {
                    "name": "borderInfo",
                    "description": "Object containing 'width', 'color' and 'style' for the border to set.",
                    "type": "Object"
                }
            ],
            "default": "border-width is set to 1, border-color is set to #000000, border-style is set to solid.",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\table.js",
            "line": 271,
            "description": "Removes the border of the table. It updates the properties 'attr' and 'style' of the instance:\n1. in 'style' property, deletes the properties: 'border-width', 'border-color' and sets up 'border-style' to 'none'\n2. in 'attr' property, deletes 'border' property.",
            "itemtype": "method",
            "name": "removeBorder",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\table.js",
            "line": 292,
            "description": "Returns true, if the table content is such that visually it corresponds to a table with framed rows.\nOtherwise, false is returned.",
            "itemtype": "method",
            "name": "isFragmeted",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\table.js",
            "line": 312,
            "description": "Gives true if all table rows have border around (that is, each row is nothing but a table with border)\nfalse otherwise. It at least one of the properties, corresponding to the \"bogus\" elements is set, then\nthe table is considered as being framed and hence all its rows will be framed.",
            "itemtype": "method",
            "name": "isFramed",
            "return": {
                "description": "true, if all table rows have border around",
                "type": "Boolean"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\table.js",
            "line": 329,
            "description": "Resets bogus properties. After resetting those properties, the table becomes a table without frame.",
            "itemtype": "method",
            "name": "resetBogus",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\table.js",
            "line": 346,
            "description": "Appends the style to the column. If the column exists, the method call Row::appendStyleToCell()\non each of the table rows.",
            "itemtype": "method",
            "name": "appendStyleToCol",
            "params": [
                {
                    "name": "colNum",
                    "description": "column number to which the style is to be appended.",
                    "type": "Number"
                },
                {
                    "name": "style",
                    "description": "Style or Object to be appended",
                    "type": "Style|Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\table.js",
            "line": 370,
            "description": "Generates table-specific html code with corresponding attributes and styles.\nCreation of the row-related html of each row is delegated to Row::toHtml()",
            "itemtype": "method",
            "name": "toHtml",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\table.js",
            "line": 410,
            "description": "Style of the row containing a single cell. It is used to created to a table with framed lines.\nIt is supposed that all properties\nbogusRowStyle, bogusRowAttr, bogusCellStyle, bogusCellAttr, bogusTableStyle, bogusTableAttr\nare simultaneously null or set.",
            "itemtype": "property",
            "name": "bogusRowStyle",
            "type": "Style",
            "default": "null",
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\table.js",
            "line": 420,
            "description": "Attributes of the row containing a single cell. It is used to created to a table with framed lines.\nIt is supposed that all properties\nbogusRowStyle, bogusRowAttr, bogusCellStyle, bogusCellAttr, bogusTableStyle, bogusTableAttr\nare simultaneously null or set.",
            "itemtype": "property",
            "name": "bogusRowAttr",
            "type": "Attribute",
            "default": "null",
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\table.js",
            "line": 430,
            "description": "Style of the  the cell which fills the whole row. It is used to created to a table with framed lines.\nIt is supposed that all properties\nbogusRowStyle, bogusRowAttr, bogusCellStyle, bogusCellAttr, bogusTableStyle, bogusTableAttr\nare simultaneously null or set.",
            "itemtype": "property",
            "name": "bogusCellStyle",
            "type": "TableCellStyle",
            "default": "null",
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\table.js",
            "line": 440,
            "description": "Attributes of the  the cell which fills the whole row. It is used to created to a table with framed lines.\nIt is supposed that all properties\nbogusRowStyle, bogusRowAttr, bogusCellStyle, bogusCellAttr, bogusTableStyle, bogusTableAttr\nare simultaneously null or set.",
            "itemtype": "property",
            "name": "bogusCellAttr",
            "type": "Attribute",
            "default": "null",
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\table.js",
            "line": 450,
            "description": "Style of the  the table that will be inserted into the single cell to create a table with framed lines.\nIt is supposed that all properties\nbogusRowStyle, bogusRowAttr, bogusCellStyle, bogusCellAttr, bogusTableStyle, bogusTableAttr\nare simultaneously null or set.",
            "itemtype": "property",
            "name": "bogusTableStyle",
            "type": "TableStyle",
            "default": "null",
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\table.js",
            "line": 460,
            "description": "Attributes of the  the table that will be inserted into the single cell to create a table with framed lines.\nIt is supposed that all properties\nbogusRowStyle, bogusRowAttr, bogusCellStyle, bogusCellAttr, bogusTableStyle, bogusTableAttr\nare simultaneously null or set.",
            "itemtype": "property",
            "name": "bogusTableAttr",
            "type": "Attribute",
            "default": "null",
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\tag.js",
            "line": 16,
            "description": "Tag name.To be set explicitely in child classes.",
            "itemtype": "property",
            "name": "name",
            "type": "String",
            "default": "null",
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\tag.js",
            "line": 23,
            "description": "Returns value of the name attribute.",
            "itemtype": "method",
            "name": "getName",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\tag.js",
            "line": 33,
            "description": "Tag attributes",
            "itemtype": "property",
            "name": "attr",
            "type": "{Attributes}",
            "default": "Attributes()",
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\tag.js",
            "line": 41,
            "description": "Attribute setter.",
            "itemtype": "method",
            "name": "setAttr",
            "params": [
                {
                    "name": "attr",
                    "description": "",
                    "type": "String|Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\tag.js",
            "line": 51,
            "description": "Appends style to the cell. Alias for Style::appendStyle().",
            "itemtype": "method",
            "name": "appendStyle",
            "params": [
                {
                    "name": "stl",
                    "description": "style to be appended",
                    "type": "Style|Obj"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\tag.js",
            "line": 66,
            "description": "Appends style to the element at position pos. It is supposed that such an element exists\nand it has a property \"style\" which is a Style instance. In this case method\nStyle::appendStyle() will be called on this element.\nOtherwise, an error is thrown.",
            "itemtype": "method",
            "name": "appendStyleToElemAt",
            "params": [
                {
                    "name": "pos",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "stl",
                    "description": "",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\tag.js",
            "line": 85,
            "description": "Tag styles",
            "itemtype": "property",
            "name": "style",
            "type": "{ListItemStyle}",
            "default": "ListItemStyle()",
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\tag.js",
            "line": 93,
            "description": "Style setter.",
            "itemtype": "method",
            "name": "setStyle",
            "params": [
                {
                    "name": "stl",
                    "description": "",
                    "type": "String|Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\tag.js",
            "line": 103,
            "description": "Retrieves the value of property from the \"style\"",
            "itemtype": "method",
            "name": "styleProperty",
            "params": [
                {
                    "name": "prop",
                    "description": "property name which value should be retrieved",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String|Number"
            },
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\tag.js",
            "line": 114,
            "description": "Imposes the value of the width of the \"attr\" and \"style\" properties. In the latter, \"min-width\"\nand \"max-width\" are imposed as well. It is better to use with an integer argument and without\nunit of measurement (as attr property should not have unit of measurement in its string representation\nwhen convirting it in html form).",
            "itemtype": "method",
            "name": "setWidth",
            "params": [
                {
                    "name": "w",
                    "description": "",
                    "type": "String|Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\tag.js",
            "line": 133,
            "description": "Gets the width of the object as it is present in the style property. It tends to return a number:\nif it is measured in \"px\", then the measurment unit is removed and the number is returned.",
            "itemtype": "method",
            "name": "getWidth",
            "return": {
                "description": "",
                "type": "Number|String"
            },
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\tag.js",
            "line": 154,
            "description": "Content of the tag.",
            "itemtype": "property",
            "name": "content",
            "type": "{Content}",
            "default": "Content()",
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\tag.js",
            "line": 162,
            "description": "Gets the element stored in property \"content\". Delegates its functionality to the class Content.",
            "itemtype": "method",
            "name": "getElem",
            "params": [
                {
                    "name": "pos",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Any"
            },
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\tag.js",
            "line": 172,
            "description": "Gets the first element stored in property \"content\". Delegates its functionality to the class Content.",
            "itemtype": "method",
            "name": "getFirst",
            "return": {
                "description": "",
                "type": "Any"
            },
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\tag.js",
            "line": 181,
            "description": "Gets the last element stored in property \"content\". Delegates its functionality to the class Content.",
            "itemtype": "method",
            "name": "getLast",
            "return": {
                "description": "",
                "type": "Any"
            },
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\tag.js",
            "line": 190,
            "description": "Inserts an element into given position. Delegates its functionality to the class Content.",
            "itemtype": "method",
            "name": "insertElemAt",
            "params": [
                {
                    "name": "pos",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "elem",
                    "description": "",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\tag.js",
            "line": 201,
            "description": "Appends the element to the content of the list item. Delegates to Content::appendElem().",
            "itemtype": "method",
            "name": "appendElem",
            "params": [
                {
                    "name": "elem",
                    "description": "",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\tag.js",
            "line": 211,
            "description": "Returns the number of elements inside its content. Delegates to Content::length().",
            "itemtype": "method",
            "name": "length",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\tag.js",
            "line": 220,
            "description": "Deletes element from \"content\" property. Delegates its functionalality to Content::dropElemAt().",
            "itemtype": "method",
            "name": "dropElemAt",
            "params": [
                {
                    "name": "pos",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "classes\\tag.js",
            "line": 230,
            "description": "Gives html representation of the instance. If tag name is undefined or empty, just html comment is generated.",
            "itemtype": "method",
            "name": "toHtml",
            "return": {
                "description": "html representation of an instance of this class.",
                "type": "String"
            },
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "helpers.js",
            "line": 22,
            "description": "Converts the first letter of the string into the upper case\nIf the string is empty, the output is empty string as well.",
            "params": [
                {
                    "name": "str",
                    "description": "String"
                }
            ],
            "return": {
                "description": "String"
            },
            "class": "",
            "module": "HtmlElements"
        },
        {
            "file": "helpers.js",
            "line": 32,
            "description": "Converts the first letter of the string into the upper case\nIf the string is empty, the output is empty string as well.",
            "params": [
                {
                    "name": "str",
                    "description": "String"
                }
            ],
            "return": {
                "description": "String"
            },
            "class": "",
            "module": "HtmlElements"
        },
        {
            "file": "helpers.js",
            "line": 293,
            "description": "Replaces special characters present in the input string by their unicodes. It is supposed to replace symbols like à, ò, è, é\nand not a, b, c etc. For the moment it replaces any characters which unicode is outside the range [32, 125].",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "",
            "module": "helpers"
        },
        {
            "file": "helpers.js",
            "line": 316,
            "description": "Splits array element at position \"pos\" in two parts in such a way that the trace of the original array\nis equal to the trace of the output array. If it is the first element of the array to be splitted, then\nit is splitted in 1/2 and 1/2 (up to the truncation). If the element has a left neighbour, then the neighbour\nand the element are taken off 1/3 and these two parts are given to the newly created element that is inserted\nbetween the neighbour and the element: [a, b, ...] -> [2/3 a, 1/3 (a + b), 2/3 b, ...]",
            "params": [
                {
                    "name": "arr",
                    "description": "array of integers",
                    "type": "Array"
                },
                {
                    "name": "pos",
                    "description": "index of the element, before which an element will be inserted",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "array of integers",
                "type": "Array"
            },
            "class": "",
            "module": "helpers"
        },
        {
            "file": "helpers.js",
            "line": 413,
            "description": "Flatten the object. This function was written because Node::attributes returns attributes in format.\nExample {'1': {name: \"width\", value:\"100\", ...}, '2': {name: \"color\", value:\"black\", ...}, ...}\nreturns {\"width\":\"100\", \"color\":\"black\", ...}",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "",
            "module": "attributes"
        },
        {
            "file": "helpers.js",
            "line": 432,
            "description": "Sandwiches the midlle string with the left and the right ones. If the middle one is empty, empty string is returned.\nIf the right arguments is not given, the left one is used.",
            "params": [
                {
                    "name": "left",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "middle",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "right",
                    "description": "",
                    "type": "String"
                }
            ],
            "type": "String|Null",
            "return": {
                "description": "",
                "type": "String|Null"
            },
            "class": "",
            "module": "attributes"
        },
        {
            "file": "helpers.js",
            "line": 453,
            "description": "Glues all elements of the array, replace trailing spaces and repaces multiple spaces with a single one.",
            "params": [
                {
                    "name": "arr",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "glue",
                    "description": "glue string",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "",
            "module": "attributes"
        },
        {
            "file": "helpers.js",
            "line": 470,
            "description": "Merge two objects. If non-object is given, an error is thrown.",
            "params": [
                {
                    "name": "obj1",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "obj2",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "",
            "module": "attributes"
        },
        {
            "file": "jquery-1.10.2.js",
            "line": 1292,
            "description": "Create key-value caches of limited size",
            "return": {
                "description": "Returns the Object data after storing it on itself with\n\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n\tdeleting the oldest entry",
                "type": "Function(string, Object)"
            },
            "class": "",
            "module": "attributes"
        },
        {
            "file": "jquery-1.10.2.js",
            "line": 1312,
            "description": "Mark a function for special use by Sizzle",
            "params": [
                {
                    "name": "fn",
                    "description": "The function to mark",
                    "type": "Function"
                }
            ],
            "class": "",
            "module": "attributes"
        },
        {
            "file": "jquery-1.10.2.js",
            "line": 1321,
            "description": "Support testing using an element",
            "params": [
                {
                    "name": "fn",
                    "description": "Passed the created div and expects a boolean result",
                    "type": "Function"
                }
            ],
            "class": "",
            "module": "attributes"
        },
        {
            "file": "jquery-1.10.2.js",
            "line": 1342,
            "description": "Adds the same handler for all of the specified attrs",
            "params": [
                {
                    "name": "attrs",
                    "description": "Pipe-separated list of attributes",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "The method that will be applied",
                    "type": "Function"
                }
            ],
            "class": "",
            "module": "attributes"
        },
        {
            "file": "jquery-1.10.2.js",
            "line": 1356,
            "description": "Checks document order of two siblings",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Element"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "Returns less than 0 if a precedes b, greater than 0 if a follows b",
                "type": "Number"
            },
            "class": "",
            "module": "attributes"
        },
        {
            "file": "jquery-1.10.2.js",
            "line": 1385,
            "description": "Returns a function to use in pseudos for input types",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "",
            "module": "attributes"
        },
        {
            "file": "jquery-1.10.2.js",
            "line": 1396,
            "description": "Returns a function to use in pseudos for buttons",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "",
            "module": "attributes"
        },
        {
            "file": "jquery-1.10.2.js",
            "line": 1407,
            "description": "Returns a function to use in pseudos for positionals",
            "params": [
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "",
            "module": "attributes"
        },
        {
            "file": "jquery-1.10.2.js",
            "line": 1429,
            "description": "Detect xml",
            "params": [
                {
                    "name": "elem",
                    "description": "An element or a document",
                    "type": "Element|Object"
                }
            ],
            "class": "",
            "module": "attributes"
        },
        {
            "file": "jquery-1.10.2.js",
            "line": 1443,
            "description": "Sets document-related variables once based on the current document",
            "params": [
                {
                    "name": "doc",
                    "description": "An element or document object to use to set the document",
                    "type": "Element|Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns the current document",
                "type": "Object"
            },
            "class": "",
            "module": "attributes"
        },
        {
            "file": "jquery-1.10.2.js",
            "line": 1853,
            "description": "Document sorting and removing duplicates",
            "params": [
                {
                    "name": "results",
                    "description": "",
                    "type": "ArrayLike"
                }
            ],
            "class": "",
            "module": "attributes"
        },
        {
            "file": "jquery-1.10.2.js",
            "line": 1882,
            "description": "Utility function for retrieving the text value of an array of DOM nodes",
            "params": [
                {
                    "name": "elem",
                    "description": "",
                    "type": "Array|Element"
                }
            ],
            "class": "",
            "module": "attributes"
        },
        {
            "file": "start.js",
            "line": 15,
            "description": "Drops inline attribute named attrName from DOM element",
            "params": [
                {
                    "name": "element",
                    "description": "an inline attribute of  this element will be dropped. The element should respond to jQuery \"attr\" method.",
                    "type": "Object"
                },
                {
                    "name": "attrName",
                    "description": "this attribute name will be dropped.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "",
            "module": "attributes"
        },
        {
            "file": "start.js",
            "line": 31,
            "description": "Inserts table and applies hover effect on it.\nIt is based on CKEDITOR.editor.insertElement() method.\nThis approach might be wrong but I wanted to avoid repetitions.",
            "params": [
                {
                    "name": "table",
                    "description": "",
                    "type": "CKEDITOR.dom.element"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "",
            "module": "attributes"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " jquery-1.10.2.js:1292"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " jquery-1.10.2.js:1356"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " jquery-1.10.2.js:1443"
        },
        {
            "message": "Missing item type\nFill in the properties with the values from the argument if any",
            "line": " classes\\attributesStyle.js:18"
        },
        {
            "message": "Missing item type\nreturns object with keys 'width', 'color', 'style' describing the border.\nIf the Style object has 'border-style' equal to 'none', then in the\nreturn object, the key 'width' is set to 0.\nIf 'border-style' is not 'none' and 'border-width' is present, then in the\nreturn object, the key 'width' the 'border-width' value.\nOtherwise, the 'width' key is not present.",
            "line": " classes\\attributesStyle.js:90"
        },
        {
            "message": "Missing item type\nFill in the properties with the values from the argument if any",
            "line": " classes\\attributesStyle.js:170"
        },
        {
            "message": "Missing item type\nAppends the element to the array Content::elements.",
            "line": " classes\\content.js:62"
        },
        {
            "message": "Missing item type\nConverts the first letter of the string into the upper case\nIf the string is empty, the output is empty string as well.",
            "line": " helpers.js:22"
        },
        {
            "message": "Missing item type\nConverts the first letter of the string into the upper case\nIf the string is empty, the output is empty string as well.",
            "line": " helpers.js:32"
        },
        {
            "message": "Missing item type\nReplaces special characters present in the input string by their unicodes. It is supposed to replace symbols like à, ò, è, é\nand not a, b, c etc. For the moment it replaces any characters which unicode is outside the range [32, 125].",
            "line": " helpers.js:293"
        },
        {
            "message": "Missing item type\nSplits array element at position \"pos\" in two parts in such a way that the trace of the original array\nis equal to the trace of the output array. If it is the first element of the array to be splitted, then\nit is splitted in 1/2 and 1/2 (up to the truncation). If the element has a left neighbour, then the neighbour\nand the element are taken off 1/3 and these two parts are given to the newly created element that is inserted\nbetween the neighbour and the element: [a, b, ...] -> [2/3 a, 1/3 (a + b), 2/3 b, ...]",
            "line": " helpers.js:316"
        },
        {
            "message": "Missing item type\nFlatten the object. This function was written because Node::attributes returns attributes in format.\nExample {'1': {name: \"width\", value:\"100\", ...}, '2': {name: \"color\", value:\"black\", ...}, ...}\nreturns {\"width\":\"100\", \"color\":\"black\", ...}",
            "line": " helpers.js:413"
        },
        {
            "message": "Missing item type\nSandwiches the midlle string with the left and the right ones. If the middle one is empty, empty string is returned.\nIf the right arguments is not given, the left one is used.",
            "line": " helpers.js:432"
        },
        {
            "message": "Missing item type\nGlues all elements of the array, replace trailing spaces and repaces multiple spaces with a single one.",
            "line": " helpers.js:453"
        },
        {
            "message": "Missing item type\nMerge two objects. If non-object is given, an error is thrown.",
            "line": " helpers.js:470"
        },
        {
            "message": "Missing item type\nCreate key-value caches of limited size",
            "line": " jquery-1.10.2.js:1292"
        },
        {
            "message": "Missing item type\nMark a function for special use by Sizzle",
            "line": " jquery-1.10.2.js:1312"
        },
        {
            "message": "Missing item type\nSupport testing using an element",
            "line": " jquery-1.10.2.js:1321"
        },
        {
            "message": "Missing item type\nAdds the same handler for all of the specified attrs",
            "line": " jquery-1.10.2.js:1342"
        },
        {
            "message": "Missing item type\nChecks document order of two siblings",
            "line": " jquery-1.10.2.js:1356"
        },
        {
            "message": "Missing item type\nReturns a function to use in pseudos for input types",
            "line": " jquery-1.10.2.js:1385"
        },
        {
            "message": "Missing item type\nReturns a function to use in pseudos for buttons",
            "line": " jquery-1.10.2.js:1396"
        },
        {
            "message": "Missing item type\nReturns a function to use in pseudos for positionals",
            "line": " jquery-1.10.2.js:1407"
        },
        {
            "message": "Missing item type\nDetect xml",
            "line": " jquery-1.10.2.js:1429"
        },
        {
            "message": "Missing item type\nSets document-related variables once based on the current document",
            "line": " jquery-1.10.2.js:1443"
        },
        {
            "message": "Missing item type\nDocument sorting and removing duplicates",
            "line": " jquery-1.10.2.js:1853"
        },
        {
            "message": "Missing item type\nUtility function for retrieving the text value of an array of DOM nodes",
            "line": " jquery-1.10.2.js:1882"
        },
        {
            "message": "Missing item type\nDrops inline attribute named attrName from DOM element",
            "line": " start.js:15"
        },
        {
            "message": "Missing item type\nInserts table and applies hover effect on it.\nIt is based on CKEDITOR.editor.insertElement() method.\nThis approach might be wrong but I wanted to avoid repetitions.",
            "line": " start.js:31"
        }
    ]
}