{
    "project": {},
    "files": {
        "ckeditor\\plugins\\list2\\plugin.js": {
            "name": "ckeditor\\plugins\\list2\\plugin.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "ckeditor\\plugins\\table2\\dialogs\\table2.js": {
            "name": "ckeditor\\plugins\\table2\\dialogs\\table2.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "ckeditor\\plugins\\table2\\plugin.js": {
            "name": "ckeditor\\plugins\\table2\\plugin.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "ckeditor\\build-config.js": {
            "name": "ckeditor\\build-config.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "ckeditor\\config.js": {
            "name": "ckeditor\\config.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "ckeditor\\styles.js": {
            "name": "ckeditor\\styles.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "jasmine\\lib\\jasmine-1.3.0\\jasmine.js": {
            "name": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\attributesStyle.js": {
            "name": "js\\attributesStyle.js",
            "modules": {},
            "classes": {
                "Style": 1,
                "BorderStyle": 1,
                "Attributes": 1,
                "TableAttributes": 1,
                "TextStyle": 1,
                "LinkStyle": 1,
                "TableStyle": 1,
                "TableRowStyle": 1,
                "TableCellStyle": 1,
                "ImageStyle": 1,
                "ListStyle": 1,
                "ListItemStyle": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\cell.js": {
            "name": "js\\cell.js",
            "modules": {},
            "classes": {
                "Cell": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\content.js": {
            "name": "js\\content.js",
            "modules": {},
            "classes": {
                "Content": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\helpers.js": {
            "name": "js\\helpers.js",
            "modules": {
                "attributes": 1,
                "helpers": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\jquery-1.10.2.js": {
            "name": "js\\jquery-1.10.2.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\list.js": {
            "name": "js\\list.js",
            "modules": {},
            "classes": {
                "ListItem": 1,
                "List": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\row.js": {
            "name": "js\\row.js",
            "modules": {},
            "classes": {
                "Row": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\start.js": {
            "name": "js\\start.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "js\\string.js": {
            "name": "js\\string.js",
            "modules": {
                "String": 1
            },
            "classes": {
                "createRowFromHtml": 1,
                "createTableFromHtml": 1,
                "isFramedTable": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\table.js": {
            "name": "js\\table.js",
            "modules": {
                "HtmlElements": 1
            },
            "classes": {
                "Table": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\tag.js": {
            "name": "js\\tag.js",
            "modules": {},
            "classes": {
                "Tag": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "settings\\editor_config.js": {
            "name": "settings\\editor_config.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "attributes": {
            "name": "attributes",
            "submodules": {},
            "classes": {
                "Style": 1,
                "BorderStyle": 1,
                "Attributes": 1,
                "TableAttributes": 1,
                "TextStyle": 1,
                "LinkStyle": 1,
                "TableStyle": 1,
                "TableRowStyle": 1,
                "TableCellStyle": 1,
                "ImageStyle": 1,
                "ListStyle": 1,
                "ListItemStyle": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "js\\attributesStyle.js",
            "line": 642,
            "description": "Produces a string of properties in inline-style fashion\nThis function is supposed to be added to prototypes of different objects.\nIt takse into consideration only properties, methods are ignored.\nIf attribite value is a number, the measurement unit will be appended.",
            "params": [
                {
                    "name": "style",
                    "description": "string of label-value pairs or object.",
                    "type": "String|object"
                }
            ],
            "extends": "Style",
            "return": {
                "description": "a concatenation of substrings; each substring is of this format: \"attribute: value;\".",
                "type": "String"
            },
            "example": [
                " The return value is of the form: \"padding: 0px;margin: 10px;color: #ababab;\""
            ]
        },
        "HtmlElements": {
            "name": "HtmlElements",
            "submodules": {},
            "classes": {
                "Cell": 1,
                "Content": 1,
                "ListItem": 1,
                "List": 1,
                "Row": 1,
                "Table": 1,
                "Tag": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "js\\tag.js",
            "line": 5,
            "description": "Represents table.",
            "params": [
                {
                    "name": "arg",
                    "description": "",
                    "type": "Mixed"
                }
            ],
            "extends": "Tag"
        },
        "helpers": {
            "name": "helpers",
            "submodules": {},
            "classes": {},
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "js\\helpers.js",
            "line": 44,
            "description": "transforms each element of the input array into a non-negative number.\nIf an element is negative, its absolute value is used.\nIf an element fails to be converted to a number, it is substituted by zero.",
            "example": [
                "   [1.1, 2.4, 2] -> [1.1, 2.4, 2],\n           [\"4\", -3, 3.2, \"a\"] -> [4, 3, 3.2, 0]"
            ],
            "params": [
                {
                    "name": "arr",
                    "description": "Array      array of numbers"
                }
            ],
            "return": {
                "description": "Array      array of numbers"
            },
            "itemtype": "method"
        },
        "String": {
            "name": "String",
            "submodules": {},
            "classes": {
                "createRowFromHtml": 1,
                "createTableFromHtml": 1,
                "isFramedTable": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "js\\string.js",
            "line": 311,
            "description": "Transforms a row-html string into a Row object. It is supposed that the string to process is of the\nfollowing form: <tr ... > ... </tr>. Inside the tag, there might be elements \"td\" that will be\nprocessed one by one by function String::createCellFromHtml().",
            "itemtype": "method",
            "return": {
                "description": "Row",
                "type": "Object"
            }
        }
    },
    "classes": {
        "Style": {
            "name": "Style",
            "shortname": "Style",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "attributes",
            "namespace": "",
            "file": "js\\attributesStyle.js",
            "line": 5,
            "description": "This class is supposed to characterize inline styles of html tags.",
            "params": [
                {
                    "name": "style",
                    "description": "string of label-value pairs or object.",
                    "type": "String|object"
                }
            ]
        },
        "BorderStyle": {
            "name": "BorderStyle",
            "shortname": "BorderStyle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "attributes",
            "namespace": "",
            "file": "js\\attributesStyle.js",
            "line": 121,
            "description": "Styles specific for the table border.",
            "extends": "Style"
        },
        "Attributes": {
            "name": "Attributes",
            "shortname": "Attributes",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "attributes",
            "namespace": "",
            "file": "js\\attributesStyle.js",
            "line": 156,
            "description": "This class is supposed to define attributes of html tags",
            "params": [
                {
                    "name": "attr",
                    "description": "a string or object from which this object properties are to be created.",
                    "type": "String|object"
                }
            ]
        },
        "TableAttributes": {
            "name": "TableAttributes",
            "shortname": "TableAttributes",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "attributes",
            "namespace": "",
            "file": "js\\attributesStyle.js",
            "line": 229,
            "description": "Table-specific attributes.",
            "extends": "Attributes"
        },
        "TextStyle": {
            "name": "TextStyle",
            "shortname": "TextStyle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "attributes",
            "namespace": "",
            "file": "js\\attributesStyle.js",
            "line": 253,
            "description": "Text specific style class.",
            "extends": "Style"
        },
        "LinkStyle": {
            "name": "LinkStyle",
            "shortname": "LinkStyle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "attributes",
            "namespace": "",
            "file": "js\\attributesStyle.js",
            "line": 297,
            "description": "Represents hyperlink style."
        },
        "TableStyle": {
            "name": "TableStyle",
            "shortname": "TableStyle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "attributes",
            "namespace": "",
            "file": "js\\attributesStyle.js",
            "line": 348,
            "description": "Represents table style."
        },
        "TableRowStyle": {
            "name": "TableRowStyle",
            "shortname": "TableRowStyle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "attributes",
            "namespace": "",
            "file": "js\\attributesStyle.js",
            "line": 424,
            "description": "Represents table row style."
        },
        "TableCellStyle": {
            "name": "TableCellStyle",
            "shortname": "TableCellStyle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "attributes",
            "namespace": "",
            "file": "js\\attributesStyle.js",
            "line": 486,
            "description": "Represents table cell styles."
        },
        "ImageStyle": {
            "name": "ImageStyle",
            "shortname": "ImageStyle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "attributes",
            "namespace": "",
            "file": "js\\attributesStyle.js",
            "line": 560,
            "description": "Represents image styles."
        },
        "ListStyle": {
            "name": "ListStyle",
            "shortname": "ListStyle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "attributes",
            "namespace": "",
            "file": "js\\attributesStyle.js",
            "line": 616,
            "description": "Represents image styles."
        },
        "ListItemStyle": {
            "name": "ListItemStyle",
            "shortname": "ListItemStyle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "attributes",
            "namespace": "",
            "file": "js\\attributesStyle.js",
            "line": 642,
            "description": "Represents list item styles."
        },
        "Cell": {
            "name": "Cell",
            "shortname": "Cell",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "HtmlElements",
            "namespace": "",
            "file": "js\\cell.js",
            "line": 5,
            "description": "Represents a table cell. The argument is supposed to be passed to the \"content\" property."
        },
        "Content": {
            "name": "Content",
            "shortname": "Content",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "HtmlElements",
            "namespace": "",
            "file": "js\\content.js",
            "line": 5,
            "description": "This class is used to encompass other objects."
        },
        "ListItem": {
            "name": "ListItem",
            "shortname": "ListItem",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "HtmlElements",
            "namespace": "",
            "file": "js\\list.js",
            "line": 5,
            "description": "This class is used to represent a list item."
        },
        "List": {
            "name": "List",
            "shortname": "List",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "HtmlElements",
            "namespace": "",
            "file": "js\\list.js",
            "line": 73,
            "description": "This class is used to represent ordered and unordered lists."
        },
        "Row": {
            "name": "Row",
            "shortname": "Row",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "HtmlElements",
            "namespace": "",
            "file": "js\\row.js",
            "line": 5,
            "description": "Represents a table row"
        },
        "createRowFromHtml": {
            "name": "createRowFromHtml",
            "shortname": "createRowFromHtml",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "String",
            "namespace": "",
            "file": "js\\string.js",
            "line": 5,
            "description": "Transforms a row-html string into a Row object. It is supposed that the string to process is of the\nfollowing form: <tr ... > ... </tr>. Inside the tag, there might be elements \"td\" that will be\nprocessed one by one by function String::createCellFromHtml()."
        },
        "createTableFromHtml": {
            "name": "createTableFromHtml",
            "shortname": "createTableFromHtml",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "String",
            "namespace": "",
            "file": "js\\string.js",
            "line": 224,
            "description": "Creates an object representation from a string that is an html repersentation of a table.\nOnly one table is supposed to be processed at a time, so the string to be processed is to\nbe of the following form &lt;table ...&gt; ... &lt;/table&gt;. Inside the tag, there should be tags \"tr\"\nthat will be processed one by one by function String::createRowFromHtml()."
        },
        "isFramedTable": {
            "name": "isFramedTable",
            "shortname": "isFramedTable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "String",
            "namespace": "",
            "file": "js\\string.js",
            "line": 311,
            "description": "Returns true, if tableHtml is an html code corresponding to a table each row of which\ncontains just one cell, and this cell in its turn contains only one table.\nReturns false otherwise."
        },
        "Table": {
            "name": "Table",
            "shortname": "Table",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "HtmlElements",
            "namespace": "",
            "file": "js\\table.js",
            "line": 5,
            "description": "Represents table."
        },
        "Tag": {
            "name": "Tag",
            "shortname": "Tag",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "HtmlElements",
            "namespace": "",
            "file": "js\\tag.js",
            "line": 5,
            "description": "This class is used to represent a general html tag."
        }
    },
    "classitems": [
        {
            "file": "ckeditor\\plugins\\list2\\plugin.js",
            "line": 1,
            "description": "Basic sample plugin inserting abbreviation elements into CKEditor editing area.\n\nCreated out of the CKEditor Plugin SDK:\nhttp://docs.ckeditor.com/#!/guide/plugin_sdk_sample_1",
            "class": "Style"
        },
        {
            "file": "ckeditor\\plugins\\table2\\dialogs\\table2.js",
            "line": 10,
            "description": "Drops inline attribute named attrName from DOM element",
            "params": [
                {
                    "name": "element",
                    "description": "an inline attribute of  this element will be dropped. The element should respond to jQuery \"attr\" method.",
                    "type": "Object"
                },
                {
                    "name": "attrName",
                    "description": "this attribute name will be dropped.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Style"
        },
        {
            "file": "ckeditor\\plugins\\table2\\dialogs\\table2.js",
            "line": 55,
            "description": "Returns the width of the parent element available for its children.\n\navailable width = (element width) - (element left border width) - (element right border width) - (element left margin) - (element right margin)\n\nThe element width is supposed to be greater than zero and hence to have a unit of measurement (e.g. 'px').\nIf not set, widths of other attributes are equal to zero without unit of measurement. In this case one has to set the unit of measurement\nequal to the element width.",
            "return": {
                "description": "integer    available width for the children as Unit object (with properties \"value\" and \"measure\")"
            },
            "class": "Style"
        },
        {
            "file": "ckeditor\\plugins\\table2\\plugin.js",
            "line": 3,
            "description": "Finds the nearest ascendant of the \"elem\" for which \"filter\" returns true",
            "params": [
                {
                    "name": "elem",
                    "description": "",
                    "type": "CKEDITOR.dom.element"
                },
                {
                    "name": "filter",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "CKEDITOR.dom.element|null"
            },
            "class": "Style"
        },
        {
            "file": "ckeditor\\plugins\\table2\\plugin.js",
            "line": 22,
            "description": "Drops the table row. If after removing the table becomes empty, then removes it as well.",
            "class": "Style"
        },
        {
            "file": "ckeditor\\plugins\\table2\\plugin.js",
            "line": 43,
            "description": "Inserts a row at a specified position with respect to the selected element.\nThe command to insert the row is obtained by capitalizing the second argument\nand appending it to the string 'insert'. Example: if pos is 'after', the command\nto be executed is 'insertAfter'.",
            "params": [
                {
                    "name": "ed",
                    "description": "CKEDITOR.editor",
                    "type": "Object"
                },
                {
                    "name": "pos",
                    "description": "String \twhere to insert the element with respect to the current one.",
                    "type": "String"
                }
            ],
            "class": "Style"
        },
        {
            "file": "ckeditor\\plugins\\table2\\plugin.js",
            "line": 87,
            "description": "Inserts a column in the table. The localtion of the column to insert is given by the second\nargument that admits two values \"before\" and \"after\" and is inserted before or after the column\nof the selected cell, respectively.",
            "params": [
                {
                    "name": "ed",
                    "description": "CKEDITOR.editor",
                    "type": "Object"
                },
                {
                    "name": "pos",
                    "description": "\"before\" or \"after\": location of the column to insert w.r.t. the current cell",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Style"
        },
        {
            "file": "ckeditor\\build-config.js",
            "line": 2,
            "license": "Copyright (c) 2003-2013, CKSource - Frederico Knabben. All rights reserved.\nFor licensing, see LICENSE.html or http://ckeditor.com/license",
            "class": "Style"
        },
        {
            "file": "ckeditor\\build-config.js",
            "line": 7,
            "description": "This file was added automatically by CKEditor builder.\nYou may re-use it at any time at http://ckeditor.com/builder to build CKEditor again.\n\nNOTE: \n   This file is not used by CKEditor, you may remove it.\n   Changing this file will not change your CKEditor configuration.",
            "class": "Style"
        },
        {
            "file": "ckeditor\\config.js",
            "line": 1,
            "license": "Copyright (c) 2003-2013, CKSource - Frederico Knabben. All rights reserved.\nFor licensing, see LICENSE.html or http://ckeditor.com/license",
            "class": "Style"
        },
        {
            "file": "ckeditor\\styles.js",
            "line": 1,
            "description": "Copyright (c) 2003-2013, CKSource - Frederico Knabben. All rights reserved.\nFor licensing, see LICENSE.md or http://ckeditor.com/license",
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 3,
            "description": "Top level namespace for Jasmine, a lightweight JavaScript BDD/spec/testing framework.",
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 10,
            "access": "private",
            "tagname": "",
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 17,
            "description": "Use <code>jasmine.undefined</code> instead of <code>undefined</code>, since <code>undefined</code> is just\na plain old variable and may be redefined by somebody else.",
            "access": "private",
            "tagname": "",
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 25,
            "description": "Show diagnostic messages in the console if set to true",
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 31,
            "description": "Default interval in milliseconds for event loop yields (e.g. to allow network activity or to refresh the screen with the HTML-based runner). Small values here may result in slow test running. Zero means no updates until all tests have completed.",
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 37,
            "description": "Maximum levels of nesting that will be included when an object is pretty-printed",
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 42,
            "description": "Default timeout interval in milliseconds for waitsFor() blocks.",
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 47,
            "description": "By default exceptions thrown in the context of a test are caught by jasmine so that it can run the remaining tests in the suite.\nSet to false to let the exception bubble up in the browser.",
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 62,
            "description": "Allows for bound functions to be compared.  Internal use only.",
            "ignore": "",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "base",
                    "description": "bound 'this' for the function",
                    "type": "Object"
                },
                {
                    "name": "name",
                    "description": "function to find",
                    "type": "Function"
                }
            ],
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 126,
            "description": "Getter for the Jasmine environment. Ensures one gets created",
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 134,
            "ignore": "",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 144,
            "ignore": "",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 154,
            "ignore": "",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 164,
            "ignore": "",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "typeName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 175,
            "description": "Pretty printer for expecations.  Takes any object and turns it into a human-readable string.",
            "params": [
                {
                    "name": "value",
                    "description": "an object to be outputted",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 187,
            "description": "Returns true if the object is a DOM Node.",
            "params": [
                {
                    "name": "obj",
                    "description": "object to check",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 197,
            "description": "Returns a matchable 'generic' object of the class type.  For use in expecations of type when values don't matter.",
            "example": [
                "\n// don't care about which function is passed in, as long as it's a function\nexpect(mySpy).toHaveBeenCalledWith(jasmine.any(Function));"
            ],
            "params": [
                {
                    "name": "clazz",
                    "description": "",
                    "type": "Class"
                }
            ],
            "return": {
                "description": "matchable object of the type clazz"
            },
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 211,
            "description": "Returns a matchable subset of a JSON object. For use in expectations when you don't care about all of the\nattributes on the object.",
            "example": [
                "\n// don't care about any other attributes than foo.\nexpect(mySpy).toHaveBeenCalledWith(jasmine.objectContaining({foo: \"bar\"});"
            ],
            "params": [
                {
                    "name": "sample",
                    "description": "sample",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "matchable object for the sample"
            },
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 226,
            "description": "Jasmine Spies are test doubles that can act as stubs, spies, fakes or when used in an expecation, mocks.\n\nSpies should be created in test setup, before expectations.  They can then be checked, using the standard Jasmine\nexpectation syntax. Spies can be checked if they were called or not and what the calling params were.\n\nA Spy has the following fields: wasCalled, callCount, mostRecentCall, and argsForCall (see docs).\n\nSpies are torn down at the end of every spec.\n\nNote: Do <b>not</b> call new jasmine.Spy() directly - a spy must be created using spyOn, jasmine.createSpy or jasmine.createSpyObj.",
            "example": [
                "\n// a stub\nvar myStub = jasmine.createSpy('myStub');  // can be used anywhere\n\n// spy example\nvar foo = {\n  not: function(bool) { return !bool; }\n}\n\n// actual foo.not will not be called, execution stops\nspyOn(foo, 'not');\n\n// foo.not spied upon, execution will continue to implementation\nspyOn(foo, 'not').andCallThrough();\n\n// fake example\nvar foo = {\n  not: function(bool) { return !bool; }\n}\n\n// foo.not(val) will return val\nspyOn(foo, 'not').andCallFake(function(value) {return value;});\n\n// mock example\nfoo.not(7 == 7);\nexpect(foo.not).toHaveBeenCalled();\nexpect(foo.not).toHaveBeenCalledWith(true);"
            ],
            "is_constructor": 1,
            "see": [
                "spyOn",
                "jasmine.createSpy",
                "jasmine.createSpyObj"
            ],
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 271,
            "description": "The name of the spy, if provided.",
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 275,
            "description": "Is this Object a spy?",
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 279,
            "description": "The actual function this spy stubs.",
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 284,
            "description": "Tracking of the most recent call to the spy.",
            "example": [
                "\nvar mySpy = jasmine.createSpy('foo');\nmySpy(1, 2);\nmySpy.mostRecentCall.args = [1, 2];"
            ],
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 293,
            "description": "Holds arguments for each call to the spy, indexed by call count",
            "example": [
                "\nvar mySpy = jasmine.createSpy('foo');\nmySpy(1, 2);\nmySpy(7, 8);\nmySpy.mostRecentCall.args = [7, 8];\nmySpy.argsForCall[0] = [1, 2];\nmySpy.argsForCall[1] = [7, 8];"
            ],
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 307,
            "description": "Tells a spy to call through to the actual implemenatation.",
            "example": [
                "\nvar foo = {\n  bar: function() { // do some stuff }\n}\n\n// defining a spy on an existing property: foo.bar\nspyOn(foo, 'bar').andCallThrough();"
            ],
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 323,
            "description": "For setting the return value of a spy.",
            "example": [
                "\n// defining a spy from scratch: foo() returns 'baz'\nvar foo = jasmine.createSpy('spy on foo').andReturn('baz');\n\n// defining a spy on an existing property: foo.bar() returns 'baz'\nspyOn(foo, 'bar').andReturn('baz');"
            ],
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 342,
            "description": "For throwing an exception when a spy is called.",
            "example": [
                "\n// defining a spy from scratch: foo() throws an exception w/ message 'ouch'\nvar foo = jasmine.createSpy('spy on foo').andThrow('baz');\n\n// defining a spy on an existing property: foo.bar() throws an exception w/ message 'ouch'\nspyOn(foo, 'bar').andThrow('baz');"
            ],
            "params": [
                {
                    "name": "exceptionMsg",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 361,
            "description": "Calls an alternate implementation when a spy is called.",
            "example": [
                "\nvar baz = function() {\n  // do some stuff, return something\n}\n// defining a spy from scratch: foo() calls the function baz\nvar foo = jasmine.createSpy('spy on foo').andCall(baz);\n\n// defining a spy on an existing property: foo.bar() calls an anonymnous function\nspyOn(foo, 'bar').andCall(function() { return 'baz';} );"
            ],
            "params": [
                {
                    "name": "fakeFunc",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 381,
            "description": "Resets all of a spy's the tracking variables so that it can be used again.",
            "example": [
                "\nspyOn(foo, 'bar');\n\nfoo.bar();\n\nexpect(foo.bar.callCount).toEqual(1);\n\nfoo.bar.reset();\n\nexpect(foo.bar.callCount).toEqual(0);"
            ],
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 427,
            "description": "Determines whether an object is a spy.",
            "params": [
                {
                    "name": "putativeSpy",
                    "description": "",
                    "type": "jasmine.Spy|Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 437,
            "description": "Creates a more complicated spy: an Object that has every property a function that is a spy.  Used for stubbing something\nlarge in one call.",
            "params": [
                {
                    "name": "baseName",
                    "description": "name of spy class",
                    "type": "String"
                },
                {
                    "name": "methodNames",
                    "description": "array of names of methods to make spies",
                    "type": "Array"
                }
            ],
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 455,
            "description": "All parameters are pretty-printed and concatenated together, then written to the current spec's output.\n\nBe careful not to leave calls to <code>jasmine.log</code> in production code.",
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 465,
            "description": "Function that installs a spy on an existing object's method name.  Used within a Spec to create a spy.",
            "example": [
                "\n// spy example\nvar foo = {\n  not: function(bool) { return !bool; }\n}\nspyOn(foo, 'not'); // actual foo.not will not be called, execution stops"
            ],
            "see": [
                "jasmine.createSpy"
            ],
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "methodName",
                    "description": ""
                }
            ],
            "return": {
                "description": "a Jasmine spy that can be chained with all spy methods",
                "type": "jasmine.Spy"
            },
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 485,
            "description": "Creates a Jasmine spec that will be added to the current suite.\n\n// TODO: pending tests",
            "example": [
                "\nit('should be true', function() {\n  expect(true).toEqual(true);\n});"
            ],
            "params": [
                {
                    "name": "desc",
                    "description": "description of this specification",
                    "type": "String"
                },
                {
                    "name": "func",
                    "description": "defines the preconditions and expectations of the spec",
                    "type": "Function"
                }
            ],
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 503,
            "description": "Creates a <em>disabled</em> Jasmine spec.\n\nA convenience method that allows existing specs to be disabled temporarily during development.",
            "params": [
                {
                    "name": "desc",
                    "description": "description of this specification",
                    "type": "String"
                },
                {
                    "name": "func",
                    "description": "defines the preconditions and expectations of the spec",
                    "type": "Function"
                }
            ],
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 516,
            "description": "Starts a chain for a Jasmine expectation.\n\nIt is passed an Object that is the actual value and should chain to one of the many\njasmine.Matchers functions.",
            "params": [
                {
                    "name": "actual",
                    "description": "Actual value to test against and expected value",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "jasmine.Matchers"
            },
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 530,
            "description": "Defines part of a jasmine spec.  Used in cominbination with waits or waitsFor in asynchrnous specs.",
            "params": [
                {
                    "name": "func",
                    "description": "Function that defines part of a jasmine spec.",
                    "type": "Function"
                }
            ],
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 540,
            "description": "Waits a fixed time period before moving to the next block.",
            "deprecated": true,
            "deprecationMessage": "Use waitsFor() instead",
            "params": [
                {
                    "name": "timeout",
                    "description": "milliseconds to wait",
                    "type": "Number"
                }
            ],
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 551,
            "description": "Waits for the latchFunction to return true before proceeding to the next block.",
            "params": [
                {
                    "name": "latchFunction",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "optional_timeoutMessage",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "optional_timeout",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 563,
            "description": "A function that is called before each spec in a suite.\n\nUsed for spec setup, including validating assumptions.",
            "params": [
                {
                    "name": "beforeEachFunction",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 575,
            "description": "A function that is called after each spec in a suite.\n\nUsed for restoring any state that is hijacked during spec execution.",
            "params": [
                {
                    "name": "afterEachFunction",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 587,
            "description": "Defines a suite of specifications.\n\nStores the description and all defined specs in the Jasmine environment as one suite of specs. Variables declared\nare accessible by calls to beforeEach, it, and afterEach. Describe blocks can be nested, allowing for specialization\nof setup in some tests.",
            "example": [
                "\n// TODO: a simple suite\n\n// TODO: a simple suite with a nested describe block"
            ],
            "params": [
                {
                    "name": "description",
                    "description": "A string, usually the class under test.",
                    "type": "String"
                },
                {
                    "name": "specDefinitions",
                    "description": "function that defines several specs.",
                    "type": "Function"
                }
            ],
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 607,
            "description": "Disables a suite of specifications.  Used to disable some suites in a file, or files, temporarily during development.",
            "params": [
                {
                    "name": "description",
                    "description": "A string, usually the class under test.",
                    "type": "String"
                },
                {
                    "name": "specDefinitions",
                    "description": "function that defines several specs.",
                    "type": "Function"
                }
            ],
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 646,
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 651,
            "description": "Declare that a child class inherit it's prototype from the parent class.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "childClass",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "parentClass",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 659,
            "access": "private",
            "tagname": "",
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 713,
            "description": "Environment for Jasmine",
            "is_constructor": 1,
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 751,
            "return": {
                "description": "an object containing jasmine version build info, if set."
            },
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 762,
            "return": {
                "description": "string containing jasmine version build info, if set."
            },
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 779,
            "return": {
                "description": "a sequential integer starting at 0"
            },
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 786,
            "return": {
                "description": "a sequential integer starting at 0"
            },
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 793,
            "description": "Register a reporter to receive status updates from Jasmine.",
            "params": [
                {
                    "name": "reporter",
                    "description": "An object which will receive status updates.",
                    "type": "jasmine.Reporter"
                }
            ],
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 1013,
            "is_constructor": 1,
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 1044,
            "description": "Blocks are functions with executable code that make up a spec.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "env",
                    "description": "",
                    "type": "jasmine.Env"
                },
                {
                    "name": "func",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "spec",
                    "description": "",
                    "type": "jasmine.Spec"
                }
            ],
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 1071,
            "is_constructor": 1,
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 1173,
            "is_constructor": 1,
            "params": [
                {
                    "name": "env",
                    "description": "",
                    "type": "jasmine.Env"
                },
                {
                    "name": "actual",
                    "description": ""
                },
                {
                    "name": "spec",
                    "description": "",
                    "type": "jasmine.Spec"
                }
            ],
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 1250,
            "description": "toBe: compares the actual to the expected using ===",
            "params": [
                {
                    "name": "expected",
                    "description": ""
                }
            ],
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 1258,
            "description": "toNotBe: compares the actual to the expected using !==",
            "params": [
                {
                    "name": "expected",
                    "description": ""
                }
            ],
            "deprecated": true,
            "deprecationMessage": "as of 1.0. Use not.toBe() instead.",
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 1267,
            "description": "toEqual: compares the actual to the expected using common sense equality. Handles Objects, Arrays, etc.",
            "params": [
                {
                    "name": "expected",
                    "description": ""
                }
            ],
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 1276,
            "description": "toNotEqual: compares the actual to the expected using the ! of jasmine.Matchers.toEqual",
            "params": [
                {
                    "name": "expected",
                    "description": ""
                }
            ],
            "deprecated": true,
            "deprecationMessage": "as of 1.0. Use not.toEqual() instead.",
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 1285,
            "description": "Matcher that compares the actual to the expected using a regular expression.  Constructs a RegExp, so takes\na pattern or a String.",
            "params": [
                {
                    "name": "expected",
                    "description": ""
                }
            ],
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 1295,
            "description": "Matcher that compares the actual to the expected using the boolean inverse of jasmine.Matchers.toMatch",
            "params": [
                {
                    "name": "expected",
                    "description": ""
                }
            ],
            "deprecated": true,
            "deprecationMessage": "as of 1.0. Use not.toMatch() instead.",
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 1304,
            "description": "Matcher that compares the actual to jasmine.undefined.",
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 1311,
            "description": "Matcher that compares the actual to jasmine.undefined.",
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 1318,
            "description": "Matcher that compares the actual to null.",
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 1325,
            "description": "Matcher that compares the actual to NaN.",
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 1336,
            "description": "Matcher that boolean not-nots the actual.",
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 1344,
            "description": "Matcher that boolean nots the actual.",
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 1352,
            "description": "Matcher that checks to see if the actual, a Jasmine spy, was called.",
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 1374,
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 1377,
            "description": "Matcher that checks to see if the actual, a Jasmine spy, was not called.",
            "deprecated": true,
            "deprecationMessage": "Use expect(xxx).not.toHaveBeenCalled() instead",
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 1401,
            "description": "Matcher that checks to see if the actual, a Jasmine spy, was called with a set of parameters.",
            "example": [
                "\n"
            ],
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 1426,
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 1429,
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 1446,
            "description": "Matcher that checks that the expected item is an element in the actual Array.",
            "params": [
                {
                    "name": "expected",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 1455,
            "description": "Matcher that checks that the expected item is NOT an element in the actual Array.",
            "params": [
                {
                    "name": "expected",
                    "description": "",
                    "type": "Object"
                }
            ],
            "deprecated": true,
            "deprecationMessage": "as of 1.0. Use not.toContain() instead.",
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 1473,
            "description": "Matcher that checks that the expected item is equal to the actual item\nup to a given level of decimal precision (default 2).",
            "params": [
                {
                    "name": "expected",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "precision,",
                    "description": "as number of decimal places",
                    "type": "Number"
                }
            ],
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 1487,
            "description": "Matcher that checks that the expected exception was thrown by the actual.",
            "params": [
                {
                    "name": "expected",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 1664,
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 1760,
            "is_constructor": 1,
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 1795,
            "description": "Holds results for a set of Jasmine spec. Allows for the results array to hold another jasmine.NestedResults",
            "is_constructor": 1,
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 1801,
            "description": "The total count of results",
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 1805,
            "description": "Number of passed results",
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 1809,
            "description": "Number of failed results",
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 1813,
            "description": "Was this suite/spec skipped?",
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 1817,
            "ignore": "",
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 1823,
            "description": "Roll up the result counts.",
            "params": [
                {
                    "name": "result",
                    "description": ""
                }
            ],
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 1834,
            "description": "Adds a log message.",
            "params": [
                {
                    "name": "values",
                    "description": "Array of message parts which will be concatenated later."
                }
            ],
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 1842,
            "description": "Getter for the results: message & results.",
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 1849,
            "description": "Adds a result, tracking counts (total, passed, & failed)",
            "params": [
                {
                    "name": "result",
                    "description": "",
                    "type": "jasmine.ExpectationResult|jasmine.NestedResults"
                }
            ],
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 1869,
            "return": {
                "description": "True if <b>everything</b> below passed",
                "type": "Boolean"
            },
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 1875,
            "description": "Base class for pretty printing for expectation results.",
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 1882,
            "description": "Formats a value in a nice, human-readable string.",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 2123,
            "description": "Runner",
            "is_constructor": 1,
            "params": [
                {
                    "name": "env",
                    "description": "",
                    "type": "jasmine.Env"
                }
            ],
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 2200,
            "description": "Internal representation of a Jasmine specification, or test.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "env",
                    "description": "",
                    "type": "jasmine.Env"
                },
                {
                    "name": "suite",
                    "description": "",
                    "type": "jasmine.Suite"
                },
                {
                    "name": "description",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 2239,
            "description": "All parameters are pretty-printed and concatenated together, then written to the spec's output.\n\nBe careful not to leave calls to <code>jasmine.log</code> in production code.",
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 2262,
            "params": [
                {
                    "name": "result",
                    "description": "",
                    "type": "jasmine.ExpectationResult"
                }
            ],
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 2275,
            "description": "Waits a fixed time period before moving to the next block.",
            "deprecated": true,
            "deprecationMessage": "Use waitsFor() instead",
            "params": [
                {
                    "name": "timeout",
                    "description": "milliseconds to wait",
                    "type": "Number"
                }
            ],
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 2287,
            "description": "Waits for the latchFunction to return true before proceeding to the next block.",
            "params": [
                {
                    "name": "latchFunction",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "optional_timeoutMessage",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "optional_timeout",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 2443,
            "description": "Internal representation of a Jasmine suite.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "env",
                    "description": "",
                    "type": "jasmine.Env"
                },
                {
                    "name": "description",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "specDefinitions",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "parentSuite",
                    "description": "",
                    "type": "jasmine.Suite"
                }
            ],
            "class": "Style"
        },
        {
            "file": "jasmine\\lib\\jasmine-1.3.0\\jasmine.js",
            "line": 2540,
            "description": "A block which waits for some condition to become true, with timeout.",
            "is_constructor": 1,
            "extends": "jasmine.Block",
            "params": [
                {
                    "name": "env",
                    "description": "The Jasmine environment.",
                    "type": "jasmine.Env"
                },
                {
                    "name": "timeout",
                    "description": "The maximum time in milliseconds to wait for the condition to become true.",
                    "type": "Number"
                },
                {
                    "name": "latchFunction",
                    "description": "A function which returns true when the desired condition has been met.",
                    "type": "Function"
                },
                {
                    "name": "message",
                    "description": "The message to display if the desired condition hasn't been met within the given time period.",
                    "type": "String"
                },
                {
                    "name": "spec",
                    "description": "The Jasmine spec.",
                    "type": "jasmine.Spec"
                }
            ],
            "class": "Style"
        },
        {
            "file": "js\\attributesStyle.js",
            "line": 18,
            "description": "Fill in the properties with the values from the argument if any",
            "class": "Style",
            "module": "attributes"
        },
        {
            "file": "js\\attributesStyle.js",
            "line": 50,
            "description": "Appends object. If non-object is given, error is thrown.",
            "itemtype": "method",
            "name": "appendStyle",
            "params": [
                {
                    "name": "stl",
                    "description": "style to be appended",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Style",
            "module": "attributes"
        },
        {
            "file": "js\\attributesStyle.js",
            "line": 68,
            "description": "Generates string representation of this object (as inline styles)",
            "itemtype": "method",
            "name": "toString",
            "type": "String",
            "return": {
                "description": "html-like string for this object",
                "type": "String"
            },
            "example": [
                " The return value might be one of this form: style=\"width: 100px; color: red;\""
            ],
            "class": "Style",
            "module": "attributes"
        },
        {
            "file": "js\\attributesStyle.js",
            "line": 77,
            "description": "Imposes the width, min-width and max-width",
            "itemtype": "method",
            "name": "setWidth",
            "type": "Void",
            "params": [
                {
                    "name": "w",
                    "description": "value of width",
                    "type": "Mixed"
                }
            ],
            "class": "Style",
            "module": "attributes"
        },
        {
            "file": "js\\attributesStyle.js",
            "line": 87,
            "description": "returns object with keys 'width', 'color', 'style' describing the border.\nIf the Style object has 'border-style' equal to 'none', then in the\nreturn object, the key 'width' is set to 0.\nIf 'border-style' is not 'none' and 'border-width' is present, then in the\nreturn object, the key 'width' the 'border-width' value.\nOtherwise, the 'width' key is not present.",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Style",
            "module": "attributes"
        },
        {
            "file": "js\\attributesStyle.js",
            "line": 133,
            "description": "border width in px",
            "itemtype": "property",
            "name": "border-width",
            "type": "String|Number",
            "default": "1px",
            "class": "BorderStyle",
            "module": "attributes"
        },
        {
            "file": "js\\attributesStyle.js",
            "line": 140,
            "description": "border style. Possible values: none, solid, dotted etc.",
            "itemtype": "property",
            "name": "border-style",
            "type": "String",
            "default": "'solid'",
            "class": "BorderStyle",
            "module": "attributes"
        },
        {
            "file": "js\\attributesStyle.js",
            "line": 147,
            "description": "border color. In case one wants black color, one should use a color maximally close to the black (e.g. #000001)\notherwise some web browsers (e.g. GMail) will remove it and substitute it with its own one.",
            "itemtype": "property",
            "name": "border-color",
            "type": "String",
            "default": "#000001",
            "class": "BorderStyle",
            "module": "attributes"
        },
        {
            "file": "js\\attributesStyle.js",
            "line": 168,
            "description": "Fill in the properties with the values from the argument if any",
            "class": "Attributes",
            "module": "attributes"
        },
        {
            "file": "js\\attributesStyle.js",
            "line": 200,
            "description": "Generates string representation of this object (as html attributes)",
            "itemtype": "method",
            "name": "toString",
            "type": "String",
            "return": {
                "description": "html-like string for this object",
                "type": "String"
            },
            "example": [
                " The return value might be one of this form: <b>class=\"example\" id=\"tag\"</b>"
            ],
            "class": "Attributes",
            "module": "attributes"
        },
        {
            "file": "js\\attributesStyle.js",
            "line": 210,
            "description": "Appends object. If non-object is given, error is thrown. This is a copy-paste of Styles::appendStyle",
            "itemtype": "method",
            "name": "appendAttribute",
            "params": [
                {
                    "name": "stl",
                    "description": "style to be appended",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Attributes",
            "module": "attributes"
        },
        {
            "file": "js\\attributesStyle.js",
            "line": 238,
            "description": "Cellpadding attribute of the table. It is supposed that measurement unit is \"px\".",
            "itemtype": "property",
            "name": "cellpadding",
            "type": "Number",
            "default": "0",
            "class": "TableAttributes",
            "module": "attributes"
        },
        {
            "file": "js\\attributesStyle.js",
            "line": 244,
            "description": "Cellspacing attribute of the table. It is supposed that measurement unit is \"px\".",
            "itemtype": "property",
            "name": "cellspacing",
            "type": "Number",
            "default": "0",
            "class": "TableAttributes",
            "module": "attributes"
        },
        {
            "file": "js\\attributesStyle.js",
            "line": 264,
            "description": "Font size, including unit of measurement.",
            "itemtype": "property",
            "name": "font-size",
            "type": "String",
            "default": "\"12px\"",
            "class": "TextStyle",
            "module": "attributes"
        },
        {
            "file": "js\\attributesStyle.js",
            "line": 270,
            "description": "Font color",
            "itemtype": "property",
            "name": "color \tFont color",
            "type": "String",
            "default": "\"#000001\". NB: Gmail removes color tags corresponding to the black color, so use #000001 instead of #000000.",
            "class": "TextStyle",
            "module": "attributes"
        },
        {
            "file": "js\\attributesStyle.js",
            "line": 276,
            "description": "Font weight. Some possible values: \"normal\", \"bold\", \"bolder\", 100, 200, ..., 900. See html manuals for more info.",
            "itemtype": "property",
            "name": "font-weight",
            "type": "String|Integer",
            "default": "\"normal\"",
            "class": "TextStyle",
            "module": "attributes"
        },
        {
            "file": "js\\attributesStyle.js",
            "line": 282,
            "description": "Padding value along with unit of measurement",
            "itemtype": "property",
            "name": "padding",
            "type": "String",
            "default": "\"0px\"",
            "class": "TextStyle",
            "module": "attributes"
        },
        {
            "file": "js\\attributesStyle.js",
            "line": 288,
            "description": "Margin value along with unit of measurement",
            "itemtype": "property",
            "name": "margin",
            "type": "String",
            "default": "\"0px\"",
            "class": "TextStyle",
            "module": "attributes"
        },
        {
            "file": "js\\attributesStyle.js",
            "line": 308,
            "description": "Text decoration attribute",
            "itemtype": "property",
            "name": "text-decoration",
            "type": "String",
            "default": "\"underline\"",
            "class": "LinkStyle",
            "module": "attributes"
        },
        {
            "file": "js\\attributesStyle.js",
            "line": 315,
            "description": "Font size",
            "itemtype": "property",
            "name": "font size",
            "type": "String|Integer",
            "default": "12",
            "class": "LinkStyle",
            "module": "attributes"
        },
        {
            "file": "js\\attributesStyle.js",
            "line": 321,
            "description": "Font color attribute",
            "itemtype": "property",
            "name": "font color",
            "type": "String",
            "default": "\"blue\"",
            "class": "LinkStyle",
            "module": "attributes"
        },
        {
            "file": "js\\attributesStyle.js",
            "line": 327,
            "description": "Font wieght attribute. See html manuals for possible values.",
            "itemtype": "property",
            "name": "font weight",
            "type": "String|Integer",
            "default": "\"normal\"",
            "class": "LinkStyle",
            "module": "attributes"
        },
        {
            "file": "js\\attributesStyle.js",
            "line": 333,
            "description": "Padding.",
            "itemtype": "property",
            "name": "padding",
            "type": "String|Number",
            "default": "0",
            "class": "LinkStyle",
            "module": "attributes"
        },
        {
            "file": "js\\attributesStyle.js",
            "line": 339,
            "description": "Margin.",
            "itemtype": "property",
            "name": "margin",
            "type": "String|Number",
            "default": "0",
            "class": "LinkStyle",
            "module": "attributes"
        },
        {
            "file": "js\\attributesStyle.js",
            "line": 359,
            "description": "Color of the border table",
            "itemtype": "property",
            "name": "border-color",
            "type": "String",
            "default": "\"#FFFFFF\"",
            "class": "TableStyle",
            "module": "attributes"
        },
        {
            "file": "js\\attributesStyle.js",
            "line": 365,
            "description": "Style of the border table. See html manuals for possible values.",
            "itemtype": "property",
            "name": "border-style",
            "type": "String",
            "default": "\"none\"",
            "class": "TableStyle",
            "module": "attributes"
        },
        {
            "file": "js\\attributesStyle.js",
            "line": 371,
            "description": "Width of the border table.",
            "itemtype": "property",
            "name": "border-width",
            "type": "String|Number",
            "default": "0",
            "class": "TableStyle",
            "module": "attributes"
        },
        {
            "file": "js\\attributesStyle.js",
            "line": 377,
            "description": "Margin of the table.",
            "itemtype": "property",
            "name": "margin",
            "type": "String|Number",
            "default": "0",
            "class": "TableStyle",
            "module": "attributes"
        },
        {
            "file": "js\\attributesStyle.js",
            "line": 383,
            "description": "Padding of the table.",
            "itemtype": "property",
            "name": "padding",
            "type": "String|Number",
            "default": "0",
            "class": "TableStyle",
            "module": "attributes"
        },
        {
            "file": "js\\attributesStyle.js",
            "line": 389,
            "description": "Table width.",
            "itemtype": "property",
            "name": "width",
            "type": "String|Number",
            "default": "0",
            "class": "TableStyle",
            "module": "attributes"
        },
        {
            "file": "js\\attributesStyle.js",
            "line": 395,
            "description": "Table maximal width. It is supposed to be equal to \"width\" property.",
            "itemtype": "property",
            "name": "max-width",
            "type": "String|Number",
            "default": "0",
            "class": "TableStyle",
            "module": "attributes"
        },
        {
            "file": "js\\attributesStyle.js",
            "line": 401,
            "description": "Table minimal width. It is supposed to be equal to \"width\" property.",
            "itemtype": "property",
            "name": "min-width",
            "type": "String|Number",
            "default": "0",
            "class": "TableStyle",
            "module": "attributes"
        },
        {
            "file": "js\\attributesStyle.js",
            "line": 408,
            "description": "Whether to collapse the table borders or not.",
            "deprecated": true,
            "deprecationMessage": "Do not use, because it causes problems in MS Outlook.",
            "itemtype": "property",
            "name": "border-collapse",
            "type": "String",
            "default": "0",
            "class": "TableStyle",
            "module": "attributes"
        },
        {
            "file": "js\\attributesStyle.js",
            "line": 415,
            "description": "Border spacing.",
            "itemtype": "property",
            "name": "border-spacing",
            "type": "String",
            "default": "'0px 0px'",
            "class": "TableStyle",
            "module": "attributes"
        },
        {
            "file": "js\\attributesStyle.js",
            "line": 435,
            "description": "Color of the border table",
            "itemtype": "property",
            "name": "border-color",
            "type": "String",
            "default": "\"#FFFFFF\"",
            "class": "TableRowStyle",
            "module": "attributes"
        },
        {
            "file": "js\\attributesStyle.js",
            "line": 441,
            "description": "Style of the border table. See html manuals for possible values.",
            "itemtype": "property",
            "name": "border-style",
            "type": "String",
            "default": "\"none\"",
            "class": "TableRowStyle",
            "module": "attributes"
        },
        {
            "file": "js\\attributesStyle.js",
            "line": 447,
            "description": "Width of the border table.",
            "itemtype": "property",
            "name": "border-width",
            "type": "String|Number",
            "default": "0",
            "class": "TableRowStyle",
            "module": "attributes"
        },
        {
            "file": "js\\attributesStyle.js",
            "line": 453,
            "description": "Margin of the table.",
            "itemtype": "property",
            "name": "margin",
            "type": "String|Number",
            "default": "0",
            "class": "TableRowStyle",
            "module": "attributes"
        },
        {
            "file": "js\\attributesStyle.js",
            "line": 459,
            "description": "Padding of the table.",
            "itemtype": "property",
            "name": "padding",
            "type": "String|Number",
            "default": "0",
            "class": "TableRowStyle",
            "module": "attributes"
        },
        {
            "file": "js\\attributesStyle.js",
            "line": 465,
            "description": "Table width.",
            "itemtype": "property",
            "name": "width",
            "type": "String|Number",
            "default": "0",
            "class": "TableRowStyle",
            "module": "attributes"
        },
        {
            "file": "js\\attributesStyle.js",
            "line": 471,
            "description": "Table maximal width. It is supposed to be equal to \"width\" property.",
            "itemtype": "property",
            "name": "max-width",
            "type": "String|Number",
            "default": "0",
            "class": "TableRowStyle",
            "module": "attributes"
        },
        {
            "file": "js\\attributesStyle.js",
            "line": 477,
            "description": "Table minimal width. It is supposed to be equal to \"width\" property.",
            "itemtype": "property",
            "name": "min-width",
            "type": "String|Number",
            "default": "0",
            "class": "TableRowStyle",
            "module": "attributes"
        },
        {
            "file": "js\\attributesStyle.js",
            "line": 497,
            "description": "Color of the border table",
            "itemtype": "property",
            "name": "border-color",
            "type": "String",
            "default": "\"#FFFFFF\"",
            "class": "TableCellStyle",
            "module": "attributes"
        },
        {
            "file": "js\\attributesStyle.js",
            "line": 503,
            "description": "Style of the border table. See html manuals for possible values.",
            "itemtype": "property",
            "name": "border-style",
            "type": "String",
            "default": "\"none\"",
            "class": "TableCellStyle",
            "module": "attributes"
        },
        {
            "file": "js\\attributesStyle.js",
            "line": 509,
            "description": "Width of the border table.",
            "itemtype": "property",
            "name": "border-width",
            "type": "String|Number",
            "default": "\"0px\"",
            "class": "TableCellStyle",
            "module": "attributes"
        },
        {
            "file": "js\\attributesStyle.js",
            "line": 515,
            "description": "Padding.",
            "itemtype": "property",
            "name": "padding",
            "type": "String|Number",
            "default": "0",
            "class": "TableCellStyle",
            "module": "attributes"
        },
        {
            "file": "js\\attributesStyle.js",
            "line": 521,
            "description": "Margin.",
            "itemtype": "property",
            "name": "margin",
            "type": "String|Number",
            "default": "0",
            "class": "TableCellStyle",
            "module": "attributes"
        },
        {
            "file": "js\\attributesStyle.js",
            "line": 527,
            "description": "Table width.",
            "itemtype": "property",
            "name": "width",
            "type": "String|Number",
            "default": "0",
            "class": "TableCellStyle",
            "module": "attributes"
        },
        {
            "file": "js\\attributesStyle.js",
            "line": 533,
            "description": "Table minimal width. It is supposed to be equal to \"width\" property.",
            "itemtype": "property",
            "name": "max-width",
            "type": "String|Number",
            "default": "0",
            "class": "TableCellStyle",
            "module": "attributes"
        },
        {
            "file": "js\\attributesStyle.js",
            "line": 539,
            "description": "Table minimal width. It is supposed to be equal to \"width\" property.",
            "itemtype": "property",
            "name": "min-width",
            "type": "String|Number",
            "default": "0",
            "class": "TableCellStyle",
            "module": "attributes"
        },
        {
            "file": "js\\attributesStyle.js",
            "line": 545,
            "description": "Vertical align of the cell content.",
            "itemtype": "property",
            "name": "vertical-align",
            "type": "String",
            "default": "0",
            "class": "TableCellStyle",
            "module": "attributes"
        },
        {
            "file": "js\\attributesStyle.js",
            "line": 551,
            "description": "Font color",
            "itemtype": "property",
            "name": "color",
            "type": "String",
            "default": "\"#000001\". NB: Gmail removes color tags corresponding to the black color, so use #000001 instead of #000000.",
            "class": "TableCellStyle",
            "module": "attributes"
        },
        {
            "file": "js\\attributesStyle.js",
            "line": 571,
            "description": "Width of the border around the image.",
            "itemtype": "property",
            "name": "border-width",
            "type": "String|Number",
            "default": "0",
            "class": "ImageStyle",
            "module": "attributes"
        },
        {
            "file": "js\\attributesStyle.js",
            "line": 577,
            "description": "Style of the border around the image. See html manuals for possible values.",
            "itemtype": "property",
            "name": "border-style",
            "type": "String",
            "default": "\"none\"",
            "class": "ImageStyle",
            "module": "attributes"
        },
        {
            "file": "js\\attributesStyle.js",
            "line": 583,
            "description": "Color of the border around the image.",
            "itemtype": "property",
            "name": "border-color",
            "type": "String",
            "default": "\"#FFFFFF\"",
            "class": "ImageStyle",
            "module": "attributes"
        },
        {
            "file": "js\\attributesStyle.js",
            "line": 589,
            "description": "Padding.",
            "itemtype": "property",
            "name": "padding",
            "type": "String|Number",
            "default": "0",
            "class": "ImageStyle",
            "module": "attributes"
        },
        {
            "file": "js\\attributesStyle.js",
            "line": 595,
            "description": "Margin.",
            "itemtype": "property",
            "name": "margin",
            "type": "String|Number",
            "default": "0",
            "class": "ImageStyle",
            "module": "attributes"
        },
        {
            "file": "js\\attributesStyle.js",
            "line": 601,
            "description": "Image width.",
            "itemtype": "property",
            "name": "width",
            "type": "String|Number",
            "default": "0",
            "class": "ImageStyle",
            "module": "attributes"
        },
        {
            "file": "js\\attributesStyle.js",
            "line": 607,
            "description": "Image height.",
            "itemtype": "property",
            "name": "height",
            "type": "String|Number",
            "default": "0",
            "class": "ImageStyle",
            "module": "attributes"
        },
        {
            "file": "js\\attributesStyle.js",
            "line": 627,
            "description": "Padding.",
            "itemtype": "property",
            "name": "padding",
            "type": "String|Number",
            "default": "0",
            "class": "ListStyle",
            "module": "attributes"
        },
        {
            "file": "js\\attributesStyle.js",
            "line": 633,
            "description": "Margin.",
            "itemtype": "property",
            "name": "margin",
            "type": "String|Number",
            "default": "0",
            "class": "ListStyle",
            "module": "attributes"
        },
        {
            "file": "js\\attributesStyle.js",
            "line": 653,
            "description": "Font size of the  text in the list.",
            "itemtype": "property",
            "name": "font-size",
            "type": "String|Number",
            "default": "12",
            "class": "ListItemStyle",
            "module": "attributes"
        },
        {
            "file": "js\\attributesStyle.js",
            "line": 659,
            "description": "Text color of the list item content.",
            "itemtype": "property",
            "name": "color",
            "type": "{String}",
            "default": "\"#000001\". NB: Gmail removes color tags corresponding to the black color, so use #000001 instead of #000000.",
            "class": "ListItemStyle",
            "module": "attributes"
        },
        {
            "file": "js\\attributesStyle.js",
            "line": 667,
            "description": "Font weight. Some possible values: \"normal\", \"bold\", \"bolder\", 100, 200, ..., 900. See html manuals for more info.",
            "itemtype": "property",
            "name": "font-weight",
            "type": "String|Integer",
            "default": "\"normal\"",
            "class": "ListItemStyle",
            "module": "attributes"
        },
        {
            "file": "js\\attributesStyle.js",
            "line": 673,
            "description": "Padding.",
            "itemtype": "property",
            "name": "padding",
            "type": "String|Number",
            "default": "0",
            "class": "ListItemStyle",
            "module": "attributes"
        },
        {
            "file": "js\\attributesStyle.js",
            "line": 679,
            "description": "Margin.",
            "itemtype": "property",
            "name": "margin",
            "type": "String|Number",
            "default": "0",
            "class": "ListItemStyle",
            "module": "attributes"
        },
        {
            "file": "js\\cell.js",
            "line": 16,
            "description": "Type of the object. Set to value \"Cell\" for the objects of this type.",
            "itemtype": "method",
            "name": "getType",
            "type": "String",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Cell",
            "module": "HtmlElements"
        },
        {
            "file": "js\\cell.js",
            "line": 25,
            "description": "Html tag corresponding to Cell instances.",
            "itemtype": "property",
            "name": "name",
            "type": "{String}",
            "default": "table",
            "class": "Cell",
            "module": "HtmlElements"
        },
        {
            "file": "js\\cell.js",
            "line": 33,
            "description": "Overrides the inherited methods in order to pass the argument to the constructor of Content class.",
            "itemtype": "property",
            "name": "content",
            "type": "{Content}",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Cell",
            "module": "HtmlElements",
            "subprops": [
                {
                    "name": "arg",
                    "description": "",
                    "type": "Any"
                }
            ]
        },
        {
            "file": "js\\cell.js",
            "line": 42,
            "description": "Styles of the cell",
            "itemtype": "property",
            "name": "style",
            "type": "{TableCellStyle}",
            "default": "TableCellStyle",
            "class": "Cell",
            "module": "HtmlElements"
        },
        {
            "file": "js\\cell.js",
            "line": 50,
            "description": "Gets the width of the cell as it is present in the style property. It tends to return a number:\nif it is measured in \"px\", then the measurment unit is removed and the number is returned.",
            "itemtype": "method",
            "name": "getWidth",
            "return": {
                "description": "",
                "type": "Number|String"
            },
            "class": "Cell",
            "module": "HtmlElements"
        },
        {
            "file": "js\\content.js",
            "line": 16,
            "description": "Container of items. If an item has a method \"toHtml\", it will be applied when transforming the whole Content object into a string.",
            "itemtype": "property",
            "name": "elements",
            "type": "Array",
            "default": "[str]",
            "class": "Content",
            "module": "HtmlElements"
        },
        {
            "file": "js\\content.js",
            "line": 23,
            "description": "The number of items in the \"elements\" property",
            "itemtype": "method",
            "name": "length",
            "return": {
                "description": "",
                "type": "Integer"
            },
            "class": "Content",
            "module": "HtmlElements"
        },
        {
            "file": "js\\content.js",
            "line": 32,
            "description": "Gets the element with index \"pos\". If it does not exist, null is returned.",
            "itemtype": "method",
            "name": "getElem",
            "params": [
                {
                    "name": "pos",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Mixed"
            },
            "class": "Content",
            "module": "HtmlElements"
        },
        {
            "file": "js\\content.js",
            "line": 42,
            "description": "Gets the first element. Delegates to Content::getElem(0)",
            "itemtype": "method",
            "name": "getFirst",
            "return": {
                "description": "",
                "type": "Mixed"
            },
            "class": "Content",
            "module": "HtmlElements"
        },
        {
            "file": "js\\content.js",
            "line": 51,
            "description": "Gets the last element. Delegates to Content::getElem()",
            "itemtype": "method",
            "name": "getLast",
            "return": {
                "description": "",
                "type": "Mixed"
            },
            "class": "Content",
            "module": "HtmlElements"
        },
        {
            "file": "js\\content.js",
            "line": 62,
            "description": "Appends the element to the array Content::elements.",
            "params": [
                {
                    "name": "elem",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Content",
            "module": "HtmlElements"
        },
        {
            "file": "js\\content.js",
            "line": 71,
            "description": "Inserts element at position pos inside the array of elements. If the lenght of array \"elements\"\nis equal to N, than the allowed position index is inside the range [0, 1, ..., N]. If the given\nposition index is outside that range, an error is thrown. If the position index is equal to N\n(that corresponds to appending the element), then Content::appendElem is called.",
            "itemtype": "method",
            "name": "insertElemAt",
            "params": [
                {
                    "name": "pos",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "elem",
                    "description": "",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Content",
            "module": "HtmlElements"
        },
        {
            "file": "js\\content.js",
            "line": 95,
            "description": "Appends element to the array of Content::elements.",
            "itemtype": "method",
            "name": "appendElem",
            "params": [
                {
                    "name": "elem",
                    "description": "",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Content",
            "module": "HtmlElements"
        },
        {
            "file": "js\\content.js",
            "line": 106,
            "description": "Drops the element at the given position and returns it. If element at the position does not exist,\nan error is thrown.",
            "itemtype": "method",
            "name": "dropElemAt",
            "params": [
                {
                    "name": "pos",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Mixed"
            },
            "class": "Content",
            "module": "HtmlElements"
        },
        {
            "file": "js\\content.js",
            "line": 122,
            "description": "Transforms the object into html form.  If item of the \"elements\" property is of Object type, then it should have \"toHtml\" method which is to be applied to the item.",
            "itemtype": "method",
            "name": "toHtml",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Content",
            "module": "HtmlElements"
        },
        {
            "file": "js\\helpers.js",
            "line": 22,
            "description": "Converts the first letter of the string into the upper case\nIf the string is empty, the output is empty string as well.",
            "params": [
                {
                    "name": "str",
                    "description": "String"
                }
            ],
            "return": {
                "description": "String"
            },
            "class": "ListItem",
            "module": "HtmlElements"
        },
        {
            "file": "js\\helpers.js",
            "line": 32,
            "description": "Converts the first letter of the string into the upper case\nIf the string is empty, the output is empty string as well.",
            "params": [
                {
                    "name": "str",
                    "description": "String"
                }
            ],
            "return": {
                "description": "String"
            },
            "class": "ListItem",
            "module": "HtmlElements"
        },
        {
            "file": "js\\helpers.js",
            "line": 292,
            "description": "Replaces special characters present in the input string by their unicodes. It is supposed to replace symbols like à, ò, è, é\nand not a, b, c etc. For the moment it replaces any characters which unicode is outside the range [32, 125].",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "ListItem",
            "module": "helpers"
        },
        {
            "file": "js\\helpers.js",
            "line": 315,
            "description": "Splits array element at position \"pos\" in two parts in such a way that the trace of the original array\nis equal to the trace of the output array. If it is the first element of the array to be splitted, then\nit is splitted in 1/2 and 1/2 (up to the truncation). If the element has a left neighbour, then the neighbour\nand the element are taken off 1/3 and these two parts are given to the newly created element that is inserted\nbetween the neighbour and the element: [a, b, ...] -> [2/3 a, 1/3 (a + b), 2/3 b, ...]",
            "params": [
                {
                    "name": "arr",
                    "description": "array of integers",
                    "type": "Array"
                },
                {
                    "name": "pos",
                    "description": "index of the element, before which an element will be inserted",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "array of integers",
                "type": "Array"
            },
            "class": "ListItem",
            "module": "helpers"
        },
        {
            "file": "js\\helpers.js",
            "line": 412,
            "description": "Flatten the object. This function was written because Node::attributes returns attributes in format.\nExample {'1': {name: \"width\", value:\"100\", ...}, '2': {name: \"color\", value:\"black\", ...}, ...}\nreturns {\"width\":\"100\", \"color\":\"black\", ...}",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "ListItem",
            "module": "attributes"
        },
        {
            "file": "js\\helpers.js",
            "line": 431,
            "description": "Sandwiches the midlle string with the left and the right ones. If the middle one is empty, empty string is returned.\nIf the right arguments is not given, the left one is used.",
            "params": [
                {
                    "name": "left",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "middle",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "right",
                    "description": "",
                    "type": "String"
                }
            ],
            "type": "String|Null",
            "return": {
                "description": "",
                "type": "String|Null"
            },
            "class": "ListItem",
            "module": "attributes"
        },
        {
            "file": "js\\helpers.js",
            "line": 452,
            "description": "Glues all elements of the array, replace trailing spaces and repaces multiple spaces with a single one.",
            "params": [
                {
                    "name": "arr",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "glue",
                    "description": "glue string",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "ListItem",
            "module": "attributes"
        },
        {
            "file": "js\\helpers.js",
            "line": 469,
            "description": "Merge two objects. If non-object is given, an error is thrown.",
            "params": [
                {
                    "name": "obj1",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "obj2",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "ListItem",
            "module": "attributes"
        },
        {
            "file": "js\\jquery-1.10.2.js",
            "line": 1292,
            "description": "Create key-value caches of limited size",
            "return": {
                "description": "Returns the Object data after storing it on itself with\n\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n\tdeleting the oldest entry",
                "type": "Function(string, Object)"
            },
            "class": "ListItem",
            "module": "attributes"
        },
        {
            "file": "js\\jquery-1.10.2.js",
            "line": 1312,
            "description": "Mark a function for special use by Sizzle",
            "params": [
                {
                    "name": "fn",
                    "description": "The function to mark",
                    "type": "Function"
                }
            ],
            "class": "ListItem",
            "module": "attributes"
        },
        {
            "file": "js\\jquery-1.10.2.js",
            "line": 1321,
            "description": "Support testing using an element",
            "params": [
                {
                    "name": "fn",
                    "description": "Passed the created div and expects a boolean result",
                    "type": "Function"
                }
            ],
            "class": "ListItem",
            "module": "attributes"
        },
        {
            "file": "js\\jquery-1.10.2.js",
            "line": 1342,
            "description": "Adds the same handler for all of the specified attrs",
            "params": [
                {
                    "name": "attrs",
                    "description": "Pipe-separated list of attributes",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "The method that will be applied",
                    "type": "Function"
                }
            ],
            "class": "ListItem",
            "module": "attributes"
        },
        {
            "file": "js\\jquery-1.10.2.js",
            "line": 1356,
            "description": "Checks document order of two siblings",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Element"
                },
                {
                    "name": "b",
                    "description": "",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "Returns less than 0 if a precedes b, greater than 0 if a follows b",
                "type": "Number"
            },
            "class": "ListItem",
            "module": "attributes"
        },
        {
            "file": "js\\jquery-1.10.2.js",
            "line": 1385,
            "description": "Returns a function to use in pseudos for input types",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "ListItem",
            "module": "attributes"
        },
        {
            "file": "js\\jquery-1.10.2.js",
            "line": 1396,
            "description": "Returns a function to use in pseudos for buttons",
            "params": [
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "ListItem",
            "module": "attributes"
        },
        {
            "file": "js\\jquery-1.10.2.js",
            "line": 1407,
            "description": "Returns a function to use in pseudos for positionals",
            "params": [
                {
                    "name": "fn",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "ListItem",
            "module": "attributes"
        },
        {
            "file": "js\\jquery-1.10.2.js",
            "line": 1429,
            "description": "Detect xml",
            "params": [
                {
                    "name": "elem",
                    "description": "An element or a document",
                    "type": "Element|Object"
                }
            ],
            "class": "ListItem",
            "module": "attributes"
        },
        {
            "file": "js\\jquery-1.10.2.js",
            "line": 1443,
            "description": "Sets document-related variables once based on the current document",
            "params": [
                {
                    "name": "doc",
                    "description": "An element or document object to use to set the document",
                    "type": "Element|Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns the current document",
                "type": "Object"
            },
            "class": "ListItem",
            "module": "attributes"
        },
        {
            "file": "js\\jquery-1.10.2.js",
            "line": 1853,
            "description": "Document sorting and removing duplicates",
            "params": [
                {
                    "name": "results",
                    "description": "",
                    "type": "ArrayLike"
                }
            ],
            "class": "ListItem",
            "module": "attributes"
        },
        {
            "file": "js\\jquery-1.10.2.js",
            "line": 1882,
            "description": "Utility function for retrieving the text value of an array of DOM nodes",
            "params": [
                {
                    "name": "elem",
                    "description": "",
                    "type": "Array|Element"
                }
            ],
            "class": "ListItem",
            "module": "attributes"
        },
        {
            "file": "js\\list.js",
            "line": 16,
            "description": "List item attributes",
            "itemtype": "property",
            "name": "attr",
            "type": "{Attributes}",
            "default": "Attributes()",
            "class": "ListItem",
            "module": "HtmlElements"
        },
        {
            "file": "js\\list.js",
            "line": 24,
            "description": "List item styles",
            "itemtype": "property",
            "name": "style",
            "type": "{ListItemStyle}",
            "default": "ListItemStyle()",
            "class": "ListItem",
            "module": "HtmlElements"
        },
        {
            "file": "js\\list.js",
            "line": 32,
            "description": "Content of the list item.",
            "itemtype": "property",
            "name": "content",
            "type": "{Content}",
            "default": "Content()",
            "class": "ListItem",
            "module": "HtmlElements"
        },
        {
            "file": "js\\list.js",
            "line": 40,
            "description": "Appends the element to the content of the list item.",
            "itemtype": "method",
            "name": "appendElem",
            "params": [
                {
                    "name": "elem",
                    "description": "",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "ListItem",
            "module": "HtmlElements"
        },
        {
            "file": "js\\list.js",
            "line": 50,
            "description": "Returns the number of elements inside its content. Delegates to Content::length().",
            "itemtype": "method",
            "name": "length",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "ListItem",
            "module": "HtmlElements"
        },
        {
            "file": "js\\list.js",
            "line": 59,
            "description": "Gives html representation of the instance.",
            "itemtype": "method",
            "name": "toHtml",
            "return": {
                "description": "html representation of an instance of this class.",
                "type": "String"
            },
            "class": "ListItem",
            "module": "HtmlElements"
        },
        {
            "file": "js\\list.js",
            "line": 83,
            "description": "Type of the list: 'ul' for unordered  and 'ol' for ordered one.",
            "itemtype": "property",
            "name": "type",
            "type": "String",
            "default": "'ul'",
            "class": "List",
            "module": "HtmlElements"
        },
        {
            "file": "js\\list.js",
            "line": 90,
            "description": "Retrieves type of the list.",
            "itemtype": "method",
            "name": "getType",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "List",
            "module": "HtmlElements"
        },
        {
            "file": "js\\list.js",
            "line": 99,
            "description": "Attributes corresponding to the list as a whole object.",
            "itemtype": "property",
            "name": "attr",
            "type": "Attribute",
            "class": "List",
            "module": "HtmlElements"
        },
        {
            "file": "js\\list.js",
            "line": 106,
            "description": "Styles corresponding to the list as a whole object.",
            "itemtype": "property",
            "name": "style",
            "type": "ListStyle",
            "class": "List",
            "module": "HtmlElements"
        },
        {
            "file": "js\\list.js",
            "line": 112,
            "description": "Items of the list.",
            "itemtype": "property",
            "name": "items",
            "type": "Array",
            "default": "[]",
            "class": "List",
            "module": "HtmlElements"
        },
        {
            "file": "js\\list.js",
            "line": 119,
            "description": "Gets the number of the list items",
            "itemtype": "method",
            "name": "itemNum",
            "return": {
                "description": "an integer number",
                "type": "Number"
            },
            "class": "List",
            "module": "HtmlElements"
        },
        {
            "file": "js\\list.js",
            "line": 128,
            "description": "Appends an object to the list items. The object must be a ListItem instance.\nIf not, an error is thrown.",
            "itemtype": "method",
            "name": "appendItem",
            "params": [
                {
                    "name": "item",
                    "description": "an instance of ListItem",
                    "type": "ListItem"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "List",
            "module": "HtmlElements"
        },
        {
            "file": "js\\list.js",
            "line": 142,
            "description": "Inserts the item at the given position. If the list contains N items, then allowed index for the\nitem to be inserted at is the range [0, N]. Zero index corresponds to insertion at the beginning of the list,\nN - to the end of the list, that is to appending (delegates to List::appendItem). If the index is out\nof this range, an error is thrown. If the item to be inserted is not an instance of ListItem,\nan error is thrown.",
            "itemtype": "method",
            "name": "isertItemAt",
            "params": [
                {
                    "name": "pos",
                    "description": "index of the position of there to insert the item",
                    "type": "Number"
                },
                {
                    "name": "item",
                    "description": "item to insert",
                    "type": "ListItem"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "List",
            "module": "HtmlElements"
        },
        {
            "file": "js\\list.js",
            "line": 170,
            "description": "Gives an html representation of the list. If the list has no items, empty string is returned.",
            "itemtype": "method",
            "name": "toHtml",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "List",
            "module": "HtmlElements"
        },
        {
            "file": "js\\row.js",
            "line": 16,
            "description": "Type of the object. Return \"Row\" for the objects of this type.",
            "itemtype": "method",
            "name": "getType",
            "type": "String",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Row",
            "module": "HtmlElements"
        },
        {
            "file": "js\\row.js",
            "line": 25,
            "description": "Html tag corresponding to Row instances.",
            "itemtype": "property",
            "name": "name",
            "type": "{String}",
            "default": "td",
            "class": "Row",
            "module": "HtmlElements"
        },
        {
            "file": "js\\row.js",
            "line": 33,
            "description": "Styles of the row.",
            "itemtype": "property",
            "name": "style",
            "type": "{TableCellStyle}",
            "default": "TableRowStyle",
            "class": "Row",
            "module": "HtmlElements"
        },
        {
            "file": "js\\row.js",
            "line": 41,
            "description": "Gets an array of the widths of the cells inside the row.",
            "itemtype": "method",
            "name": "getCellWidths",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Row",
            "module": "HtmlElements"
        },
        {
            "file": "js\\row.js",
            "line": 56,
            "description": "Returns the number of cells in the row. Delegates to the length() method of the \"content\" property.",
            "itemtype": "method",
            "name": "cellNum",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Row",
            "module": "HtmlElements"
        },
        {
            "file": "js\\row.js",
            "line": 65,
            "description": "Sets widths of the cells inside the row.",
            "itemtype": "method",
            "name": "setCellWidths",
            "params": [
                {
                    "name": "profile",
                    "description": "each elements if this array is a width of the corresp. cell in the row.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Row",
            "module": "HtmlElements"
        },
        {
            "file": "js\\row.js",
            "line": 81,
            "description": "Inserts a cell \"cell\" into position \"pos\" of the row.\nAfter insertion, the row length increases by 1. Therefore, \"pos\"\nis the index with which the cell is referenced in the row after insertion.",
            "itemtype": "method",
            "name": "insertCellAt",
            "params": [
                {
                    "name": "cell",
                    "description": "",
                    "type": "Cell"
                },
                {
                    "name": "pos",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Row",
            "module": "HtmlElements"
        },
        {
            "file": "js\\row.js",
            "line": 102,
            "description": "Append a cell to the row cells. If one tries to append a non-Cell object, an exception is thrown.",
            "itemtype": "method",
            "name": "appendCell",
            "params": [
                {
                    "name": "cell",
                    "description": "a cell to be appended.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Row",
            "module": "HtmlElements"
        },
        {
            "file": "js\\row.js",
            "line": 118,
            "description": "Drops the cell in the row. If the cell is utmost left, the freed space is then\nassigned to its right neighbour:\n|xxx| a | b   | c | -> |     a | b   | c |\n| a |xxx| b   | c | -> | a |     b   | c |\nIf there is no right neighbour, then it is assigned to the left one:\n| a | b | c | xxx | -> | a | b | c       |\nIf a cell to delete does not exist, nothing is performed.",
            "itemtype": "method",
            "name": "dropCell",
            "params": [
                {
                    "name": "cellNum",
                    "description": "cell number to delete. Numeration starts with 0.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Row",
            "module": "HtmlElements"
        },
        {
            "file": "js\\row.js",
            "line": 151,
            "description": "Appends style to the cell of the row.",
            "params": [
                {
                    "name": "cellNum",
                    "description": "cell number to which the style is to be appended.",
                    "type": "Number"
                },
                {
                    "name": "stl",
                    "description": "style or object to be appended",
                    "type": "Style|Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Row",
            "module": "HtmlElements"
        },
        {
            "file": "js\\row.js",
            "line": 168,
            "description": "Populates the attributes from a string that is an html repersentation of some row.\nIt takes a string that is an html representation of a row and update current object\nparameters such that it will correspond to the html representation.\nIn other words, (new Row()).loadFromHtml(htmlString).toHtml() should be similar to htmlString\n(eventually up to presence/absence of some parameters and attributes).",
            "itemtype": "method",
            "name": "loadFromHtml",
            "params": [
                {
                    "name": "htmlStr",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Row",
            "module": "HtmlElements"
        },
        {
            "file": "js\\start.js",
            "line": 15,
            "description": "Drops inline attribute named attrName from DOM element",
            "params": [
                {
                    "name": "element",
                    "description": "an inline attribute of  this element will be dropped. The element should respond to jQuery \"attr\" method.",
                    "type": "Object"
                },
                {
                    "name": "attrName",
                    "description": "this attribute name will be dropped.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "createRowFromHtml",
            "module": "HtmlElements"
        },
        {
            "file": "js\\start.js",
            "line": 31,
            "description": "Inserts table and applies hover effect on it.\nIt is based on CKEDITOR.editor.insertElement() method.\nThis approach might be wrong but I wanted to avoid repetitions.",
            "params": [
                {
                    "name": "table",
                    "description": "",
                    "type": "CKEDITOR.dom.element"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "createRowFromHtml",
            "module": "HtmlElements"
        },
        {
            "file": "js\\table.js",
            "line": 17,
            "description": "Type of the object. Returns \"Table\" for the objects of this type.",
            "itemtype": "method",
            "name": "getType",
            "type": "String",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\table.js",
            "line": 26,
            "description": "Html tag corresponding to Table instances.",
            "itemtype": "property",
            "name": "name",
            "type": "{String}",
            "default": "table",
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\table.js",
            "line": 34,
            "description": "Attributes of the table.",
            "itemtype": "property",
            "name": "attr",
            "type": "{TableAttributes}",
            "default": "TableAttributes",
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\table.js",
            "line": 42,
            "description": "Styles of the row",
            "itemtype": "property",
            "name": "style",
            "type": "{TableStyle}",
            "default": "TableStyle",
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\table.js",
            "line": 50,
            "description": "The number of the rows in the table. Delegates its functionality to Content::length.",
            "itemtype": "method",
            "name": "rowNum",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\table.js",
            "line": 59,
            "description": "Append a row to the content property. If object to insert is not a Row instance, error is thrown.",
            "itemtype": "method",
            "name": "appendRow",
            "params": [
                {
                    "name": "row",
                    "description": "a row to be appended",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\table.js",
            "line": 75,
            "description": "Gives a two-dimensional array [[w_11, w_12, ..., w_1n], ..., [w_m1, w_m2, ..., w_m3]]\nwhere w_ij is width of the cell located in the row i and column j.",
            "itemtype": "method",
            "name": "getMatrix",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\table.js",
            "line": 90,
            "description": "Returns array of widths of the cells in the table rows if all rows\nhave the same cell widths. Otherwise Null is returned.",
            "itemtype": "method",
            "name": "getProfile",
            "return": {
                "description": "",
                "type": "Array|Null"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\table.js",
            "line": 100,
            "description": "Imposes the widths of all cell in all rows of the table. The operation is delegated to a row methods.",
            "itemtype": "method",
            "name": "setProfile",
            "params": [
                {
                    "name": "profile",
                    "description": "an array of cell widths that will be applied to each row.",
                    "type": "Array"
                }
            ],
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\table.js",
            "line": 113,
            "description": "Inserts a cell \"cell\" into a given position \"pos\" of each row of the table.\nIf the table has 5 columns, then after insertion it will have 5+1=6 columns.\nPosition \"pos\" will correspond to the index of the inserted cell in the row after insertion.\n\"pos\" must be a valid cell number into the table after insertion. So, for the example above,\nthe valid values for \"pos\" are 0, 1, 2, 3, 4 and 5.",
            "itemtype": "method",
            "name": "insertColumnAt",
            "params": [
                {
                    "name": "cell",
                    "description": "",
                    "type": "Cell"
                },
                {
                    "name": "pos",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\table.js",
            "line": 145,
            "description": "Drops specified column from the table. The operation is delegated to the Row::dropCell()",
            "itemtype": "method",
            "name": "dropColumn",
            "params": [
                {
                    "name": "colNum",
                    "description": "the number of the column to delete. Numeration starts with 0.",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\table.js",
            "line": 159,
            "description": "Gives the number of columns in the table or null if not all rows have the same number of cells.\nThe operation is delegated to the Row::cellNum().",
            "itemtype": "method",
            "name": "colNum",
            "return": {
                "description": "",
                "type": "Number|null"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\table.js",
            "line": 186,
            "description": "Whether all rows in the table have the same cell widths.",
            "itemtype": "method",
            "name": "sameWidth",
            "return": {
                "description": "true, if all rows have the same cells' widths, false otherwise.",
                "type": "Boolean"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\table.js",
            "line": 222,
            "description": "Set the border of the table. It updates the properties 'attr' and 'style' of the instance:\n1. in 'style' property, sets up the following properties: 'border-width', 'border-color' and 'border-style'\n2. in 'attr' property, sets up 'border' property.\nNote that if after setting the border there is an assigment of 'style' or 'attr' property, then some info about the border might be overwritten.",
            "itemtype": "method",
            "name": "setBorder",
            "params": [
                {
                    "name": "borderInfo",
                    "description": "Object containing 'width', 'color' and 'style' fo the border to set.",
                    "type": "Object"
                }
            ],
            "default": "border-width is set to 1, border-color is set to #000000, border-style is set to solid.",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\table.js",
            "line": 247,
            "description": "Removes the border of the table. It updates the properties 'attr' and 'style' of the instance:\n1. in 'style' property, deletes the properties: 'border-width', 'border-color' and sets up 'border-style' to 'none'\n2. in 'attr' property, deletes 'border' property.",
            "itemtype": "method",
            "name": "removeBorder",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\table.js",
            "line": 268,
            "description": "Gives true if all table rows have border around (that is, each row is nothing but a table with border)\nfalse otherwise. It at least one of the properties, corresponding to the \"bogus\" elements is set, then\nthe table is considered as being framed and hence all its rows will be framed.",
            "itemtype": "method",
            "name": "isFramed",
            "return": {
                "description": "true if all table rows have border around",
                "type": "Boolean"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\table.js",
            "line": 285,
            "description": "Deletes properties that are responsable for the frames around the table rows.",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\table.js",
            "line": 301,
            "description": "Appends the style to the column. If the column exists, the method call Row::appendStyleToCell()\non each of the table rows.",
            "itemtype": "method",
            "name": "appendStyleToCol",
            "params": [
                {
                    "name": "colNum",
                    "description": "column number to which the style is to be appended.",
                    "type": "Number"
                },
                {
                    "name": "style",
                    "description": "Style or Object to be appended",
                    "type": "Style|Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\table.js",
            "line": 325,
            "description": "Generates table-specific html code with corresponding attributes and styles.\nCreation of the row-related html of each row is delegated to Row::toHtml()",
            "itemtype": "method",
            "name": "toHtml",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\table.js",
            "line": 365,
            "description": "Style of the row containing a single cell. It is used to created to a table with framed lines.\nIt is supposed that all properties\nbogusRowStyle, bogusRowAttr, bogusCellStyle, bogusCellAttr, bogusTableStyle, bogusTableAttr\nare simultaneously null or set.",
            "itemtype": "property",
            "name": "bogusTableStyle",
            "type": "Style",
            "default": "null",
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\table.js",
            "line": 375,
            "description": "Attributes of the row containing a single cell. It is used to created to a table with framed lines.\nIt is supposed that all properties\nbogusRowStyle, bogusRowAttr, bogusCellStyle, bogusCellAttr, bogusTableStyle, bogusTableAttr\nare simultaneously null or set.",
            "itemtype": "property",
            "name": "bogusTableStyle",
            "type": "Attribute",
            "default": "null",
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\table.js",
            "line": 385,
            "description": "Style of the  the cell which fills the whole row. It is used to created to a table with framed lines.\nIt is supposed that all properties\nbogusRowStyle, bogusRowAttr, bogusCellStyle, bogusCellAttr, bogusTableStyle, bogusTableAttr\nare simultaneously null or set.",
            "itemtype": "property",
            "name": "bogusTableStyle",
            "type": "TableCellStyle",
            "default": "null",
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\table.js",
            "line": 395,
            "description": "Attributes of the  the cell which fills the whole row. It is used to created to a table with framed lines.\nIt is supposed that all properties\nbogusRowStyle, bogusRowAttr, bogusCellStyle, bogusCellAttr, bogusTableStyle, bogusTableAttr\nare simultaneously null or set.",
            "itemtype": "property",
            "name": "bogusTableStyle",
            "type": "Attribute",
            "default": "null",
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\table.js",
            "line": 405,
            "description": "Style of the  the table that will be inserted into the single cell to create a table with framed lines.\nIt is supposed that all properties\nbogusRowStyle, bogusRowAttr, bogusCellStyle, bogusCellAttr, bogusTableStyle, bogusTableAttr\nare simultaneously null or set.",
            "itemtype": "property",
            "name": "bogusTableStyle",
            "type": "TableStyle",
            "default": "null",
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\table.js",
            "line": 415,
            "description": "Attributes of the  the table that will be inserted into the single cell to create a table with framed lines.\nIt is supposed that all properties\nbogusRowStyle, bogusRowAttr, bogusCellStyle, bogusCellAttr, bogusTableStyle, bogusTableAttr\nare simultaneously null or set.",
            "itemtype": "property",
            "name": "bogusTableStyle",
            "type": "Attribute",
            "default": "null",
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\tag.js",
            "line": 16,
            "description": "Tag name",
            "itemtype": "property",
            "name": "name",
            "type": "String",
            "default": "null",
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\tag.js",
            "line": 24,
            "description": "Tag attributes",
            "itemtype": "property",
            "name": "attr",
            "type": "{Attributes}",
            "default": "Attributes()",
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\tag.js",
            "line": 32,
            "description": "Attribute setter.",
            "itemtype": "method",
            "name": "setAttr",
            "params": [
                {
                    "name": "attr",
                    "description": "",
                    "type": "String|Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\tag.js",
            "line": 42,
            "description": "Appends style to the cell.",
            "itemtype": "method",
            "name": "appendStyle",
            "params": [
                {
                    "name": "stl",
                    "description": "style to be appended",
                    "type": "Style|Obj"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\tag.js",
            "line": 59,
            "description": "Tag styles",
            "itemtype": "property",
            "name": "style",
            "type": "{ListItemStyle}",
            "default": "ListItemStyle()",
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\tag.js",
            "line": 67,
            "description": "Style setter.",
            "itemtype": "method",
            "name": "setStyle",
            "params": [
                {
                    "name": "stl",
                    "description": "",
                    "type": "String|Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\tag.js",
            "line": 77,
            "description": "Retrieves the value of property from the \"style\"",
            "itemtype": "method",
            "name": "styleProperty",
            "params": [
                {
                    "name": "prop",
                    "description": "property name which value should be retrieved",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String|Number"
            },
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\tag.js",
            "line": 88,
            "description": "Imposes the value of the width of the \"attr\" and \"style\" properties. In the latter, \"min-width\" and \"max-width\" are imposed as well.\nIt is better to use with an integer argument.",
            "itemtype": "method",
            "name": "setWidth",
            "params": [
                {
                    "name": "w",
                    "description": "value of the width. Supposed to be either a string (i.e. \"10px\", \"14.1em\" etc)\nor a number (i.e. 200, 10).",
                    "type": "String|Number"
                }
            ],
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\tag.js",
            "line": 101,
            "description": "Content of the list item.",
            "itemtype": "property",
            "name": "content",
            "type": "{Content}",
            "default": "Content()",
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\tag.js",
            "line": 109,
            "description": "Gets the element stored in property \"content\". Delegates its functionality to the class Content.",
            "itemtype": "method",
            "name": "getElem",
            "params": [
                {
                    "name": "pos",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Any"
            },
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\tag.js",
            "line": 119,
            "description": "Gets the first element stored in property \"content\". Delegates its functionality to the class Content.",
            "itemtype": "method",
            "name": "getFirst",
            "return": {
                "description": "",
                "type": "Any"
            },
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\tag.js",
            "line": 128,
            "description": "Gets the last element stored in property \"content\". Delegates its functionality to the class Content.",
            "itemtype": "method",
            "name": "getLast",
            "return": {
                "description": "",
                "type": "Any"
            },
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\tag.js",
            "line": 137,
            "description": "Inserts an element into given position. Delegates its functionality to the class Content.",
            "itemtype": "method",
            "name": "insertElemAt",
            "params": [
                {
                    "name": "pos",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "elem",
                    "description": "",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\tag.js",
            "line": 148,
            "description": "Appends the element to the content of the list item. Delegates to Content::appendElem().",
            "itemtype": "method",
            "name": "appendElem",
            "params": [
                {
                    "name": "elem",
                    "description": "",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\tag.js",
            "line": 158,
            "description": "Returns the number of elements inside its content. Delegates to Content::length().",
            "itemtype": "method",
            "name": "length",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\tag.js",
            "line": 167,
            "description": "Gives html representation of the instance. If tag name is undefined or empty, just html comment is generated.",
            "itemtype": "method",
            "name": "toHtml",
            "return": {
                "description": "html representation of an instance of this class.",
                "type": "String"
            },
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "settings\\editor_config.js",
            "line": 1,
            "license": "Copyright (c) 2003-2013, CKSource - Frederico Knabben. All rights reserved.\nFor licensing, see LICENSE.html or http://ckeditor.com/license",
            "class": "",
            "module": "HtmlElements"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: license",
            "line": " ckeditor\\build-config.js:2"
        },
        {
            "message": "unknown tag: license",
            "line": " ckeditor\\config.js:1"
        },
        {
            "message": "unknown tag: ignore",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:62"
        },
        {
            "message": "unknown tag: ignore",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:134"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:134"
        },
        {
            "message": "unknown tag: ignore",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:144"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:144"
        },
        {
            "message": "unknown tag: ignore",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:154"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:154"
        },
        {
            "message": "unknown tag: ignore",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:164"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:164"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:175"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:187"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:197"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:211"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:427"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:751"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:762"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:779"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:786"
        },
        {
            "message": "unknown tag: ignore",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:1817"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:1869"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js\\jquery-1.10.2.js:1292"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js\\jquery-1.10.2.js:1356"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " js\\jquery-1.10.2.js:1443"
        },
        {
            "message": "unknown tag: license",
            "line": " settings\\editor_config.js:1"
        },
        {
            "message": "Missing item type\nBasic sample plugin inserting abbreviation elements into CKEditor editing area.\n\nCreated out of the CKEditor Plugin SDK:\nhttp://docs.ckeditor.com/#!/guide/plugin_sdk_sample_1",
            "line": " ckeditor\\plugins\\list2\\plugin.js:1"
        },
        {
            "message": "Missing item type\nDrops inline attribute named attrName from DOM element",
            "line": " ckeditor\\plugins\\table2\\dialogs\\table2.js:10"
        },
        {
            "message": "Missing item type\nReturns the width of the parent element available for its children.\n\navailable width = (element width) - (element left border width) - (element right border width) - (element left margin) - (element right margin)\n\nThe element width is supposed to be greater than zero and hence to have a unit of measurement (e.g. 'px').\nIf not set, widths of other attributes are equal to zero without unit of measurement. In this case one has to set the unit of measurement\nequal to the element width.",
            "line": " ckeditor\\plugins\\table2\\dialogs\\table2.js:55"
        },
        {
            "message": "Missing item type\nFinds the nearest ascendant of the \"elem\" for which \"filter\" returns true",
            "line": " ckeditor\\plugins\\table2\\plugin.js:3"
        },
        {
            "message": "Missing item type\nDrops the table row. If after removing the table becomes empty, then removes it as well.",
            "line": " ckeditor\\plugins\\table2\\plugin.js:22"
        },
        {
            "message": "Missing item type\nInserts a row at a specified position with respect to the selected element.\nThe command to insert the row is obtained by capitalizing the second argument\nand appending it to the string 'insert'. Example: if pos is 'after', the command\nto be executed is 'insertAfter'.",
            "line": " ckeditor\\plugins\\table2\\plugin.js:43"
        },
        {
            "message": "Missing item type\nInserts a column in the table. The localtion of the column to insert is given by the second\nargument that admits two values \"before\" and \"after\" and is inserted before or after the column\nof the selected cell, respectively.",
            "line": " ckeditor\\plugins\\table2\\plugin.js:87"
        },
        {
            "message": "Missing item type",
            "line": " ckeditor\\build-config.js:2"
        },
        {
            "message": "Missing item type\nThis file was added automatically by CKEditor builder.\nYou may re-use it at any time at http://ckeditor.com/builder to build CKEditor again.\n\nNOTE: \n   This file is not used by CKEditor, you may remove it.\n   Changing this file will not change your CKEditor configuration.",
            "line": " ckeditor\\build-config.js:7"
        },
        {
            "message": "Missing item type",
            "line": " ckeditor\\config.js:1"
        },
        {
            "message": "Missing item type\nCopyright (c) 2003-2013, CKSource - Frederico Knabben. All rights reserved.\nFor licensing, see LICENSE.md or http://ckeditor.com/license",
            "line": " ckeditor\\styles.js:1"
        },
        {
            "message": "Missing item type\nTop level namespace for Jasmine, a lightweight JavaScript BDD/spec/testing framework.",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:3"
        },
        {
            "message": "Missing item type",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:10"
        },
        {
            "message": "Missing item type\nUse <code>jasmine.undefined</code> instead of <code>undefined</code>, since <code>undefined</code> is just\na plain old variable and may be redefined by somebody else.",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:17"
        },
        {
            "message": "Missing item type\nShow diagnostic messages in the console if set to true",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:25"
        },
        {
            "message": "Missing item type\nDefault interval in milliseconds for event loop yields (e.g. to allow network activity or to refresh the screen with the HTML-based runner). Small values here may result in slow test running. Zero means no updates until all tests have completed.",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:31"
        },
        {
            "message": "Missing item type\nMaximum levels of nesting that will be included when an object is pretty-printed",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:37"
        },
        {
            "message": "Missing item type\nDefault timeout interval in milliseconds for waitsFor() blocks.",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:42"
        },
        {
            "message": "Missing item type\nBy default exceptions thrown in the context of a test are caught by jasmine so that it can run the remaining tests in the suite.\nSet to false to let the exception bubble up in the browser.",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:47"
        },
        {
            "message": "Missing item type\nAllows for bound functions to be compared.  Internal use only.",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:62"
        },
        {
            "message": "Missing item type\nGetter for the Jasmine environment. Ensures one gets created",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:126"
        },
        {
            "message": "Missing item type",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:134"
        },
        {
            "message": "Missing item type",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:144"
        },
        {
            "message": "Missing item type",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:154"
        },
        {
            "message": "Missing item type",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:164"
        },
        {
            "message": "Missing item type\nPretty printer for expecations.  Takes any object and turns it into a human-readable string.",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:175"
        },
        {
            "message": "Missing item type\nReturns true if the object is a DOM Node.",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:187"
        },
        {
            "message": "Missing item type\nReturns a matchable 'generic' object of the class type.  For use in expecations of type when values don't matter.",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:197"
        },
        {
            "message": "Missing item type\nReturns a matchable subset of a JSON object. For use in expectations when you don't care about all of the\nattributes on the object.",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:211"
        },
        {
            "message": "Missing item type\nJasmine Spies are test doubles that can act as stubs, spies, fakes or when used in an expecation, mocks.\n\nSpies should be created in test setup, before expectations.  They can then be checked, using the standard Jasmine\nexpectation syntax. Spies can be checked if they were called or not and what the calling params were.\n\nA Spy has the following fields: wasCalled, callCount, mostRecentCall, and argsForCall (see docs).\n\nSpies are torn down at the end of every spec.\n\nNote: Do <b>not</b> call new jasmine.Spy() directly - a spy must be created using spyOn, jasmine.createSpy or jasmine.createSpyObj.",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:226"
        },
        {
            "message": "Missing item type\nThe name of the spy, if provided.",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:271"
        },
        {
            "message": "Missing item type\nIs this Object a spy?",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:275"
        },
        {
            "message": "Missing item type\nThe actual function this spy stubs.",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:279"
        },
        {
            "message": "Missing item type\nTracking of the most recent call to the spy.",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:284"
        },
        {
            "message": "Missing item type\nHolds arguments for each call to the spy, indexed by call count",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:293"
        },
        {
            "message": "Missing item type\nTells a spy to call through to the actual implemenatation.",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:307"
        },
        {
            "message": "Missing item type\nFor setting the return value of a spy.",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:323"
        },
        {
            "message": "Missing item type\nFor throwing an exception when a spy is called.",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:342"
        },
        {
            "message": "Missing item type\nCalls an alternate implementation when a spy is called.",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:361"
        },
        {
            "message": "Missing item type\nResets all of a spy's the tracking variables so that it can be used again.",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:381"
        },
        {
            "message": "Missing item type\nDetermines whether an object is a spy.",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:427"
        },
        {
            "message": "Missing item type\nCreates a more complicated spy: an Object that has every property a function that is a spy.  Used for stubbing something\nlarge in one call.",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:437"
        },
        {
            "message": "Missing item type\nAll parameters are pretty-printed and concatenated together, then written to the current spec's output.\n\nBe careful not to leave calls to <code>jasmine.log</code> in production code.",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:455"
        },
        {
            "message": "Missing item type\nFunction that installs a spy on an existing object's method name.  Used within a Spec to create a spy.",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:465"
        },
        {
            "message": "Missing item type\nCreates a Jasmine spec that will be added to the current suite.\n\n// TODO: pending tests",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:485"
        },
        {
            "message": "Missing item type\nCreates a <em>disabled</em> Jasmine spec.\n\nA convenience method that allows existing specs to be disabled temporarily during development.",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:503"
        },
        {
            "message": "Missing item type\nStarts a chain for a Jasmine expectation.\n\nIt is passed an Object that is the actual value and should chain to one of the many\njasmine.Matchers functions.",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:516"
        },
        {
            "message": "Missing item type\nDefines part of a jasmine spec.  Used in cominbination with waits or waitsFor in asynchrnous specs.",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:530"
        },
        {
            "message": "Missing item type\nWaits a fixed time period before moving to the next block.",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:540"
        },
        {
            "message": "Missing item type\nWaits for the latchFunction to return true before proceeding to the next block.",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:551"
        },
        {
            "message": "Missing item type\nA function that is called before each spec in a suite.\n\nUsed for spec setup, including validating assumptions.",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:563"
        },
        {
            "message": "Missing item type\nA function that is called after each spec in a suite.\n\nUsed for restoring any state that is hijacked during spec execution.",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:575"
        },
        {
            "message": "Missing item type\nDefines a suite of specifications.\n\nStores the description and all defined specs in the Jasmine environment as one suite of specs. Variables declared\nare accessible by calls to beforeEach, it, and afterEach. Describe blocks can be nested, allowing for specialization\nof setup in some tests.",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:587"
        },
        {
            "message": "Missing item type\nDisables a suite of specifications.  Used to disable some suites in a file, or files, temporarily during development.",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:607"
        },
        {
            "message": "Missing item type",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:646"
        },
        {
            "message": "Missing item type\nDeclare that a child class inherit it's prototype from the parent class.",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:651"
        },
        {
            "message": "Missing item type",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:659"
        },
        {
            "message": "Missing item type\nEnvironment for Jasmine",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:713"
        },
        {
            "message": "Missing item type",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:751"
        },
        {
            "message": "Missing item type",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:762"
        },
        {
            "message": "Missing item type",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:779"
        },
        {
            "message": "Missing item type",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:786"
        },
        {
            "message": "Missing item type\nRegister a reporter to receive status updates from Jasmine.",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:793"
        },
        {
            "message": "Missing item type",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:1013"
        },
        {
            "message": "Missing item type\nBlocks are functions with executable code that make up a spec.",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:1044"
        },
        {
            "message": "Missing item type",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:1071"
        },
        {
            "message": "Missing item type",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:1173"
        },
        {
            "message": "Missing item type\ntoBe: compares the actual to the expected using ===",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:1250"
        },
        {
            "message": "Missing item type\ntoNotBe: compares the actual to the expected using !==",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:1258"
        },
        {
            "message": "Missing item type\ntoEqual: compares the actual to the expected using common sense equality. Handles Objects, Arrays, etc.",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:1267"
        },
        {
            "message": "Missing item type\ntoNotEqual: compares the actual to the expected using the ! of jasmine.Matchers.toEqual",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:1276"
        },
        {
            "message": "Missing item type\nMatcher that compares the actual to the expected using a regular expression.  Constructs a RegExp, so takes\na pattern or a String.",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:1285"
        },
        {
            "message": "Missing item type\nMatcher that compares the actual to the expected using the boolean inverse of jasmine.Matchers.toMatch",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:1295"
        },
        {
            "message": "Missing item type\nMatcher that compares the actual to jasmine.undefined.",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:1304"
        },
        {
            "message": "Missing item type\nMatcher that compares the actual to jasmine.undefined.",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:1311"
        },
        {
            "message": "Missing item type\nMatcher that compares the actual to null.",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:1318"
        },
        {
            "message": "Missing item type\nMatcher that compares the actual to NaN.",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:1325"
        },
        {
            "message": "Missing item type\nMatcher that boolean not-nots the actual.",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:1336"
        },
        {
            "message": "Missing item type\nMatcher that boolean nots the actual.",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:1344"
        },
        {
            "message": "Missing item type\nMatcher that checks to see if the actual, a Jasmine spy, was called.",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:1352"
        },
        {
            "message": "Missing item type",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:1374"
        },
        {
            "message": "Missing item type\nMatcher that checks to see if the actual, a Jasmine spy, was not called.",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:1377"
        },
        {
            "message": "Missing item type\nMatcher that checks to see if the actual, a Jasmine spy, was called with a set of parameters.",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:1401"
        },
        {
            "message": "Missing item type",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:1426"
        },
        {
            "message": "Missing item type",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:1429"
        },
        {
            "message": "Missing item type\nMatcher that checks that the expected item is an element in the actual Array.",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:1446"
        },
        {
            "message": "Missing item type\nMatcher that checks that the expected item is NOT an element in the actual Array.",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:1455"
        },
        {
            "message": "Missing item type\nMatcher that checks that the expected item is equal to the actual item\nup to a given level of decimal precision (default 2).",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:1473"
        },
        {
            "message": "Missing item type\nMatcher that checks that the expected exception was thrown by the actual.",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:1487"
        },
        {
            "message": "Missing item type",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:1664"
        },
        {
            "message": "Missing item type",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:1760"
        },
        {
            "message": "Missing item type\nHolds results for a set of Jasmine spec. Allows for the results array to hold another jasmine.NestedResults",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:1795"
        },
        {
            "message": "Missing item type\nThe total count of results",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:1801"
        },
        {
            "message": "Missing item type\nNumber of passed results",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:1805"
        },
        {
            "message": "Missing item type\nNumber of failed results",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:1809"
        },
        {
            "message": "Missing item type\nWas this suite/spec skipped?",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:1813"
        },
        {
            "message": "Missing item type",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:1817"
        },
        {
            "message": "Missing item type\nRoll up the result counts.",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:1823"
        },
        {
            "message": "Missing item type\nAdds a log message.",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:1834"
        },
        {
            "message": "Missing item type\nGetter for the results: message & results.",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:1842"
        },
        {
            "message": "Missing item type\nAdds a result, tracking counts (total, passed, & failed)",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:1849"
        },
        {
            "message": "Missing item type",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:1869"
        },
        {
            "message": "Missing item type\nBase class for pretty printing for expectation results.",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:1875"
        },
        {
            "message": "Missing item type\nFormats a value in a nice, human-readable string.",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:1882"
        },
        {
            "message": "Missing item type\nRunner",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:2123"
        },
        {
            "message": "Missing item type\nInternal representation of a Jasmine specification, or test.",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:2200"
        },
        {
            "message": "Missing item type\nAll parameters are pretty-printed and concatenated together, then written to the spec's output.\n\nBe careful not to leave calls to <code>jasmine.log</code> in production code.",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:2239"
        },
        {
            "message": "Missing item type",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:2262"
        },
        {
            "message": "Missing item type\nWaits a fixed time period before moving to the next block.",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:2275"
        },
        {
            "message": "Missing item type\nWaits for the latchFunction to return true before proceeding to the next block.",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:2287"
        },
        {
            "message": "Missing item type\nInternal representation of a Jasmine suite.",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:2443"
        },
        {
            "message": "Missing item type\nA block which waits for some condition to become true, with timeout.",
            "line": " jasmine\\lib\\jasmine-1.3.0\\jasmine.js:2540"
        },
        {
            "message": "Missing item type\nFill in the properties with the values from the argument if any",
            "line": " js\\attributesStyle.js:18"
        },
        {
            "message": "Missing item type\nreturns object with keys 'width', 'color', 'style' describing the border.\nIf the Style object has 'border-style' equal to 'none', then in the\nreturn object, the key 'width' is set to 0.\nIf 'border-style' is not 'none' and 'border-width' is present, then in the\nreturn object, the key 'width' the 'border-width' value.\nOtherwise, the 'width' key is not present.",
            "line": " js\\attributesStyle.js:87"
        },
        {
            "message": "Missing item type\nFill in the properties with the values from the argument if any",
            "line": " js\\attributesStyle.js:168"
        },
        {
            "message": "Missing item type\nAppends the element to the array Content::elements.",
            "line": " js\\content.js:62"
        },
        {
            "message": "Missing item type\nConverts the first letter of the string into the upper case\nIf the string is empty, the output is empty string as well.",
            "line": " js\\helpers.js:22"
        },
        {
            "message": "Missing item type\nConverts the first letter of the string into the upper case\nIf the string is empty, the output is empty string as well.",
            "line": " js\\helpers.js:32"
        },
        {
            "message": "Missing item type\nReplaces special characters present in the input string by their unicodes. It is supposed to replace symbols like à, ò, è, é\nand not a, b, c etc. For the moment it replaces any characters which unicode is outside the range [32, 125].",
            "line": " js\\helpers.js:292"
        },
        {
            "message": "Missing item type\nSplits array element at position \"pos\" in two parts in such a way that the trace of the original array\nis equal to the trace of the output array. If it is the first element of the array to be splitted, then\nit is splitted in 1/2 and 1/2 (up to the truncation). If the element has a left neighbour, then the neighbour\nand the element are taken off 1/3 and these two parts are given to the newly created element that is inserted\nbetween the neighbour and the element: [a, b, ...] -> [2/3 a, 1/3 (a + b), 2/3 b, ...]",
            "line": " js\\helpers.js:315"
        },
        {
            "message": "Missing item type\nFlatten the object. This function was written because Node::attributes returns attributes in format.\nExample {'1': {name: \"width\", value:\"100\", ...}, '2': {name: \"color\", value:\"black\", ...}, ...}\nreturns {\"width\":\"100\", \"color\":\"black\", ...}",
            "line": " js\\helpers.js:412"
        },
        {
            "message": "Missing item type\nSandwiches the midlle string with the left and the right ones. If the middle one is empty, empty string is returned.\nIf the right arguments is not given, the left one is used.",
            "line": " js\\helpers.js:431"
        },
        {
            "message": "Missing item type\nGlues all elements of the array, replace trailing spaces and repaces multiple spaces with a single one.",
            "line": " js\\helpers.js:452"
        },
        {
            "message": "Missing item type\nMerge two objects. If non-object is given, an error is thrown.",
            "line": " js\\helpers.js:469"
        },
        {
            "message": "Missing item type\nCreate key-value caches of limited size",
            "line": " js\\jquery-1.10.2.js:1292"
        },
        {
            "message": "Missing item type\nMark a function for special use by Sizzle",
            "line": " js\\jquery-1.10.2.js:1312"
        },
        {
            "message": "Missing item type\nSupport testing using an element",
            "line": " js\\jquery-1.10.2.js:1321"
        },
        {
            "message": "Missing item type\nAdds the same handler for all of the specified attrs",
            "line": " js\\jquery-1.10.2.js:1342"
        },
        {
            "message": "Missing item type\nChecks document order of two siblings",
            "line": " js\\jquery-1.10.2.js:1356"
        },
        {
            "message": "Missing item type\nReturns a function to use in pseudos for input types",
            "line": " js\\jquery-1.10.2.js:1385"
        },
        {
            "message": "Missing item type\nReturns a function to use in pseudos for buttons",
            "line": " js\\jquery-1.10.2.js:1396"
        },
        {
            "message": "Missing item type\nReturns a function to use in pseudos for positionals",
            "line": " js\\jquery-1.10.2.js:1407"
        },
        {
            "message": "Missing item type\nDetect xml",
            "line": " js\\jquery-1.10.2.js:1429"
        },
        {
            "message": "Missing item type\nSets document-related variables once based on the current document",
            "line": " js\\jquery-1.10.2.js:1443"
        },
        {
            "message": "Missing item type\nDocument sorting and removing duplicates",
            "line": " js\\jquery-1.10.2.js:1853"
        },
        {
            "message": "Missing item type\nUtility function for retrieving the text value of an array of DOM nodes",
            "line": " js\\jquery-1.10.2.js:1882"
        },
        {
            "message": "Missing item type\nAppends style to the cell of the row.",
            "line": " js\\row.js:151"
        },
        {
            "message": "Missing item type\nDrops inline attribute named attrName from DOM element",
            "line": " js\\start.js:15"
        },
        {
            "message": "Missing item type\nInserts table and applies hover effect on it.\nIt is based on CKEDITOR.editor.insertElement() method.\nThis approach might be wrong but I wanted to avoid repetitions.",
            "line": " js\\start.js:31"
        },
        {
            "message": "Missing item type\nDeletes properties that are responsable for the frames around the table rows.",
            "line": " js\\table.js:285"
        },
        {
            "message": "Missing item type",
            "line": " settings\\editor_config.js:1"
        }
    ]
}