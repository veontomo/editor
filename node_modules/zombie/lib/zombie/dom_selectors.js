// Generated by CoffeeScript 1.4.0
var HTML, Path, createSizzle, isDescendantOf, queryForDescendants;

Path = require("path");

HTML = require("jsdom").dom.level3.html;

createSizzle = require(Path.resolve(require.resolve("jsdom"), "../jsdom/selectors/sizzle"));

HTML.Node.prototype.contains = function(otherNode) {
  return !!(this.compareDocumentPosition(otherNode) & 16);
};

isDescendantOf = function(element, context) {
  var parent;
  parent = element.parentNode;
  if (parent) {
    return parent === context || isDescendantOf(parent, context);
  } else {
    return false;
  }
};

queryForDescendants = function(element, selector) {
  var document, parent, query;
  document = element.ownerDocument;
  if (!element.parentNode) {
    parent = document.createElement("div");
    parent.appendChild(element);
    element = parent;
  }
  query = function() {
    return document._sizzle(selector, element.parentNode || element).filter(function(node) {
      return isDescendantOf(node, element);
    });
  };
  return query;
};

HTML.HTMLDocument.prototype.querySelector = function(selector) {
  var document, documentElement, sizzle;
  document = this;
  documentElement = document.documentElement;
  if (documentElement) {
    sizzle = this._sizzle || (this._sizzle = createSizzle(document));
    return sizzle(selector, documentElement)[0];
  } else {
    return null;
  }
};

HTML.HTMLDocument.prototype.querySelectorAll = function(selector) {
  var document, documentElement, query, sizzle;
  document = this;
  documentElement = document.documentElement;
  if (documentElement) {
    sizzle = this._sizzle || (this._sizzle = createSizzle(document));
    query = function() {
      return sizzle(selector, document);
    };
    return new HTML.NodeList(documentElement, query);
  } else {
    return new HTML.NodeList();
  }
};

HTML.Element.prototype.querySelector = function(selector) {
  var _base;
  (_base = this.ownerDocument)._sizzle || (_base._sizzle = createSizzle(this.ownerDocument));
  return queryForDescendants(this, selector)()[0];
};

HTML.Element.prototype.querySelectorAll = function(selector) {
  var _base;
  (_base = this.ownerDocument)._sizzle || (_base._sizzle = createSizzle(this.ownerDocument));
  return new HTML.NodeList(this, queryForDescendants(this, selector));
};
