{
    "project": {
        "name": "Newsletter API",
        "description": "Javascript classes",
        "version": "1.2.1"
    },
    "files": {
        "js\\classes\\CKHelper.js": {
            "name": "js\\classes\\CKHelper.js",
            "modules": {},
            "classes": {
                "CKHelper": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\classes\\attributes.js": {
            "name": "js\\classes\\attributes.js",
            "modules": {},
            "classes": {
                "Attributes": 1,
                "TableAttributes": 1,
                "LinkAttributes": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\classes\\cell.js": {
            "name": "js\\classes\\cell.js",
            "modules": {},
            "classes": {
                "Cell": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\classes\\content.js": {
            "name": "js\\classes\\content.js",
            "modules": {},
            "classes": {
                "Content": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\classes\\helpers.js": {
            "name": "js\\classes\\helpers.js",
            "modules": {},
            "classes": {
                "Helper": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\classes\\link.js": {
            "name": "js\\classes\\link.js",
            "modules": {},
            "classes": {
                "Link": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\classes\\list.js": {
            "name": "js\\classes\\list.js",
            "modules": {},
            "classes": {
                "List": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\classes\\listItem.js": {
            "name": "js\\classes\\listItem.js",
            "modules": {},
            "classes": {
                "ListItem": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\classes\\property.js": {
            "name": "js\\classes\\property.js",
            "modules": {},
            "classes": {
                "Property": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\classes\\row.js": {
            "name": "js\\classes\\row.js",
            "modules": {},
            "classes": {
                "Row": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\classes\\string.js": {
            "name": "js\\classes\\string.js",
            "modules": {},
            "classes": {
                "StringHelper": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\classes\\style.js": {
            "name": "js\\classes\\style.js",
            "modules": {
                "Property": 1
            },
            "classes": {
                "Style": 1,
                "TableStyle": 1,
                "LinkStyle": 1,
                "TableRowStyle": 1,
                "TableCellStyle": 1,
                "ImageStyle": 1,
                "ListStyle": 1,
                "ListItemStyle": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\classes\\table.js": {
            "name": "js\\classes\\table.js",
            "modules": {
                "HtmlElements": 1
            },
            "classes": {
                "Table": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\classes\\tag.js": {
            "name": "js\\classes\\tag.js",
            "modules": {},
            "classes": {
                "Tag": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\classes\\unit.js": {
            "name": "js\\classes\\unit.js",
            "modules": {
                "Helper": 1
            },
            "classes": {
                "Unit": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "Helper": {
            "name": "Helper",
            "submodules": {},
            "classes": {
                "CKHelper": 1,
                "Helper": 1,
                "StringHelper": 1,
                "Unit": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "js\\classes\\unit.js",
            "line": 5,
            "description": "Represents a quantity divided in \"value\" and \"measure\".",
            "type": "{Object}",
            "version": "0.0.1",
            "author": "A.Shcherbakov",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "measure",
                    "description": "",
                    "type": "String|null"
                }
            ]
        },
        "Property": {
            "name": "Property",
            "submodules": {},
            "classes": {
                "Attributes": 1,
                "TableAttributes": 1,
                "LinkAttributes": 1,
                "Property": 1,
                "Style": 1,
                "TableStyle": 1,
                "LinkStyle": 1,
                "TableRowStyle": 1,
                "TableCellStyle": 1,
                "ImageStyle": 1,
                "ListStyle": 1,
                "ListItemStyle": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "js\\classes\\style.js",
            "line": 466,
            "description": "This class defines inline styles of html tags",
            "params": [
                {
                    "name": "obj",
                    "description": "Attributes class variable will be instantiated using this input",
                    "type": "String|Object"
                }
            ],
            "extends": "Property"
        },
        "HtmlElements": {
            "name": "HtmlElements",
            "submodules": {},
            "classes": {
                "Cell": 1,
                "Content": 1,
                "Link": 1,
                "List": 1,
                "ListItem": 1,
                "Row": 1,
                "Table": 1,
                "Tag": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "js\\classes\\tag.js",
            "line": 5,
            "description": "Represents table.",
            "params": [
                {
                    "name": "arg",
                    "description": "",
                    "type": "Mixed"
                }
            ],
            "extends": "Tag"
        }
    },
    "classes": {
        "CKHelper": {
            "name": "CKHelper",
            "shortname": "CKHelper",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Helper",
            "namespace": "",
            "file": "js\\classes\\CKHelper.js",
            "line": 4,
            "description": "Collection of functions used by various plugins of the CKEditor."
        },
        "Attributes": {
            "name": "Attributes",
            "shortname": "Attributes",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Property",
            "namespace": "",
            "file": "js\\classes\\attributes.js",
            "line": 3,
            "description": "This class is supposed to define attributes of html tags",
            "params": [
                {
                    "name": "obj",
                    "description": "Attributes class variable will be instantiated using this input",
                    "type": "String|Object"
                }
            ]
        },
        "TableAttributes": {
            "name": "TableAttributes",
            "shortname": "TableAttributes",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Property",
            "namespace": "",
            "file": "js\\classes\\attributes.js",
            "line": 42,
            "description": "Table-specific attributes.",
            "extends": "Attributes"
        },
        "LinkAttributes": {
            "name": "LinkAttributes",
            "shortname": "LinkAttributes",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Property",
            "namespace": "",
            "file": "js\\classes\\attributes.js",
            "line": 70,
            "description": "Table-specific attributes.",
            "extends": "Attributes"
        },
        "Cell": {
            "name": "Cell",
            "shortname": "Cell",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "HtmlElements",
            "namespace": "",
            "file": "js\\classes\\cell.js",
            "line": 5,
            "description": "Represents a table cell. The argument is supposed to be passed to the \"content\" property."
        },
        "Content": {
            "name": "Content",
            "shortname": "Content",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "HtmlElements",
            "namespace": "",
            "file": "js\\classes\\content.js",
            "line": 5,
            "description": "This class is used to encompass other objects."
        },
        "Helper": {
            "name": "Helper",
            "shortname": "Helper",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Helper",
            "namespace": "",
            "file": "js\\classes\\helpers.js",
            "line": 4,
            "description": "Set of useful functions"
        },
        "Link": {
            "name": "Link",
            "shortname": "Link",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "HtmlElements",
            "namespace": "",
            "file": "js\\classes\\link.js",
            "line": 4,
            "description": "This class is represent an html link tag \"a\"."
        },
        "List": {
            "name": "List",
            "shortname": "List",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "HtmlElements",
            "namespace": "",
            "file": "js\\classes\\list.js",
            "line": 5,
            "description": "This class is used to represent ordered and unordered lists. If argument is provided and is allowed one, it will be used\nto set the property \"name\". Otherwise, \"name\" property will be set to the first allowed value.",
            "params": [
                {
                    "name": "listType",
                    "description": "",
                    "type": "Sting"
                }
            ]
        },
        "ListItem": {
            "name": "ListItem",
            "shortname": "ListItem",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "HtmlElements",
            "namespace": "",
            "file": "js\\classes\\listItem.js",
            "line": 5,
            "description": "This class is used to represent a list item."
        },
        "Property": {
            "name": "Property",
            "shortname": "Property",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Property",
            "namespace": "",
            "file": "js\\classes\\property.js",
            "line": 5,
            "description": "A general Property class. If the argument is an object, then its properties are copied\ninto Property instance. If the argument is a string, then it will be splitted according to\nthe pattern \"key: value;\" to populate object properties. If, in addition, the \"value\" can be\ncast to a number, it will be done."
        },
        "Row": {
            "name": "Row",
            "shortname": "Row",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "HtmlElements",
            "namespace": "",
            "file": "js\\classes\\row.js",
            "line": 5,
            "description": "Represents a table row"
        },
        "StringHelper": {
            "name": "StringHelper",
            "shortname": "StringHelper",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Helper",
            "namespace": "",
            "file": "js\\classes\\string.js",
            "line": 7,
            "description": "These are methods to convert strings into different objects."
        },
        "Style": {
            "name": "Style",
            "shortname": "Style",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Property",
            "namespace": "",
            "file": "js\\classes\\style.js",
            "line": 3,
            "description": "This class defines inline styles of html tags",
            "params": [
                {
                    "name": "obj",
                    "description": "Style class variable will be instantiated using this input",
                    "type": "String|Object"
                }
            ]
        },
        "TableStyle": {
            "name": "TableStyle",
            "shortname": "TableStyle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Property",
            "namespace": "",
            "file": "js\\classes\\style.js",
            "line": 91,
            "description": "Represents table style."
        },
        "LinkStyle": {
            "name": "LinkStyle",
            "shortname": "LinkStyle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Property",
            "namespace": "",
            "file": "js\\classes\\style.js",
            "line": 168,
            "description": "Represents hyperlink style.",
            "params": [
                {
                    "name": "obj",
                    "description": "Style class variable will be instantiated using this input",
                    "type": "String|Object"
                }
            ]
        },
        "TableRowStyle": {
            "name": "TableRowStyle",
            "shortname": "TableRowStyle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Property",
            "namespace": "",
            "file": "js\\classes\\style.js",
            "line": 221,
            "description": "Represents table row style."
        },
        "TableCellStyle": {
            "name": "TableCellStyle",
            "shortname": "TableCellStyle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Property",
            "namespace": "",
            "file": "js\\classes\\style.js",
            "line": 284,
            "description": "Represents table cell styles."
        },
        "ImageStyle": {
            "name": "ImageStyle",
            "shortname": "ImageStyle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Property",
            "namespace": "",
            "file": "js\\classes\\style.js",
            "line": 359,
            "description": "Represents image styles."
        },
        "ListStyle": {
            "name": "ListStyle",
            "shortname": "ListStyle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Property",
            "namespace": "",
            "file": "js\\classes\\style.js",
            "line": 416,
            "description": "Represents image styles."
        },
        "ListItemStyle": {
            "name": "ListItemStyle",
            "shortname": "ListItemStyle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Property",
            "namespace": "",
            "file": "js\\classes\\style.js",
            "line": 466,
            "description": "Represents list item styles."
        },
        "Table": {
            "name": "Table",
            "shortname": "Table",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "HtmlElements",
            "namespace": "",
            "file": "js\\classes\\table.js",
            "line": 5,
            "description": "Represents table."
        },
        "Tag": {
            "name": "Tag",
            "shortname": "Tag",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "HtmlElements",
            "namespace": "",
            "file": "js\\classes\\tag.js",
            "line": 5,
            "description": "This class is used to represent a general html tag."
        },
        "Unit": {
            "name": "Unit",
            "shortname": "Unit",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Helper",
            "namespace": "",
            "file": "js\\classes\\unit.js",
            "line": 5,
            "description": "Represents a quantity divided in \"value\" and \"measure\"."
        }
    },
    "classitems": [
        {
            "file": "js\\classes\\CKHelper.js",
            "line": 13,
            "description": "Finds the nearest ascendant of the \"elem\" for which \"filter\" returns true",
            "itemtype": "method",
            "name": "findAscendant",
            "params": [
                {
                    "name": "elem",
                    "description": "",
                    "type": "CKEDITOR.dom.element"
                },
                {
                    "name": "filter",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "CKEDITOR.dom.element|null"
            },
            "class": "CKHelper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\CKHelper.js",
            "line": 33,
            "description": "Drops the table row. If after removing the table becomes empty, then removes it as well.",
            "itemtype": "method",
            "name": "dropRow",
            "params": [
                {
                    "name": "ed",
                    "description": "Represents an editor instance.",
                    "type": "CKEditor.editor"
                }
            ],
            "return": {
                "description": "",
                "type": "Null"
            },
            "class": "CKHelper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\CKHelper.js",
            "line": 56,
            "description": "Inserts a row at a specified position with respect to the selected element.\nThe command to insert the row is obtained by capitalizing the second argument\nand appending it to the string 'insert'. Example: if pos is 'after', the command\nto be executed is 'insertAfter'.",
            "itemtype": "method",
            "name": "insertRow",
            "params": [
                {
                    "name": "ed",
                    "description": "Represents an editor instance.",
                    "type": "CKEDITOR.editor"
                },
                {
                    "name": "pos",
                    "description": "where to insert the element with respect to the current one.",
                    "type": "String"
                }
            ],
            "class": "CKHelper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\CKHelper.js",
            "line": 100,
            "description": "Inserts a column in the table. The localtion of the column to insert is given by the second\nargument that admits two values \"before\" and \"after\" and is inserted before or after the column\nof the selected cell, respectively.",
            "itemtype": "method",
            "name": "insertColumn",
            "params": [
                {
                    "name": "ed",
                    "description": "Represents an editor instance.",
                    "type": "CKEDITOR.editor"
                },
                {
                    "name": "pos",
                    "description": "\"before\" or \"after\": location of the column to insert w.r.t. the current cell",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "CKHelper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\attributes.js",
            "line": 17,
            "description": "Generates string representation of this object (as html attributes).\nIt takse into consideration only strings and numbers. The rest is ignored.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a union of substrings; each substring is of this format: 'attribute=\"value\"',\n                        between the substrings there is a separator ' ' (space).",
                "type": "String"
            },
            "example": [
                "    class=\"example\" id=\"tag\""
            ],
            "class": "Attributes",
            "module": "Property"
        },
        {
            "file": "js\\classes\\attributes.js",
            "line": 54,
            "description": "Cellpadding attribute of the table. It is supposed that measurement unit is \"px\".",
            "itemtype": "property",
            "name": "cellpadding",
            "type": "Number",
            "default": "0",
            "class": "TableAttributes",
            "module": "Property"
        },
        {
            "file": "js\\classes\\attributes.js",
            "line": 60,
            "description": "Cellspacing attribute of the table. It is supposed that measurement unit is \"px\".",
            "itemtype": "property",
            "name": "cellspacing",
            "type": "Number",
            "default": "0",
            "class": "TableAttributes",
            "module": "Property"
        },
        {
            "file": "js\\classes\\attributes.js",
            "line": 82,
            "description": "The URL of the link.",
            "itemtype": "property",
            "name": "href",
            "type": "String",
            "default": "(empty string)",
            "class": "LinkAttributes",
            "module": "Property"
        },
        {
            "file": "js\\classes\\attributes.js",
            "line": 90,
            "description": "Href getter.",
            "itemtype": "method",
            "name": "getHref",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "LinkAttributes",
            "module": "Property"
        },
        {
            "file": "js\\classes\\attributes.js",
            "line": 99,
            "description": "Href setter. Native javascript function `encodeURI()` will be applied to the argument.",
            "itemtype": "method",
            "name": "setHref",
            "params": [
                {
                    "name": "url",
                    "description": "`encodeURI()` is to be applied when assigning to this.url",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "LinkAttributes",
            "module": "Property"
        },
        {
            "file": "js\\classes\\cell.js",
            "line": 19,
            "description": "Type of the object. Set to value \"Cell\" for the objects of this type.",
            "itemtype": "method",
            "name": "getType",
            "type": "String",
            "return": {
                "description": "",
                "type": "String"
            },
            "deprecated": true,
            "deprecationMessage": "in favor of getName()",
            "class": "Cell",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\cell.js",
            "line": 29,
            "description": "Html tag corresponding to Cell instances.",
            "itemtype": "property",
            "name": "name",
            "type": "{String}",
            "default": "table",
            "class": "Cell",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\cell.js",
            "line": 37,
            "description": "Overrides the inherited methods in order to pass the argument to the constructor of Content class.",
            "itemtype": "property",
            "name": "content",
            "type": "{Content}",
            "class": "Cell",
            "module": "HtmlElements",
            "subprops": [
                {
                    "name": "arg",
                    "description": "",
                    "type": "Any"
                }
            ]
        },
        {
            "file": "js\\classes\\cell.js",
            "line": 45,
            "description": "Styles of the cell",
            "itemtype": "property",
            "name": "style",
            "type": "{TableCellStyle}",
            "default": "TableCellStyle",
            "class": "Cell",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\content.js",
            "line": 16,
            "description": "Container of items. If an item has a method \"toHtml\", it will be applied when transforming the whole Content object into a string.",
            "itemtype": "property",
            "name": "elements",
            "type": "Array",
            "default": "[str]",
            "class": "Content",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\content.js",
            "line": 23,
            "description": "The number of items in the \"elements\" property",
            "itemtype": "method",
            "name": "length",
            "return": {
                "description": "",
                "type": "Integer"
            },
            "class": "Content",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\content.js",
            "line": 32,
            "description": "Gets the element with index \"pos\". If it does not exist, null is returned.",
            "itemtype": "method",
            "name": "getElem",
            "params": [
                {
                    "name": "pos",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Mixed"
            },
            "class": "Content",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\content.js",
            "line": 42,
            "description": "Gets the first element. Delegates to Content::getElem(0)",
            "itemtype": "method",
            "name": "getFirst",
            "return": {
                "description": "",
                "type": "Mixed"
            },
            "class": "Content",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\content.js",
            "line": 51,
            "description": "Gets the last element. Delegates to Content::getElem()",
            "itemtype": "method",
            "name": "getLast",
            "return": {
                "description": "",
                "type": "Mixed"
            },
            "class": "Content",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\content.js",
            "line": 63,
            "description": "Inserts element at position pos inside the array of elements. If the lenght of array \"elements\"\nis equal to N, than the allowed position index is inside the range [0, 1, ..., N]. If the given\nposition index is outside that range, an error is thrown. If the position index is equal to N\n(that corresponds to appending the element), then Content::appendElem is called.",
            "itemtype": "method",
            "name": "insertElemAt",
            "params": [
                {
                    "name": "pos",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "elem",
                    "description": "",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Content",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\content.js",
            "line": 87,
            "description": "Appends element to the array of Content::elements.",
            "itemtype": "method",
            "name": "appendElem",
            "params": [
                {
                    "name": "elem",
                    "description": "",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Content",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\content.js",
            "line": 98,
            "description": "Drops the element at the given position and returns it. If element at the position does not exist,\nan error is thrown.",
            "itemtype": "method",
            "name": "dropElemAt",
            "params": [
                {
                    "name": "pos",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Mixed"
            },
            "class": "Content",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\content.js",
            "line": 114,
            "description": "Transforms the object into html form. Object-type entries of the \"elements\" property,\nshould have `toHtml()` method in order the html string to be generated. If it has no\n`toHtml()`, then html comment `<!--- ... -->` will be generated.",
            "itemtype": "method",
            "name": "toHtml",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Content",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\content.js",
            "line": 142,
            "description": "Text representation of the content. Object-type entries of the \"elements\" property,\nshould have `toText()` method in order the html string to be generated. If it has no\n`toText()`, then this object will be ignored.",
            "itemtype": "method",
            "name": "toText",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Content",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\helpers.js",
            "line": 11,
            "description": "Converts the first letter of the string into the upper case\nIf the string is empty, the output is empty string as well.",
            "itemtype": "method",
            "name": "firstLetterUpperCase",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Helper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\helpers.js",
            "line": 22,
            "description": "Converts the first letter of the string into the upper case\nIf the string is empty, the output is empty string as well.",
            "itemtype": "method",
            "name": "onlyFirstLetterUpperCase",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Helper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\helpers.js",
            "line": 34,
            "description": "transforms each element of the input array into a non-negative number.\nIf an element is negative, its absolute value is used.\nIf an element fails to be converted to a number, it is substituted by zero.",
            "itemtype": "method",
            "name": "sanitize",
            "example": [
                "   [1.1, 2.4, 2] -> [1.1, 2.4, 2],\n           [\"4\", -3, 3.2, \"a\"] -> [4, 3, 3.2, 0]"
            ],
            "params": [
                {
                    "name": "arr",
                    "description": "array of numbers",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "array of numbers",
                "type": "Array"
            },
            "class": "Helper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\helpers.js",
            "line": 54,
            "description": "calculates the sum the array elements. The elements are supposed to be numbers. Otherwise nothing is guaranteed.",
            "itemtype": "method",
            "name": "trace",
            "example": [
                "     [1, 2, 2] -> 1 + 2 + 2 = 5"
            ],
            "params": [
                {
                    "name": "arr",
                    "description": "array of numbers",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Helper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\helpers.js",
            "line": 71,
            "description": "normalizes the array. If all elements are equal to zero, then the elements are to be normallized uniformally.\nIf not all the elements are equal to zero, but the trace is equal to zero, then the input array is returned.",
            "itemtype": "method",
            "name": "normalize",
            "example": [
                "     [1, 3, 4]       -> [ 0.125, 0.375, 0.5 ]",
                "     [2, 0, -1, -1]  -> [ 2, 0, -1, -1 ]",
                "     [0, 0]          -> [ 0.5, 0.5]"
            ],
            "params": [
                {
                    "name": "Array",
                    "description": "of numbers",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "array of numbers",
                "type": "Array"
            },
            "class": "Helper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\helpers.js",
            "line": 105,
            "description": "Slices the first argument according to the weights given by the second argument.\nThe elements of the second array are supposed to be non-negative numbers.",
            "itemtype": "method",
            "name": "splitWeighted",
            "example": [
                "   (10, [1, 2, 2])    -> [2, 4, 4],\n           (30, [4, 2, 3, 1]) -> [12, 6, 9, 3]"
            ],
            "params": [
                {
                    "name": "overall",
                    "description": "a number to be splitted",
                    "type": "Number"
                },
                {
                    "name": "pieces",
                    "description": "array of weigths",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "array of numbers",
                "type": "Array"
            },
            "class": "Helper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\helpers.js",
            "line": 127,
            "description": "rounds each elements of the array",
            "itemtype": "method",
            "name": "roundUp",
            "example": [
                " [1, 2.2, 5.6, 0, 4.5] -> [1, 2, 6, 0, 5]"
            ],
            "params": [
                {
                    "name": "arr",
                    "description": "array of numbers",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "array of integers",
                "type": "Array"
            },
            "class": "Helper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\helpers.js",
            "line": 141,
            "description": "composition of roundUp and splitWeighted",
            "itemtype": "method",
            "name": "columnWidths",
            "params": [
                {
                    "name": "overall",
                    "description": "table width",
                    "type": "Number"
                },
                {
                    "name": "pieces",
                    "description": "array of nambers",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "array of integers",
                "type": "Array"
            },
            "class": "Helper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\helpers.js",
            "line": 153,
            "description": "Deletes the protocol name from the url.\nEverything until the first occurence of '://' will be removed (inclusively).",
            "itemtype": "method",
            "name": "dropProtocol",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                }
            ],
            "example": [
                "  'http://www.test.com'      -> 'www.test.com'",
                "  'www.test.com'             -> 'www.test.com'"
            ],
            "return": {
                "description": "url without protocol name",
                "type": "String"
            },
            "class": "Helper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\helpers.js",
            "line": 169,
            "description": "Gives file extension.",
            "itemtype": "method",
            "name": "fileExt",
            "params": [
                {
                    "name": "fileName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Helper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\helpers.js",
            "line": 180,
            "description": "Gives the validated width. If the width is given in \"px\" or \"pt\", the integer part is given.\nIf the length is given in \"em\" or \"%\", it is left as it is.",
            "itemtype": "method",
            "name": "validateWidth",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Helper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\helpers.js",
            "line": 208,
            "description": "Replaces special characters present in the input string by their unicodes. It is supposed to replace symbols like à, ò, è, é\nand not a, b, c etc. For the moment it replaces any characters which unicode is outside the range [32, 125].",
            "itemtype": "method",
            "name": "specialChar",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Helper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\helpers.js",
            "line": 236,
            "description": "Splits array element at position \"pos\" in two parts in such a way that the trace of the original array\nis equal to the trace of the output array. If it is the first element of the array to be splitted, then\nit is splitted in 1/2 and 1/2 (up to the truncation). If the element has a left neighbour, then the neighbour\nand the element are taken off 1/3 and these two parts are given to the newly created element that is inserted\nbetween the neighbour and the element: [a, b, ...] -> [2/3 a, 1/3 (a + b), 2/3 b, ...]",
            "itemtype": "method",
            "name": "crack",
            "params": [
                {
                    "name": "arr",
                    "description": "array of integers",
                    "type": "Array"
                },
                {
                    "name": "pos",
                    "description": "index of the element, before which an element will be inserted",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "array of integers",
                "type": "Array"
            },
            "class": "Helper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\helpers.js",
            "line": 276,
            "description": "Flatten the object. This function was written because Node::attributes returns attributes in format.",
            "itemtype": "method",
            "name": "flatten",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "example": [
                " {'1': {name: \"width\", value:\"100\", ...}, '2': {name: \"color\", value:\"black\", ...}, ...} -> {\"width\":\"100\", \"color\":\"black\", ...}"
            ],
            "class": "Helper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\helpers.js",
            "line": 296,
            "description": "Sandwiches the midlle string with the left and the right ones. If the middle one is empty, empty string is returned.\nIf the right arguments is not given, the left one is used.",
            "itemtype": "method",
            "name": "sandwichWith",
            "params": [
                {
                    "name": "left",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "middle",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "right",
                    "description": "",
                    "type": "String"
                }
            ],
            "type": "String|Null",
            "return": {
                "description": "",
                "type": "String|Null"
            },
            "class": "Helper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\helpers.js",
            "line": 315,
            "description": "Glues all elements of the array, replace trailing spaces and repaces multiple spaces with a single one.",
            "itemtype": "method",
            "name": "concatDropSpaces",
            "params": [
                {
                    "name": "arr",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "glue",
                    "description": "glue string",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Helper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\helpers.js",
            "line": 329,
            "description": "Generates a string that can be used as id for the elements of the target string. This means that\nthe generated string must be not present among id's of the elements of the target string. The argument\nserves as a hint to create the id: if the hint string is available as id, it will be returned. Otherwise,\na random symbol from 0-9, a-z will be appended to the hint string until it becomes a valid id.",
            "itemtype": "method",
            "name": "generateId",
            "params": [
                {
                    "name": "seed",
                    "description": "",
                    "type": "String|Null"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Helper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\link.js",
            "line": 18,
            "description": "Link attributes.",
            "itemtype": "property",
            "name": "attr",
            "type": "{LinkAttributes}",
            "class": "Link",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\link.js",
            "line": 30,
            "description": "link styles.",
            "itemtype": "property",
            "name": "style",
            "type": "{LinkStyles}",
            "class": "Link",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\link.js",
            "line": 37,
            "description": "Href getter. Calles {{#crossLink \"LinkAttributes/getHref:method\"}}LinkAttributes::getHref(){{/crossLink}}",
            "itemtype": "method",
            "name": "getHref",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Link",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\link.js",
            "line": 46,
            "description": "Href setter. Calles method {{#crossLink \"LinkAttributes/setHref:method\"}}LinkAttributes::setHref(){{/crossLink}}",
            "itemtype": "method",
            "name": "setHref",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Link",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\list.js",
            "line": 20,
            "description": "Array of allowed values for the tag names: ['ol', 'ul'].",
            "itemtype": "property",
            "name": "allowedNames",
            "type": "{Array}",
            "access": "private",
            "tagname": "",
            "class": "List",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\list.js",
            "line": 28,
            "description": "Styles corresponding to the list as a whole object.",
            "itemtype": "property",
            "name": "style",
            "type": "ListStyle",
            "class": "List",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\list.js",
            "line": 34,
            "description": "Html tag corresponding to List object. It is taken from the name provided\nwhen creating the object: list = new List('ul'). If not provided or  if it\nis provided, but it is not allowed, then the first allowed value is used.",
            "itemtype": "property",
            "name": "name",
            "type": "{String}",
            "default": "'ol'",
            "class": "List",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\list.js",
            "line": 44,
            "description": "Gets the number of the list items",
            "itemtype": "method",
            "name": "itemNum",
            "return": {
                "description": "an integer number",
                "type": "Number"
            },
            "class": "List",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\list.js",
            "line": 53,
            "description": "Appends an object to the list items. The object must be a ListItem instance.\nIf not, an error is thrown.",
            "itemtype": "method",
            "name": "appendItem",
            "params": [
                {
                    "name": "item",
                    "description": "an instance of ListItem",
                    "type": "ListItem"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "List",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\list.js",
            "line": 67,
            "description": "Inserts the item at the given position. If the item to insert is a ListItem instance, then\nContent::insertElemAt() is called. Otherwise, an error is thrown.",
            "itemtype": "method",
            "name": "isertItemAt",
            "params": [
                {
                    "name": "pos",
                    "description": "index of the position of there to insert the item",
                    "type": "Number"
                },
                {
                    "name": "item",
                    "description": "item to insert",
                    "type": "ListItem"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "List",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\listItem.js",
            "line": 19,
            "description": "List item html tag.",
            "itemtype": "property",
            "name": "name",
            "type": "{String}",
            "default": "'li'",
            "class": "ListItem",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\listItem.js",
            "line": 27,
            "description": "List item styles",
            "itemtype": "property",
            "name": "style",
            "type": "{ListItemStyle}",
            "default": "ListItemStyle()",
            "class": "ListItem",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\listItem.js",
            "line": 35,
            "description": "Appends the element to the content of the list item.",
            "itemtype": "method",
            "name": "appendElem",
            "params": [
                {
                    "name": "elem",
                    "description": "",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "ListItem",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\property.js",
            "line": 21,
            "description": "Fill in the properties with the values from the argument if any.\nSplits the argument according to tha pattern \"key: value;\"",
            "class": "Property",
            "module": "Property"
        },
        {
            "file": "js\\classes\\property.js",
            "line": 57,
            "description": "Gets the number of properties of the object (all properties to which the object\nresponds and that are not of function type).",
            "itemtype": "method",
            "name": "propNum",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Property",
            "module": "Property"
        },
        {
            "file": "js\\classes\\property.js",
            "line": 74,
            "description": "Compares properties of the target and with the proprties of the argument.\nReturns true, if they are pair-wise the same (key of the target is present among argument keys, and the values are equal).\nOtherwise, false is returned. When making comparison, all methods are ignored.",
            "itemtype": "method",
            "name": "isTheSameAs",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Property",
            "module": "Property"
        },
        {
            "file": "js\\classes\\property.js",
            "line": 97,
            "description": "Appends property. Converts the argument to a Property and appends it to the target one.\nProperties with the same name will be overridden.",
            "itemtype": "method",
            "name": "appendProperty",
            "params": [
                {
                    "name": "prop",
                    "description": "it will be converted into a Property object and then appended to the target object.",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Property",
            "module": "Property"
        },
        {
            "file": "js\\classes\\row.js",
            "line": 19,
            "description": "Type of the object. Return \"Row\" for the objects of this type.",
            "itemtype": "method",
            "name": "getType",
            "type": "String",
            "return": {
                "description": "",
                "type": "String"
            },
            "deprecated": true,
            "deprecationMessage": "in favour of getName()",
            "class": "Row",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\row.js",
            "line": 29,
            "description": "Html tag corresponding to Row instances.",
            "itemtype": "property",
            "name": "name",
            "type": "{String}",
            "default": "td",
            "class": "Row",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\row.js",
            "line": 37,
            "description": "Styles of the row.",
            "itemtype": "property",
            "name": "style",
            "type": "{TableCellStyle}",
            "default": "TableRowStyle",
            "class": "Row",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\row.js",
            "line": 45,
            "description": "Gets an array of the widths of the cells inside the row.",
            "itemtype": "method",
            "name": "getCellWidths",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Row",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\row.js",
            "line": 60,
            "description": "Alias for length() method of the parent class.",
            "itemtype": "method",
            "name": "cellNum",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Row",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\row.js",
            "line": 69,
            "description": "Sets widths of the cells inside the row.",
            "itemtype": "method",
            "name": "setCellWidths",
            "params": [
                {
                    "name": "profile",
                    "description": "each elements if this array is a width of the corresp. cell in the row.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Row",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\row.js",
            "line": 86,
            "description": "Inserts a cell into a given position. If the object to insert is a Cell instance,\nthen parent method insertElemAt is called. Otherwise, an error is thrown.",
            "itemtype": "method",
            "name": "insertCellAt",
            "params": [
                {
                    "name": "cell",
                    "description": "a cell to insert. If not a Cell instance, an error will be thrown.",
                    "type": "Cell"
                },
                {
                    "name": "pos",
                    "description": "position at which the cell is to be inserted.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Row",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\row.js",
            "line": 101,
            "description": "Appends a cell to the row cells. If one tries to append a non-Cell object, an exception is thrown.\nOtherwise, a method appendElem of the parent class is called.",
            "itemtype": "method",
            "name": "appendCell",
            "params": [
                {
                    "name": "cell",
                    "description": "a cell to be appended. If not a Cell instance, an error is thrown.",
                    "type": "Cell"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Row",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\row.js",
            "line": 115,
            "description": "Returns true if the row contains only one cell and this cell contains only one element\nthat is a Table() instance. Otherwise, false is returned.",
            "itemtype": "method",
            "name": "onlyTableInside",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Row",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\row.js",
            "line": 129,
            "description": "Alias for dropElemAt().",
            "itemtype": "method",
            "name": "dropCellAt",
            "params": [
                {
                    "name": "pos",
                    "description": "index of the cell to de dropped out.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Row",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\row.js",
            "line": 139,
            "description": "12/02/2014 11:55: dropCell --> knockOutCell\nDrops the cell at the given position and resizes the remaining cells. If the cell is utmost left, the freed space is then\nassigned to its right neighbour:\n|xxx| a | b   | c | -> |     a | b   | c |\n| a |xxx| b   | c | -> | a |     b   | c |\nIf there is no right neighbour, then it is assigned to the left one:\n| a | b | c | xxx | -> | a | b | c       |\nIf the cell to delete does not exist, nothing is performed.",
            "itemtype": "method",
            "name": "knockOutCell",
            "params": [
                {
                    "name": "cellNum",
                    "description": "cell number to delete. Numeration starts with 0.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "after",
                "type": "Void"
            },
            "class": "Row",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\row.js",
            "line": 172,
            "description": "dropCell was renamed into Row::knockOutCell(). So, this method is added for back-compatibility .",
            "itemtype": "method",
            "name": "dropCell",
            "params": [
                {
                    "name": "cellNum",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "deprecated": true,
            "deprecationMessage": "Use Row::knockOutCell() directly.",
            "class": "Row",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\row.js",
            "line": 185,
            "description": "Appends style to a given cell of the row. Alias for Tag::appendStyleToElemAt().",
            "itemtype": "method",
            "name": "appendStyleToCellAt",
            "params": [
                {
                    "name": "cellNum",
                    "description": "index of the target cell",
                    "type": "Number"
                },
                {
                    "name": "stl",
                    "description": "style to be appended",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Row",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\row.js",
            "line": 196,
            "description": "Populates the attributes from a string that is an html repersentation of some row.\nIt takes a string that is an html representation of a row and update current object\nparameters such that it will correspond to the html representation.\nIn other words, (new Row()).loadFromHtml(htmlString).toHtml() should be similar to htmlString\n(eventually up to presence/absence of some parameters and attributes).",
            "itemtype": "method",
            "name": "loadFromHtml",
            "params": [
                {
                    "name": "htmlStr",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "deprecated": true,
            "deprecationMessage": "in favour of String::createRowFromHtml()",
            "class": "Row",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\row.js",
            "line": 228,
            "description": "If the row corresponds to a framed row (a row for which method\n__Row::onlyTableInside()__ returns true), then style of the cell is returned,\nnull otherwise. This is an alias for __Row::getBogusCellProp('style')__.",
            "itemtype": "method",
            "name": "getBogusCellStyle",
            "return": {
                "description": "",
                "type": "Style|null"
            },
            "class": "Row",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\row.js",
            "line": 239,
            "description": "If the row corresponds to a framed row (a row for which method\n__Row::onlyTableInside()__ returns true), then cell attributes object is returned,\nnull otherwise. This is an alias for __Row::getBogusCellProp('attr')__.",
            "itemtype": "method",
            "name": "getBogusCellAttr",
            "return": {
                "description": "",
                "type": "Attributes|null"
            },
            "class": "Row",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\row.js",
            "line": 250,
            "description": "If the row corresponds to a framed row (a row for which method\n__Row::onlyTableInside()__ returns true), then requested property the cell inside the row is returned,\nnull otherwise.",
            "itemtype": "method",
            "name": "getBogusCellProp",
            "params": [
                {
                    "name": "prop",
                    "description": "name of the property to return (intended values: \"style\" or \"attr\")",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Row",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\row.js",
            "line": 262,
            "description": "If the row corresponds to a framed row (a row for which method __Row::onlyTableInside()__\nreturns true), then requested property name of the table inside the cell inside the row is returned,\nnull otherwise.",
            "itemtype": "method",
            "name": "getBogusTableProp",
            "params": [
                {
                    "name": "prop",
                    "description": "name of the property to return (intended values: \"style\" or \"attr\")",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Object|null"
            },
            "class": "Row",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\row.js",
            "line": 276,
            "description": "If the row corresponds to a framed row (a row for which method __Row::onlyTableInside()__\nreturns true), then style of the table inside the cell is returned, null otherwise.\nThis is an alias for __Row::getBogusTableProp('style')__.",
            "itemtype": "method",
            "name": "getBogusTableStyle",
            "return": {
                "description": "",
                "type": "Style|null"
            },
            "class": "Row",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\row.js",
            "line": 287,
            "description": "If the row corresponds to a framed row (a row for which method __Row::onlyTableInside()__\nreturns true), then attribute of the table inside the cell is returned, null otherwise.\nThis is an alias for __Row::getBogusTableProp('attr')__.",
            "itemtype": "method",
            "name": "getBogusTableAttr",
            "return": {
                "description": "",
                "type": "Attributes|null"
            },
            "class": "Row",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\string.js",
            "line": 15,
            "description": "Transforms a cell-html string into Cell object. It is supposed that the string to process is of the\nfollowing form: `<td ... > ... </td>`. Inside the tag, there might be other nodes. If they are recognized\nas a \"supported\" ones, the corresponding functions will be called to transform them into objects.",
            "itemtype": "method",
            "name": "createCellFromHtml",
            "return": {
                "description": "",
                "type": "Cell|null"
            },
            "class": "StringHelper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\string.js",
            "line": 55,
            "description": "Transforms a row-html string into a Row object. It is supposed that the string to process is of the\nfollowing form: <tr ... > ... </tr>. Inside the tag, there might be elements \"td\" that will be\nprocessed one by one by function String::createCellFromHtml().",
            "itemtype": "method",
            "name": "createRowFromHtml",
            "return": {
                "description": "Row",
                "type": "Object"
            },
            "class": "StringHelper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\string.js",
            "line": 101,
            "description": "Creates an object representation from a string that is an html repersentation of a table.\nOnly one table is supposed to be processed at a time, so the string to be processed is to\nbe of the following form `<table ...> ... </table>`. Inside the tag, there should be tags \"tr\"\nthat will be processed one by one by function String::createRowFromHtml().",
            "itemtype": "method",
            "name": "createTableFromHtml",
            "return": {
                "description": "",
                "type": "Table|null"
            },
            "class": "StringHelper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\string.js",
            "line": 153,
            "description": "Transforms a list string into a List object. The argument listType is used to initialize the\nproperty \"name\" of the returned instance. If it is not provided, that the node tag-name property is used.\nIt is supposed that the string to process is of the following form:\n`<ol ... > ... </ol>` or `<ul ... > ... </ul>`.\nInside the tag, there might be other nodes. If they are recognized as a \"supported\" ones, the\ncorresponding functions will be called to transform them into objects.",
            "itemtype": "method",
            "name": "createListFromHtml",
            "params": [
                {
                    "name": "listType:",
                    "description": "ul or li",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "List|null"
            },
            "class": "StringHelper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\string.js",
            "line": 203,
            "description": "Calls String::createListFromHtml('ul') on the target string.",
            "itemtype": "method",
            "name": "createUlFromHtml",
            "return": {
                "description": "",
                "type": "List|null"
            },
            "class": "StringHelper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\string.js",
            "line": 213,
            "description": "Calls String::createListFromHtml('ol') on the target string.",
            "itemtype": "method",
            "name": "createOlFromHtml",
            "return": {
                "description": "",
                "type": "List|null"
            },
            "class": "StringHelper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\string.js",
            "line": 222,
            "description": "Transforms a list item string into a ListItem object. It is supposed that the string to process is of the\nfollowing form: `<li ... > ... </li>`. Inside the tag, there might be other nodes. If they are recognized\nas a \"supported\" ones, the corresponding functions will be called to transform them into objects.",
            "itemtype": "method",
            "name": "createListItemFromHtml",
            "return": {
                "description": "",
                "type": "ListItem|null"
            },
            "class": "StringHelper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\string.js",
            "line": 278,
            "description": "Creates an instance of Tag class and fills in its property \"elements\" with\nthe elements recognized inside the string. It is supposed that the string is of the\nform `<tag [tag-attributes] [style=\"...\"]>....</tag>`.",
            "itemtype": "method",
            "name": "createTagFromHtml",
            "return": {
                "description": "",
                "type": "Content|null"
            },
            "class": "StringHelper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\string.js",
            "line": 334,
            "description": "Creates an instance of Link class and fills in its property \"elements\" with\nthe elements recognized inside the string. It is supposed that the string is of the\nform `<tag [tag-attributes] [style=\"...\"]>....</tag>`.",
            "itemtype": "method",
            "name": "createLinkFromHtml",
            "return": {
                "description": "",
                "type": "Link|null"
            },
            "class": "StringHelper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\style.js",
            "line": 17,
            "description": "Generates string representation of this object (as html inline style).\nIt takse into consideration only string- and number-valued properties. The rest is ignored.\nIf attribite value is a number, the measurement unit will be appended.",
            "itemtype": "method",
            "name": "toString",
            "params": [
                {
                    "name": "unit",
                    "description": "mesurement unit to be added to the numerical attribute values. By default, it is set to 'px'.",
                    "type": "String|null"
                }
            ],
            "return": {
                "description": "String   union of substrings; each substring is of this format: 'attribute: value;',\n                                  between the substrings there is a separator ' '.",
                "type": "String"
            },
            "example": [
                " \"padding: 0px; margin: 10px; color: #ababab\""
            ],
            "class": "Style",
            "module": "Property"
        },
        {
            "file": "js\\classes\\style.js",
            "line": 47,
            "description": "Appends style. Alias for the parent method Property::appendProperty()",
            "itemtype": "method",
            "name": "appendStyle",
            "params": [
                {
                    "name": "stl",
                    "description": "it will be passed to the parent method",
                    "type": "Object|null"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Style",
            "module": "Property"
        },
        {
            "file": "js\\classes\\style.js",
            "line": 58,
            "description": "Imposes the width, min-width and max-width.",
            "itemtype": "method",
            "name": "setWidth",
            "params": [
                {
                    "name": "w",
                    "description": "value of width.",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Style",
            "module": "Property"
        },
        {
            "file": "js\\classes\\style.js",
            "line": 70,
            "description": "Returns object {width: ..., color: ..., style: ...} describing border. If the Style has no property\n'border-style', then 'none' will be used. If the Style has no 'border-width', then zero will be used.\nIf the Style has no property 'border-color', then it will not be set.",
            "itemtype": "method",
            "name": "getBorderInfo",
            "return": {
                "description": "object of the form {'width': ..., 'color': ..., 'style': ...}",
                "type": "Object"
            },
            "class": "Style",
            "module": "Property"
        },
        {
            "file": "js\\classes\\style.js",
            "line": 103,
            "description": "Color of the border table",
            "itemtype": "property",
            "name": "border-color",
            "type": "String",
            "default": "\"#FFFFFF\"",
            "class": "TableStyle",
            "module": "Property"
        },
        {
            "file": "js\\classes\\style.js",
            "line": 109,
            "description": "Style of the border table. See html manuals for possible values.",
            "itemtype": "property",
            "name": "border-style",
            "type": "String",
            "default": "\"none\"",
            "class": "TableStyle",
            "module": "Property"
        },
        {
            "file": "js\\classes\\style.js",
            "line": 115,
            "description": "Width of the border table.",
            "itemtype": "property",
            "name": "border-width",
            "type": "String|Number",
            "default": "0",
            "class": "TableStyle",
            "module": "Property"
        },
        {
            "file": "js\\classes\\style.js",
            "line": 121,
            "description": "Margin of the table.",
            "itemtype": "property",
            "name": "margin",
            "type": "String|Number",
            "default": "0",
            "class": "TableStyle",
            "module": "Property"
        },
        {
            "file": "js\\classes\\style.js",
            "line": 127,
            "description": "Padding of the table.",
            "itemtype": "property",
            "name": "padding",
            "type": "String|Number",
            "default": "0",
            "class": "TableStyle",
            "module": "Property"
        },
        {
            "file": "js\\classes\\style.js",
            "line": 133,
            "description": "Table width.",
            "itemtype": "property",
            "name": "width",
            "type": "String|Number",
            "default": "0",
            "class": "TableStyle",
            "module": "Property"
        },
        {
            "file": "js\\classes\\style.js",
            "line": 139,
            "description": "Table maximal width. It is supposed to be equal to \"width\" property.",
            "itemtype": "property",
            "name": "max-width",
            "type": "String|Number",
            "default": "0",
            "class": "TableStyle",
            "module": "Property"
        },
        {
            "file": "js\\classes\\style.js",
            "line": 145,
            "description": "Table minimal width. It is supposed to be equal to \"width\" property.",
            "itemtype": "property",
            "name": "min-width",
            "type": "String|Number",
            "default": "0",
            "class": "TableStyle",
            "module": "Property"
        },
        {
            "file": "js\\classes\\style.js",
            "line": 152,
            "description": "Whether to collapse the table borders or not.",
            "deprecated": true,
            "deprecationMessage": "Do not use, because it causes problems in MS Outlook.",
            "itemtype": "property",
            "name": "border-collapse",
            "type": "String",
            "default": "0",
            "class": "TableStyle",
            "module": "Property"
        },
        {
            "file": "js\\classes\\style.js",
            "line": 159,
            "description": "Border spacing.",
            "itemtype": "property",
            "name": "border-spacing",
            "type": "String",
            "default": "'0px 0px'",
            "class": "TableStyle",
            "module": "Property"
        },
        {
            "file": "js\\classes\\style.js",
            "line": 181,
            "description": "Text decoration attribute",
            "itemtype": "property",
            "name": "text-decoration",
            "type": "String",
            "default": "\"underline\"",
            "class": "LinkStyle",
            "module": "Property"
        },
        {
            "file": "js\\classes\\style.js",
            "line": 188,
            "description": "Font size",
            "itemtype": "property",
            "name": "font size",
            "type": "String|Integer",
            "default": "12",
            "class": "LinkStyle",
            "module": "Property"
        },
        {
            "file": "js\\classes\\style.js",
            "line": 194,
            "description": "Font color attribute",
            "itemtype": "property",
            "name": "font color",
            "type": "String",
            "default": "\"blue\"",
            "class": "LinkStyle",
            "module": "Property"
        },
        {
            "file": "js\\classes\\style.js",
            "line": 200,
            "description": "Font wieght attribute. See html manuals for possible values.",
            "itemtype": "property",
            "name": "font weight",
            "type": "String|Integer",
            "default": "\"normal\"",
            "class": "LinkStyle",
            "module": "Property"
        },
        {
            "file": "js\\classes\\style.js",
            "line": 206,
            "description": "Padding.",
            "itemtype": "property",
            "name": "padding",
            "type": "String|Number",
            "default": "0",
            "class": "LinkStyle",
            "module": "Property"
        },
        {
            "file": "js\\classes\\style.js",
            "line": 212,
            "description": "Margin.",
            "itemtype": "property",
            "name": "margin",
            "type": "String|Number",
            "default": "0",
            "class": "LinkStyle",
            "module": "Property"
        },
        {
            "file": "js\\classes\\style.js",
            "line": 233,
            "description": "Color of the border table",
            "itemtype": "property",
            "name": "border-color",
            "type": "String",
            "default": "\"#FFFFFF\"",
            "class": "TableRowStyle",
            "module": "Property"
        },
        {
            "file": "js\\classes\\style.js",
            "line": 239,
            "description": "Style of the border table. See html manuals for possible values.",
            "itemtype": "property",
            "name": "border-style",
            "type": "String",
            "default": "\"none\"",
            "class": "TableRowStyle",
            "module": "Property"
        },
        {
            "file": "js\\classes\\style.js",
            "line": 245,
            "description": "Width of the border table.",
            "itemtype": "property",
            "name": "border-width",
            "type": "String|Number",
            "default": "0",
            "class": "TableRowStyle",
            "module": "Property"
        },
        {
            "file": "js\\classes\\style.js",
            "line": 251,
            "description": "Margin of the table.",
            "itemtype": "property",
            "name": "margin",
            "type": "String|Number",
            "default": "0",
            "class": "TableRowStyle",
            "module": "Property"
        },
        {
            "file": "js\\classes\\style.js",
            "line": 257,
            "description": "Padding of the table.",
            "itemtype": "property",
            "name": "padding",
            "type": "String|Number",
            "default": "0",
            "class": "TableRowStyle",
            "module": "Property"
        },
        {
            "file": "js\\classes\\style.js",
            "line": 263,
            "description": "Table width.",
            "itemtype": "property",
            "name": "width",
            "type": "String|Number",
            "default": "0",
            "class": "TableRowStyle",
            "module": "Property"
        },
        {
            "file": "js\\classes\\style.js",
            "line": 269,
            "description": "Table maximal width. It is supposed to be equal to \"width\" property.",
            "itemtype": "property",
            "name": "max-width",
            "type": "String|Number",
            "default": "0",
            "class": "TableRowStyle",
            "module": "Property"
        },
        {
            "file": "js\\classes\\style.js",
            "line": 275,
            "description": "Table minimal width. It is supposed to be equal to \"width\" property.",
            "itemtype": "property",
            "name": "min-width",
            "type": "String|Number",
            "default": "0",
            "class": "TableRowStyle",
            "module": "Property"
        },
        {
            "file": "js\\classes\\style.js",
            "line": 296,
            "description": "Color of the border table",
            "itemtype": "property",
            "name": "border-color",
            "type": "String",
            "default": "\"#FFFFFF\"",
            "class": "TableCellStyle",
            "module": "Property"
        },
        {
            "file": "js\\classes\\style.js",
            "line": 302,
            "description": "Style of the border table. See html manuals for possible values.",
            "itemtype": "property",
            "name": "border-style",
            "type": "String",
            "default": "\"none\"",
            "class": "TableCellStyle",
            "module": "Property"
        },
        {
            "file": "js\\classes\\style.js",
            "line": 308,
            "description": "Width of the border table.",
            "itemtype": "property",
            "name": "border-width",
            "type": "String|Number",
            "default": "\"0px\"",
            "class": "TableCellStyle",
            "module": "Property"
        },
        {
            "file": "js\\classes\\style.js",
            "line": 314,
            "description": "Padding.",
            "itemtype": "property",
            "name": "padding",
            "type": "String|Number",
            "default": "0",
            "class": "TableCellStyle",
            "module": "Property"
        },
        {
            "file": "js\\classes\\style.js",
            "line": 320,
            "description": "Margin.",
            "itemtype": "property",
            "name": "margin",
            "type": "String|Number",
            "default": "0",
            "class": "TableCellStyle",
            "module": "Property"
        },
        {
            "file": "js\\classes\\style.js",
            "line": 326,
            "description": "Table width.",
            "itemtype": "property",
            "name": "width",
            "type": "String|Number",
            "default": "0",
            "class": "TableCellStyle",
            "module": "Property"
        },
        {
            "file": "js\\classes\\style.js",
            "line": 332,
            "description": "Table minimal width. It is supposed to be equal to \"width\" property.",
            "itemtype": "property",
            "name": "max-width",
            "type": "String|Number",
            "default": "0",
            "class": "TableCellStyle",
            "module": "Property"
        },
        {
            "file": "js\\classes\\style.js",
            "line": 338,
            "description": "Table minimal width. It is supposed to be equal to \"width\" property.",
            "itemtype": "property",
            "name": "min-width",
            "type": "String|Number",
            "default": "0",
            "class": "TableCellStyle",
            "module": "Property"
        },
        {
            "file": "js\\classes\\style.js",
            "line": 344,
            "description": "Vertical align of the cell content.",
            "itemtype": "property",
            "name": "vertical-align",
            "type": "String",
            "default": "0",
            "class": "TableCellStyle",
            "module": "Property"
        },
        {
            "file": "js\\classes\\style.js",
            "line": 350,
            "description": "Font color",
            "itemtype": "property",
            "name": "color",
            "type": "String",
            "default": "\"#000001\". NB: Gmail removes color tags corresponding to the black color, so use #000001 instead of #000000.",
            "class": "TableCellStyle",
            "module": "Property"
        },
        {
            "file": "js\\classes\\style.js",
            "line": 371,
            "description": "Width of the border around the image.",
            "itemtype": "property",
            "name": "border-width",
            "type": "String|Number",
            "default": "0",
            "class": "ImageStyle",
            "module": "Property"
        },
        {
            "file": "js\\classes\\style.js",
            "line": 377,
            "description": "Style of the border around the image. See html manuals for possible values.",
            "itemtype": "property",
            "name": "border-style",
            "type": "String",
            "default": "\"none\"",
            "class": "ImageStyle",
            "module": "Property"
        },
        {
            "file": "js\\classes\\style.js",
            "line": 383,
            "description": "Color of the border around the image.",
            "itemtype": "property",
            "name": "border-color",
            "type": "String",
            "default": "\"#FFFFFF\"",
            "class": "ImageStyle",
            "module": "Property"
        },
        {
            "file": "js\\classes\\style.js",
            "line": 389,
            "description": "Padding.",
            "itemtype": "property",
            "name": "padding",
            "type": "String|Number",
            "default": "0",
            "class": "ImageStyle",
            "module": "Property"
        },
        {
            "file": "js\\classes\\style.js",
            "line": 395,
            "description": "Margin.",
            "itemtype": "property",
            "name": "margin",
            "type": "String|Number",
            "default": "0",
            "class": "ImageStyle",
            "module": "Property"
        },
        {
            "file": "js\\classes\\style.js",
            "line": 401,
            "description": "Image width.",
            "itemtype": "property",
            "name": "width",
            "type": "String|Number",
            "default": "0",
            "class": "ImageStyle",
            "module": "Property"
        },
        {
            "file": "js\\classes\\style.js",
            "line": 407,
            "description": "Image height.",
            "itemtype": "property",
            "name": "height",
            "type": "String|Number",
            "default": "0",
            "class": "ImageStyle",
            "module": "Property"
        },
        {
            "file": "js\\classes\\style.js",
            "line": 428,
            "description": "Padding.",
            "itemtype": "property",
            "name": "padding",
            "type": "String|Number",
            "default": "0",
            "class": "ListStyle",
            "module": "Property"
        },
        {
            "file": "js\\classes\\style.js",
            "line": 435,
            "description": "Margin left.",
            "itemtype": "property",
            "name": "margin-left",
            "type": "String|Number",
            "default": "0",
            "class": "ListStyle",
            "module": "Property"
        },
        {
            "file": "js\\classes\\style.js",
            "line": 442,
            "description": "Margin-right.",
            "itemtype": "property",
            "name": "margin-right",
            "type": "String|Number",
            "default": "0",
            "class": "ListStyle",
            "module": "Property"
        },
        {
            "file": "js\\classes\\style.js",
            "line": 449,
            "description": "Margin-top.",
            "itemtype": "property",
            "name": "margin-top",
            "type": "String|Number",
            "default": "0",
            "class": "ListStyle",
            "module": "Property"
        },
        {
            "file": "js\\classes\\style.js",
            "line": 456,
            "description": "Margin-bottom.",
            "itemtype": "property",
            "name": "margin-bottom",
            "type": "String|Number",
            "default": "0",
            "class": "ListStyle",
            "module": "Property"
        },
        {
            "file": "js\\classes\\style.js",
            "line": 478,
            "description": "Font size of the  text in the list.",
            "itemtype": "property",
            "name": "font-size",
            "type": "String|Number",
            "default": "12",
            "class": "ListItemStyle",
            "module": "Property"
        },
        {
            "file": "js\\classes\\style.js",
            "line": 484,
            "description": "Text color of the list item content.",
            "itemtype": "property",
            "name": "color",
            "type": "{String}",
            "default": "\"#000001\". NB: Gmail removes color tags corresponding to the black color, so use #000001 instead of #000000.",
            "class": "ListItemStyle",
            "module": "Property"
        },
        {
            "file": "js\\classes\\style.js",
            "line": 492,
            "description": "Font weight. Some possible values: \"normal\", \"bold\", \"bolder\", 100, 200, ..., 900. See html manuals for more info.",
            "itemtype": "property",
            "name": "font-weight",
            "type": "String|Integer",
            "default": "\"normal\"",
            "class": "ListItemStyle",
            "module": "Property"
        },
        {
            "file": "js\\classes\\style.js",
            "line": 498,
            "description": "Padding.",
            "itemtype": "property",
            "name": "padding",
            "type": "String|Number",
            "default": "0",
            "class": "ListItemStyle",
            "module": "Property"
        },
        {
            "file": "js\\classes\\style.js",
            "line": 504,
            "description": "Margin.",
            "itemtype": "property",
            "name": "margin",
            "type": "String|Number",
            "default": "0",
            "class": "ListItemStyle",
            "module": "Property"
        },
        {
            "file": "js\\classes\\table.js",
            "line": 19,
            "description": "Type of the object. Returns \"Table\" for the objects of this type.",
            "itemtype": "method",
            "name": "getType",
            "type": "String",
            "return": {
                "description": "",
                "type": "String"
            },
            "deprecated": true,
            "deprecationMessage": "in favor of getName()",
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\table.js",
            "line": 29,
            "description": "Html tag corresponding to Table instances.",
            "itemtype": "property",
            "name": "name",
            "type": "{String}",
            "default": "table",
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\table.js",
            "line": 37,
            "description": "Attributes of the table. Overrides parent property \"attr\".",
            "itemtype": "property",
            "name": "attr",
            "type": "{TableAttributes}",
            "default": "TableAttributes",
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\table.js",
            "line": 45,
            "description": "Styles of the row. Overrides parent property \"style\".",
            "itemtype": "property",
            "name": "style",
            "type": "{TableStyle}",
            "default": "TableStyle",
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\table.js",
            "line": 53,
            "description": "The number of the rows in the table. Alias of length() of the parent class.",
            "itemtype": "method",
            "name": "rowNum",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\table.js",
            "line": 62,
            "description": "Appends a row to the content property. If the argument is not a Row instance, an error is thrown.",
            "itemtype": "method",
            "name": "appendRow",
            "params": [
                {
                    "name": "row",
                    "description": "a row to append. If not a Row instance, an error is thrown.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\table.js",
            "line": 75,
            "description": "Gives a two-dimensional array [[w_11, w_12, ..., w_1n], ..., [w_m1, w_m2, ..., w_m3]]\nwhere w_ij is width of the cell located in the row i and column j.",
            "itemtype": "method",
            "name": "getMatrix",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\table.js",
            "line": 90,
            "description": "Returns array of widths of the cells in the table rows if all rows\nhave the same cell widths. Otherwise null is returned.",
            "itemtype": "method",
            "name": "getProfile",
            "return": {
                "description": "",
                "type": "Array|Null"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\table.js",
            "line": 100,
            "description": "Imposes the widths of all cell in all rows of the table. If the argument is not array, an error is thrown.\nIf the array length is different from the number of columns, an error is thrown. Otherwise, it is called\nmethod of Row::setCellWidths on each table row.",
            "itemtype": "method",
            "name": "setProfile",
            "params": [
                {
                    "name": "profile",
                    "description": "an array of cell widths that will be applied to each row.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\table.js",
            "line": 123,
            "description": "Inserts a cell \"cell\" into a given position \"pos\" of each row of the table.\nIf the table has 5 columns, then after insertion it will have 5+1=6 columns.\nPosition \"pos\" will correspond to the index of the inserted cell in the row after insertion.\n\"pos\" must be a valid cell number into the table after insertion. So, for the example above,\nthe valid values for \"pos\" are 0, 1, 2, 3, 4 and 5.",
            "itemtype": "method",
            "name": "insertColAt",
            "params": [
                {
                    "name": "cell",
                    "description": "",
                    "type": "Cell"
                },
                {
                    "name": "pos",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\table.js",
            "line": 155,
            "description": "insertColumnAt was renamed into Table::insertColAt(). So, this method is added for back-compatibility .",
            "itemtype": "method",
            "name": "insertColumnAt",
            "params": [
                {
                    "name": "pos",
                    "description": "",
                    "type": "Pos"
                },
                {
                    "name": "cell",
                    "description": "",
                    "type": "Cell"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "deprecated": true,
            "deprecationMessage": "Use Table::insertColAt() directly.",
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\table.js",
            "line": 168,
            "description": "Knocks out given column from the table. The operation is delegated to the `Row::knockOutCell()`",
            "itemtype": "method",
            "name": "knockOutCol",
            "params": [
                {
                    "name": "colNum",
                    "description": "the number of the column to be knocked out. Numeration starts with 0.",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\table.js",
            "line": 182,
            "description": "dropColumn was renamed into Table::knockOutCol(). So, this method is added for back-compatibility .",
            "itemtype": "method",
            "name": "dropColumn",
            "params": [
                {
                    "name": "pos",
                    "description": "",
                    "type": "Pos"
                },
                {
                    "name": "cell",
                    "description": "",
                    "type": "Cell"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "deprecated": true,
            "deprecationMessage": "Use Table::knockOutCol() directly.",
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\table.js",
            "line": 196,
            "description": "Drops specified column from the table. The operation is delegated to the `Row::dropCellAt()`",
            "itemtype": "method",
            "name": "dropColAt",
            "params": [
                {
                    "name": "colNum",
                    "description": "the number of the column to delete. Numeration starts with 0.",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\table.js",
            "line": 210,
            "description": "Gives the number of columns in the table or null if not all rows have the same number of cells.\nThe operation is delegated to the `Row::cellNum()`.",
            "itemtype": "method",
            "name": "colNum",
            "return": {
                "description": "",
                "type": "Number|null"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\table.js",
            "line": 237,
            "description": "Whether all rows in the table have the same cell widths.",
            "itemtype": "method",
            "name": "isSameWidth",
            "return": {
                "description": "true, if all rows have the same cells' widths, false otherwise.",
                "type": "Boolean"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\table.js",
            "line": 273,
            "description": "Set the border of the table. It updates the properties 'attr' and 'style' of the instance:\n1. in 'style' property, sets up the following properties: 'border-width', 'border-color' and 'border-style'\n2. in 'attr' property, sets up 'border' property.\nNote that if after setting the border there is an assigment of 'style' or 'attr' property, then some info about the border might be overwritten.",
            "itemtype": "method",
            "name": "setBorder",
            "params": [
                {
                    "name": "borderInfo",
                    "description": "Object containing 'width', 'color' and 'style' for the border to set.",
                    "type": "Object"
                }
            ],
            "default": "border-width is set to 1, border-color is set to #000000, border-style is set to solid.",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\table.js",
            "line": 298,
            "description": "Removes the border of the table. It updates the properties 'attr' and 'style' of the instance:\n1. in 'style' property, deletes the properties: 'border-width', 'border-color' and sets up 'border-style' to 'none'\n2. in 'attr' property, deletes 'border' property.",
            "itemtype": "method",
            "name": "removeBorder",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\table.js",
            "line": 319,
            "description": "Returns true if the table is fragmented, and false otherwise. It takes table rows and call method\n`Row::onlyTableInside()` on each of them until first \"false\" is encountered.\n<br />A table is a __framed table__ if all table rows have only one cell and this cell contains\nonly one element that is a Table instance.",
            "itemtype": "method",
            "name": "isFragmented",
            "return": {
                "description": "true if the table is framed, and false otherwise",
                "type": "Boolean"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\table.js",
            "line": 336,
            "description": "Gives true if all table rows have border around (that is, each row is nothing but a table with border)\nfalse otherwise. If at least one of the properties, corresponding to the \"bogus\" elements is set, then\nthe table is considered as being framed and hence all its rows will be framed.",
            "itemtype": "method",
            "name": "isFramed",
            "return": {
                "description": "true, if all table rows have border around",
                "type": "Boolean"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\table.js",
            "line": 353,
            "description": "Resets bogus properties. After resetting those properties, the table becomes a table without frame.",
            "itemtype": "method",
            "name": "resetBogus",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\table.js",
            "line": 370,
            "description": "Appends the style to the column. If the column exists, the method call `Row::appendStyleToCell()`\non each of the table rows.",
            "itemtype": "method",
            "name": "appendStyleToCol",
            "params": [
                {
                    "name": "colNum",
                    "description": "column number to which the style is to be appended.",
                    "type": "Number"
                },
                {
                    "name": "style",
                    "description": "Style or Object to be appended",
                    "type": "Style|Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\table.js",
            "line": 394,
            "description": "Generates table-specific html code with corresponding attributes and styles.\nCreation of the row-related html of each row is delegated to `Row::toHtml()`",
            "itemtype": "method",
            "name": "toHtml",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\table.js",
            "line": 434,
            "description": "Style of the row containing a single cell. It is used to created to a table with framed lines.\nIt is supposed that all properties\nbogusRowStyle, bogusRowAttr, bogusCellStyle, bogusCellAttr, bogusTableStyle, bogusTableAttr\nare simultaneously null or set.",
            "itemtype": "property",
            "name": "bogusRowStyle",
            "type": "Style",
            "default": "null",
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\table.js",
            "line": 444,
            "description": "Attributes of the row containing a single cell. It is used to created to a table with framed lines.\nIt is supposed that all properties\nbogusRowStyle, bogusRowAttr, bogusCellStyle, bogusCellAttr, bogusTableStyle, bogusTableAttr\nare simultaneously null or set.",
            "itemtype": "property",
            "name": "bogusRowAttr",
            "type": "Attribute",
            "default": "null",
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\table.js",
            "line": 454,
            "description": "Style of the  the cell which fills the whole row. It is used to created to a table with framed lines.\nIt is supposed that all properties\nbogusRowStyle, bogusRowAttr, bogusCellStyle, bogusCellAttr, bogusTableStyle, bogusTableAttr\nare simultaneously null or set.",
            "itemtype": "property",
            "name": "bogusCellStyle",
            "type": "TableCellStyle",
            "default": "null",
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\table.js",
            "line": 464,
            "description": "Attributes of the  the cell which fills the whole row. It is used to created to a table with framed lines.\nIt is supposed that all properties\nbogusRowStyle, bogusRowAttr, bogusCellStyle, bogusCellAttr, bogusTableStyle, bogusTableAttr\nare simultaneously null or set.",
            "itemtype": "property",
            "name": "bogusCellAttr",
            "type": "Attribute",
            "default": "null",
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\table.js",
            "line": 474,
            "description": "Style of the  the table that will be inserted into the single cell to create a table with framed lines.\nIt is supposed that all properties\nbogusRowStyle, bogusRowAttr, bogusCellStyle, bogusCellAttr, bogusTableStyle, bogusTableAttr\nare simultaneously null or set.",
            "itemtype": "property",
            "name": "bogusTableStyle",
            "type": "TableStyle",
            "default": "null",
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\table.js",
            "line": 484,
            "description": "Attributes of the  the table that will be inserted into the single cell to create a table with framed lines.\nIt is supposed that all properties\nbogusRowStyle, bogusRowAttr, bogusCellStyle, bogusCellAttr, bogusTableStyle, bogusTableAttr\nare simultaneously null or set.",
            "itemtype": "property",
            "name": "bogusTableAttr",
            "type": "Attribute",
            "default": "null",
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\table.js",
            "line": 494,
            "description": "If the table is fragmented and all rows have the same requested property, then\nthis property of the first row is returned. In any other case, null is returned.\nNB: to compare requested property for all rows, this property must be an object\nwith boolean-valued method isTheSameAs().",
            "itemtype": "method",
            "name": "getBogusRowProp",
            "params": [
                {
                    "name": "prop",
                    "description": "a name of the property to return. All rows shiuld have this property.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the value of the property specified by the argument, if it is the same\n                                     for all rows, null otherwise.",
                "type": "Object|null"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\table.js",
            "line": 533,
            "description": "If the table is fragmented and all the rows have the same styles, then this style is returned.\nOtherwise, null is returned. This is an alias for `Table::getBogusRowProp('style')`.",
            "itemtype": "method",
            "name": "getBogusRowStyle",
            "return": {
                "description": "",
                "type": "Style|null"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\table.js",
            "line": 543,
            "description": "If the table is fragmented and all the rows have the same styles, then this style is returned.\nOtherwise, null is returned. This is an alias for `Table::getBogusRowProp('attr')`.",
            "itemtype": "method",
            "name": "getBogusRowAttr",
            "return": {
                "description": "",
                "type": "Attributes|null"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\table.js",
            "line": 553,
            "description": "If the table is fragmented, gives the requested property of the bogus cell if that property is\nthe same for all rows. Otherwise, null is returned.",
            "itemtype": "method",
            "name": "getBogusCellProp",
            "params": [
                {
                    "name": "propName",
                    "description": "requested property (supposed to be \"style\" or \"attr\")",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Object|null"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\table.js",
            "line": 580,
            "description": "If the table is fragmented, returns the style of the bogus cell if it is the same for all cells.\nOtherwise, null is returned. This is an alias for `Table::getBogusCellProp('style')`.",
            "itemtype": "method",
            "name": "getBogusCellStyle",
            "return": {
                "description": "",
                "type": "Style|null"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\table.js",
            "line": 590,
            "description": "If the table is fragmented, returns the attributes of the bogus cell if it is the same for all cells.\nOtherwise, null is returned. This is an alias for `Table::getBogusCellProp('attr')`.",
            "itemtype": "method",
            "name": "getBogusCellAttr",
            "return": {
                "description": "",
                "type": "Attributes|null"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\table.js",
            "line": 601,
            "description": "If the table is fragmented, gives the requested property of the bogus cell if that property is\nthe same for all rows. Otherwise, null is returned.",
            "itemtype": "method",
            "name": "getBogusTableProp",
            "params": [
                {
                    "name": "propName",
                    "description": "requested property (supposed to be \"style\" or \"attr\")",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Object|null"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\table.js",
            "line": 629,
            "description": "If the table is fragmented, returns the style of the bogus table if it is the same for all tables.\nOtherwise, null is returned. This is an alias for `Table::getBogusTableProp('style')`.",
            "itemtype": "method",
            "name": "getBogusTableStyle",
            "return": {
                "description": "",
                "type": "Style|null"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\table.js",
            "line": 639,
            "description": "If the table is fragmented, returns the attributes of the bogus table if it is the same for all tables.\nOtherwise, null is returned. This is an alias for `Table::getBogusTableProp('attr')`.",
            "itemtype": "method",
            "name": "getBogusTableAttr",
            "return": {
                "description": "",
                "type": "Attributes|null"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\table.js",
            "line": 650,
            "description": "If the table is fragmented, then sets up the bogus properties and rearrange content property.\nIf not, the table remains as it is.",
            "itemtype": "method",
            "name": "desintangle",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\tag.js",
            "line": 16,
            "description": "Tag name.To be set explicitely in child classes.",
            "itemtype": "property",
            "name": "name",
            "type": "String",
            "default": "null",
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\tag.js",
            "line": 23,
            "description": "Returns value of the name attribute.",
            "itemtype": "method",
            "name": "getName",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\tag.js",
            "line": 33,
            "description": "Tag attributes",
            "itemtype": "property",
            "name": "attr",
            "type": "{Attributes}",
            "default": "Attributes()",
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\tag.js",
            "line": 41,
            "description": "Attribute setter.",
            "itemtype": "method",
            "name": "setAttr",
            "params": [
                {
                    "name": "attr",
                    "description": "",
                    "type": "String|Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\tag.js",
            "line": 51,
            "description": "Appends style to the cell. Alias for Style::appendStyle().",
            "itemtype": "method",
            "name": "appendStyle",
            "params": [
                {
                    "name": "stl",
                    "description": "style to be appended",
                    "type": "Style|Obj"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\tag.js",
            "line": 66,
            "description": "Appends style to the element at position pos. It is supposed that such an element exists\nand it has a property \"style\" which is a Style instance. In this case method\nStyle::appendStyle() will be called on this element.\nOtherwise, an error is thrown.",
            "itemtype": "method",
            "name": "appendStyleToElemAt",
            "params": [
                {
                    "name": "pos",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "stl",
                    "description": "",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\tag.js",
            "line": 85,
            "description": "Tag styles",
            "itemtype": "property",
            "name": "style",
            "type": "{ListItemStyle}",
            "default": "ListItemStyle()",
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\tag.js",
            "line": 93,
            "description": "Style setter.",
            "itemtype": "method",
            "name": "setStyle",
            "params": [
                {
                    "name": "stl",
                    "description": "",
                    "type": "String|Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\tag.js",
            "line": 103,
            "description": "Retrieves requested property from the \"style\" property of the current object.",
            "itemtype": "method",
            "name": "getStyleProp",
            "params": [
                {
                    "name": "prop",
                    "description": "property name which value should be retrieved",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Any"
            },
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\tag.js",
            "line": 116,
            "description": "Imposes the value of the width of the \"attr\" and \"style\" properties. In the latter, \"min-width\"\nand \"max-width\" are imposed as well. It is better to use with an integer argument and without\nunit of measurement (as attr property should not have unit of measurement in its string representation\nwhen convirting it in html form).",
            "itemtype": "method",
            "name": "setWidth",
            "params": [
                {
                    "name": "w",
                    "description": "",
                    "type": "String|Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\tag.js",
            "line": 135,
            "description": "Gets the width of the object as it is present in the style property. It tends to return a number:\nif it is measured in \"px\", then the measurment unit is removed and the number is returned.",
            "itemtype": "method",
            "name": "getWidth",
            "return": {
                "description": "",
                "type": "Number|String"
            },
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\tag.js",
            "line": 156,
            "description": "Content of the tag.",
            "itemtype": "property",
            "name": "content",
            "type": "{Content}",
            "default": "Content()",
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\tag.js",
            "line": 164,
            "description": "Gets the element stored in property \"content\". Delegates its functionality to the class Content.",
            "itemtype": "method",
            "name": "getElem",
            "params": [
                {
                    "name": "pos",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Any"
            },
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\tag.js",
            "line": 174,
            "description": "Gets the first element stored in property \"content\". Delegates its functionality to the class Content.",
            "itemtype": "method",
            "name": "getFirst",
            "return": {
                "description": "",
                "type": "Any"
            },
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\tag.js",
            "line": 183,
            "description": "Gets the last element stored in property \"content\". Delegates its functionality to the class Content.",
            "itemtype": "method",
            "name": "getLast",
            "return": {
                "description": "",
                "type": "Any"
            },
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\tag.js",
            "line": 192,
            "description": "Inserts an element into given position. Delegates its functionality to the class Content.",
            "itemtype": "method",
            "name": "insertElemAt",
            "params": [
                {
                    "name": "pos",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "elem",
                    "description": "",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\tag.js",
            "line": 203,
            "description": "Appends the element to the content of the list item. Delegates to Content::appendElem().",
            "itemtype": "method",
            "name": "appendElem",
            "params": [
                {
                    "name": "elem",
                    "description": "",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\tag.js",
            "line": 213,
            "description": "Returns the number of elements inside its content. Delegates to Content::length().",
            "itemtype": "method",
            "name": "length",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\tag.js",
            "line": 222,
            "description": "Deletes element from \"content\" property. Delegates its functionalality to Content::dropElemAt().",
            "itemtype": "method",
            "name": "dropElemAt",
            "params": [
                {
                    "name": "pos",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\tag.js",
            "line": 232,
            "description": "Gives html representation of the instance. If tag name is undefined or empty, just html comment is generated.",
            "itemtype": "method",
            "name": "toHtml",
            "return": {
                "description": "html representation of an instance of this class.",
                "type": "String"
            },
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\unit.js",
            "line": 46,
            "description": "Compares the target with the argument. Returns true, if the argument can be cast to the target type\nwith the same \"measurement\" property. False otherwise.",
            "itemtype": "method",
            "name": "isLikeAs",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Obj"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Unit",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\unit.js",
            "line": 63,
            "description": "Sums up the target and the argument. If they have different units of measurement, an error is thrown.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "unit",
                    "description": "",
                    "type": "Unit"
                }
            ],
            "return": {
                "description": "the sum of the target and the argument.",
                "type": "Unit"
            },
            "class": "Unit",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\unit.js",
            "line": 79,
            "description": "Subtracts the argument from the target. The argument is converted to a Unit object,\nthen its sign is changed and the method Unit::add() is called.",
            "itemtype": "method",
            "name": "sub",
            "params": [
                {
                    "name": "obj",
                    "description": "it will be first converted to a Unit instance.",
                    "type": "Unit"
                }
            ],
            "return": {
                "description": "the difference between target and the argument.",
                "type": "Unit"
            },
            "class": "Unit",
            "module": "Helper"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: version",
            "line": " js\\classes\\CKHelper.js:4"
        },
        {
            "message": "unknown tag: version",
            "line": " js\\classes\\string.js:7"
        },
        {
            "message": "Missing item type\nFill in the properties with the values from the argument if any.\nSplits the argument according to tha pattern \"key: value;\"",
            "line": " js\\classes\\property.js:21"
        }
    ]
}