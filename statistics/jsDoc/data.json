{
    "project": {
        "name": "Newsletter API",
        "description": "Javascript classes",
        "version": "0.0.6",
        "logo": "images/logo.png"
    },
    "files": {
        "customPlugins\\download\\dialogs\\download.js": {
            "name": "customPlugins\\download\\dialogs\\download.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "customPlugins\\linkMail\\linkMailDialog.js": {
            "name": "customPlugins\\linkMail\\linkMailDialog.js",
            "modules": {},
            "classes": {
                "LinkDialog": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "customPlugins\\save2\\dialogs\\save.js": {
            "name": "customPlugins\\save2\\dialogs\\save.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "customPlugins\\save2\\plugin.js": {
            "name": "customPlugins\\save2\\plugin.js",
            "modules": {
                "Plugins": 1
            },
            "classes": {
                "Save": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "customPlugins\\table2\\dialogs\\table2.js": {
            "name": "customPlugins\\table2\\dialogs\\table2.js",
            "modules": {
                "Dialogs": 1
            },
            "classes": {
                "TableDialog": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "customPlugins\\table2\\dialogs\\table2Modify.js": {
            "name": "customPlugins\\table2\\dialogs\\table2Modify.js",
            "modules": {},
            "classes": {
                "table2ModifyDialog": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\classes\\CKHelper\\Selection.js": {
            "name": "js\\classes\\CKHelper\\Selection.js",
            "modules": {
                "CKHelper": 1
            },
            "classes": {
                "Selection": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\classes\\Helper\\Unit.js": {
            "name": "js\\classes\\Helper\\Unit.js",
            "modules": {},
            "classes": {
                "Unit": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\classes\\HtmlElements\\Tag\\Cell.js": {
            "name": "js\\classes\\HtmlElements\\Tag\\Cell.js",
            "modules": {},
            "classes": {
                "Cell": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\classes\\HtmlElements\\Tag\\Image.js": {
            "name": "js\\classes\\HtmlElements\\Tag\\Image.js",
            "modules": {},
            "classes": {
                "Image": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\classes\\HtmlElements\\Tag\\Link.js": {
            "name": "js\\classes\\HtmlElements\\Tag\\Link.js",
            "modules": {},
            "classes": {
                "Link": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\classes\\HtmlElements\\Tag\\List.js": {
            "name": "js\\classes\\HtmlElements\\Tag\\List.js",
            "modules": {},
            "classes": {
                "List": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\classes\\HtmlElements\\Tag\\ListItem.js": {
            "name": "js\\classes\\HtmlElements\\Tag\\ListItem.js",
            "modules": {},
            "classes": {
                "ListItem": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\classes\\HtmlElements\\Tag\\OList.js": {
            "name": "js\\classes\\HtmlElements\\Tag\\OList.js",
            "modules": {},
            "classes": {
                "OList": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\classes\\HtmlElements\\Tag\\Row.js": {
            "name": "js\\classes\\HtmlElements\\Tag\\Row.js",
            "modules": {},
            "classes": {
                "Row": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\classes\\HtmlElements\\Tag\\Table.js": {
            "name": "js\\classes\\HtmlElements\\Tag\\Table.js",
            "modules": {},
            "classes": {
                "Table": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\classes\\HtmlElements\\Tag\\UList.js": {
            "name": "js\\classes\\HtmlElements\\Tag\\UList.js",
            "modules": {},
            "classes": {
                "UList": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\classes\\HtmlElements\\Content.js": {
            "name": "js\\classes\\HtmlElements\\Content.js",
            "modules": {},
            "classes": {
                "Content": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\classes\\HtmlElements\\Document.js": {
            "name": "js\\classes\\HtmlElements\\Document.js",
            "modules": {
                "Document": 1
            },
            "classes": {
                "Document": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\classes\\HtmlElements\\Dom.js": {
            "name": "js\\classes\\HtmlElements\\Dom.js",
            "modules": {},
            "classes": {
                "Dom": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\classes\\HtmlElements\\Factory.js": {
            "name": "js\\classes\\HtmlElements\\Factory.js",
            "modules": {},
            "classes": {
                "Factory": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\classes\\HtmlElements\\Mapper.js": {
            "name": "js\\classes\\HtmlElements\\Mapper.js",
            "modules": {},
            "classes": {
                "Mapper": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\classes\\HtmlElements\\PlainText.js": {
            "name": "js\\classes\\HtmlElements\\PlainText.js",
            "modules": {},
            "classes": {
                "PlainText": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\classes\\HtmlElements\\Tag.js": {
            "name": "js\\classes\\HtmlElements\\Tag.js",
            "modules": {},
            "classes": {
                "Tag": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\classes\\Properties\\CellProperties.js": {
            "name": "js\\classes\\Properties\\CellProperties.js",
            "modules": {},
            "classes": {
                "CellProperties": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\classes\\Properties\\ImageProperties.js": {
            "name": "js\\classes\\Properties\\ImageProperties.js",
            "modules": {},
            "classes": {
                "ImageProperties": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\classes\\Properties\\LinkProperties.js": {
            "name": "js\\classes\\Properties\\LinkProperties.js",
            "modules": {},
            "classes": {
                "LinkProperties": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\classes\\Properties\\ListItemProperties.js": {
            "name": "js\\classes\\Properties\\ListItemProperties.js",
            "modules": {},
            "classes": {
                "ListItemProperties": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\classes\\Properties\\ListProperties.js": {
            "name": "js\\classes\\Properties\\ListProperties.js",
            "modules": {},
            "classes": {
                "ListProperties": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\classes\\Properties\\RowProperties.js": {
            "name": "js\\classes\\Properties\\RowProperties.js",
            "modules": {},
            "classes": {
                "RowProperties": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\classes\\Properties\\TableProperties.js": {
            "name": "js\\classes\\Properties\\TableProperties.js",
            "modules": {},
            "classes": {
                "TableProperties": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\classes\\CKHelper.js": {
            "name": "js\\classes\\CKHelper.js",
            "modules": {
                "Helper": 1
            },
            "classes": {
                "CKHelper": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\classes\\Helper.js": {
            "name": "js\\classes\\Helper.js",
            "modules": {},
            "classes": {
                "Helper": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\classes\\Properties.js": {
            "name": "js\\classes\\Properties.js",
            "modules": {
                "Properties": 1
            },
            "classes": {
                "Properties": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\controllers\\CDownload.js": {
            "name": "js\\controllers\\CDownload.js",
            "modules": {
                "Controllers": 1
            },
            "classes": {
                "CDownload": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\controllers\\CImage.js": {
            "name": "js\\controllers\\CImage.js",
            "modules": {},
            "classes": {
                "CImage": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\controllers\\CLink.js": {
            "name": "js\\controllers\\CLink.js",
            "modules": {},
            "classes": {
                "CLink": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\controllers\\CTable.js": {
            "name": "js\\controllers\\CTable.js",
            "modules": {},
            "classes": {
                "CTable": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\controllers\\Controller.js": {
            "name": "js\\controllers\\Controller.js",
            "modules": {},
            "classes": {
                "Controller": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\converters\\Converter.js": {
            "name": "js\\converters\\Converter.js",
            "modules": {
                "HtmlElements": 1
            },
            "classes": {
                "Converter": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\converters\\ConverterElastic.js": {
            "name": "js\\converters\\ConverterElastic.js",
            "modules": {},
            "classes": {
                "ConverterElastic": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\converters\\ConverterFixed.js": {
            "name": "js\\converters\\ConverterFixed.js",
            "modules": {},
            "classes": {
                "ConverterFixed": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\converters\\ConverterGeneral.js": {
            "name": "js\\converters\\ConverterGeneral.js",
            "modules": {},
            "classes": {
                "ConverterGeneral": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\converters\\ConverterSimpleText.js": {
            "name": "js\\converters\\ConverterSimpleText.js",
            "modules": {},
            "classes": {
                "ConverterSimpleText": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\converters\\Worker.js": {
            "name": "js\\converters\\Worker.js",
            "modules": {
                "Converter": 1
            },
            "classes": {
                "Worker": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "js\\eventHandlers\\EHToolbar.js": {
            "name": "js\\eventHandlers\\EHToolbar.js",
            "modules": {
                "EventHandler": 1
            },
            "classes": {
                "EHToolbar": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "settings\\editor_config.js": {
            "name": "settings\\editor_config.js",
            "modules": {
                "Config": 1
            },
            "classes": {
                "CKEDITOR": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "settings\\general_config.js": {
            "name": "settings\\general_config.js",
            "modules": {},
            "classes": {
                "NEWSLETTER": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "Dialogs": {
            "name": "Dialogs",
            "submodules": {},
            "classes": {
                "LinkDialog": 1,
                "TableDialog": 1,
                "table2ModifyDialog": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "customPlugins\\table2\\dialogs\\table2Modify.js",
            "line": 5,
            "description": "Table dialog."
        },
        "Plugins": {
            "name": "Plugins",
            "submodules": {},
            "classes": {
                "Save": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "customPlugins\\save2\\plugin.js",
            "line": 4,
            "description": "Plugin to save the editor window content.",
            "type": "{Object}",
            "since": "0.0.7",
            "author": "A.Shcherbakov"
        },
        "CKHelper": {
            "name": "CKHelper",
            "submodules": {},
            "classes": {
                "Selection": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "js\\classes\\CKHelper\\Selection.js",
            "line": 4,
            "description": "Represents selected elements in the editor window. The argument `ed` is a\n[CKEditor editor](http://docs.ckeditor.com/#!/api/CKEDITOR.editor \"see official site\")  instance.",
            "params": [
                {
                    "name": "ed",
                    "description": "",
                    "type": "CKEDITOR.editor"
                }
            ]
        },
        "Helper": {
            "name": "Helper",
            "submodules": {},
            "classes": {
                "Unit": 1,
                "CKHelper": 1,
                "Helper": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "js\\classes\\Helper.js",
            "line": 4,
            "description": "Collection of functions used by various plugins of the CKEditor.",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "measure",
                    "description": "",
                    "type": "String|null"
                }
            ],
            "type": "{Object}",
            "since": "0.0.1",
            "author": "A.Shcherbakov"
        },
        "HtmlElements": {
            "name": "HtmlElements",
            "submodules": {},
            "classes": {
                "Cell": 1,
                "Image": 1,
                "Link": 1,
                "List": 1,
                "ListItem": 1,
                "OList": 1,
                "Row": 1,
                "Table": 1,
                "UList": 1,
                "Content": 1,
                "Factory": 1,
                "Mapper": 1,
                "PlainText": 1,
                "Tag": 1,
                "Converter": 1,
                "ConverterElastic": 1,
                "ConverterFixed": 1,
                "ConverterGeneral": 1,
                "ConverterSimpleText": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "js\\converters\\ConverterSimpleText.js",
            "line": 4,
            "description": "Methods of this class convert one format in another.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "arg",
                    "description": "",
                    "type": "Mixed"
                }
            ],
            "extends": "Tag",
            "since": "0.0.2",
            "author": "A.Shcherbakov"
        },
        "Document": {
            "name": "Document",
            "submodules": {},
            "classes": {
                "Document": 1,
                "Dom": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "js\\classes\\HtmlElements\\Dom.js",
            "line": 4,
            "description": "This class is to deal with documents: parsing, converting, saving. Its functionality is similar\nto those of {{#crossLink \"Dom\"}}Dom{{/crossLink}}.\n\nThe difference between them: {{#crossLink \"Document\"}}Document{{/crossLink}} is a singleton,\nwhile {{#crossLink \"Dom\"}}Dom{{/crossLink}} is a class that accepts creation of multiple\ninstances.",
            "params": [
                {
                    "name": "node",
                    "description": "the content of the document",
                    "type": "DOM.Node"
                }
            ],
            "since": "0.0.5",
            "author": "A.Shcherbakov",
            "uses": [
                "Unit              class to deal with numbers with unit of measurements",
                "Properties        class to deal with Properties of document nodes"
            ],
            "is_constructor": 1
        },
        "Properties": {
            "name": "Properties",
            "submodules": {},
            "classes": {
                "CellProperties": 1,
                "ImageProperties": 1,
                "LinkProperties": 1,
                "ListItemProperties": 1,
                "ListProperties": 1,
                "RowProperties": 1,
                "TableProperties": 1,
                "Properties": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "js\\classes\\Properties.js",
            "line": 5,
            "description": "A general Property class. If the argument is an object, then its properties are copied\ninto Property instance. If the argument is a string, then it will be splitted according to\nthe pattern \"key: value;\" to populate object properties.",
            "is_constructor": 1,
            "extends": "Properties",
            "since": "0.0.5",
            "params": [
                {
                    "name": "input",
                    "description": "an argument, from which properties will be taken.",
                    "type": "String|Object"
                }
            ]
        },
        "Controllers": {
            "name": "Controllers",
            "submodules": {},
            "classes": {
                "CDownload": 1,
                "CImage": 1,
                "CLink": 1,
                "CTable": 1,
                "Controller": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "js\\controllers\\Controller.js",
            "line": 4,
            "description": "Download Controller.",
            "type": "{Object}",
            "since": "0.0.5",
            "author": "A.Shcherbakov"
        },
        "Converter": {
            "name": "Converter",
            "submodules": {},
            "classes": {
                "Worker": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "js\\converters\\Worker.js",
            "line": 4,
            "description": "Worker.\n\nAn object that applies certain action if some condition meets.",
            "params": [
                {
                    "name": "trigger",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "action",
                    "description": "",
                    "type": "Function"
                }
            ],
            "is_constructor": 1,
            "since": "0.0.6",
            "author": "A.Shcherbakov"
        },
        "EventHandler": {
            "name": "EventHandler",
            "submodules": {},
            "classes": {
                "EHToolbar": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "js\\eventHandlers\\EHToolbar.js",
            "line": 4,
            "description": "Object for managing toolbar events.",
            "since": "0.0.6",
            "author": "A.Shcherbakov"
        },
        "Config": {
            "name": "Config",
            "submodules": {},
            "classes": {
                "CKEDITOR": 1,
                "NEWSLETTER": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "settings\\general_config.js",
            "line": 4,
            "description": "Configuration of CKEDITOR.",
            "since": "0.0.1",
            "type": "{Object}",
            "author": "A.Shcherbakov"
        }
    },
    "classes": {
        "LinkDialog": {
            "name": "LinkDialog",
            "shortname": "LinkDialog",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Dialogs",
            "namespace": "",
            "file": "customPlugins\\linkMail\\linkMailDialog.js",
            "line": 4,
            "description": "Unified dialog for link and e-mail insertion."
        },
        "Save": {
            "name": "Save",
            "shortname": "Save",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Plugins",
            "namespace": "",
            "file": "customPlugins\\save2\\plugin.js",
            "line": 4,
            "description": "Plugin to save the editor window content."
        },
        "TableDialog": {
            "name": "TableDialog",
            "shortname": "TableDialog",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Dialogs",
            "namespace": "",
            "file": "customPlugins\\table2\\dialogs\\table2.js",
            "line": 5,
            "description": "Table dialog."
        },
        "table2ModifyDialog": {
            "name": "table2ModifyDialog",
            "shortname": "table2ModifyDialog",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Dialogs",
            "namespace": "",
            "file": "customPlugins\\table2\\dialogs\\table2Modify.js",
            "line": 5,
            "description": "Dialog to modify table."
        },
        "Selection": {
            "name": "Selection",
            "shortname": "Selection",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "CKHelper",
            "namespace": "",
            "file": "js\\classes\\CKHelper\\Selection.js",
            "line": 4,
            "description": "Represents selected elements in the editor window. The argument `ed` is a\n[CKEditor editor](http://docs.ckeditor.com/#!/api/CKEDITOR.editor \"see official site\")  instance."
        },
        "Unit": {
            "name": "Unit",
            "shortname": "Unit",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Helper",
            "namespace": "",
            "file": "js\\classes\\Helper\\Unit.js",
            "line": 5,
            "description": "Represents a quantity divided in \"value\" and \"measure\"."
        },
        "Cell": {
            "name": "Cell",
            "shortname": "Cell",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "HtmlElements",
            "namespace": "",
            "file": "js\\classes\\HtmlElements\\Tag\\Cell.js",
            "line": 5,
            "description": "Represents a table cell. The argument is supposed to be passed to the \"content\" property."
        },
        "Image": {
            "name": "Image",
            "shortname": "Image",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "HtmlElements",
            "namespace": "",
            "file": "js\\classes\\HtmlElements\\Tag\\Image.js",
            "line": 5,
            "description": "Represents an image."
        },
        "Link": {
            "name": "Link",
            "shortname": "Link",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "HtmlElements",
            "namespace": "",
            "file": "js\\classes\\HtmlElements\\Tag\\Link.js",
            "line": 4,
            "description": "This class is represent an html link tag \"a\"."
        },
        "List": {
            "name": "List",
            "shortname": "List",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "HtmlElements",
            "namespace": "",
            "file": "js\\classes\\HtmlElements\\Tag\\List.js",
            "line": 5,
            "description": "This is a parent class for ordered and unordred lists. If argument is provided and is allowed one, it will be used\nto set the property \"tag\". Otherwise, \"tag\" property will be set to the first allowed value.",
            "params": [
                {
                    "name": "listType",
                    "description": "",
                    "type": "Sting"
                }
            ]
        },
        "ListItem": {
            "name": "ListItem",
            "shortname": "ListItem",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "HtmlElements",
            "namespace": "",
            "file": "js\\classes\\HtmlElements\\Tag\\ListItem.js",
            "line": 5,
            "description": "This class is used to represent a list item."
        },
        "OList": {
            "name": "OList",
            "shortname": "OList",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "HtmlElements",
            "namespace": "",
            "file": "js\\classes\\HtmlElements\\Tag\\OList.js",
            "line": 5,
            "description": "This class is used to represent ordered lists."
        },
        "Row": {
            "name": "Row",
            "shortname": "Row",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "HtmlElements",
            "namespace": "",
            "file": "js\\classes\\HtmlElements\\Tag\\Row.js",
            "line": 5,
            "description": "Represents a table row"
        },
        "Table": {
            "name": "Table",
            "shortname": "Table",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "HtmlElements",
            "namespace": "",
            "file": "js\\classes\\HtmlElements\\Tag\\Table.js",
            "line": 5,
            "description": "Represents table.\n\nTable might be a plain one or a framed one. Table is called framed if each of its rows contains only one cell,\nand each of these cells contains another table. These three elements - row, cell and table - are called phantom ones.\nOnly {{#crossLink \"Tag/_properties:property\"}}_properties{{/crossLink}} of the phantom elements are of interest.\n\nBelow it is depicted a framed table. Dotted lines correspond to the phantom elements, solid - to \"normal\" ones.\n<span style=\"color: black\">Black color corresponds to table</span>,\n<span style=\"color: orange\">orange - to table row</span>,\n<span style=\"color: green\">green - to table cell</span>.\n<style>\n.phantom, .normal{\n\tborder-width: 2px;\n\tpadding: 4px;\n\tmargin: 4px;\n\tborder-collapse: separate;\n}\n\n.phantom {\n\tborder-style: dashed;\n}\n.normal {\n  border-style: solid;\n}\ntable.phantom, table.normal {\n\tborder-color: #2818B1;\n\tpadding: 10px;\n}\ntd.phantom, td.normal{\n\tborder-color: #00A779;\n}\ntr.phantom, tr.normal {\n\toutline-width: 2px;\n\toutline-color: #FF9C00;\n}\ntr.phantom{\n\toutline-style: dashed;\n}\ntr.normal {\n\toutline-style: solid;\n}\n\n</style>\n\n<table class=\"normal\">\n\t<tr class=\"phantom\">\n \t\t<td class=\"phantom\">\n \t\t\t<table class=\"phantom\">\n \t\t\t\t<tr class=\"normal\">\n \t\t\t\t\t<td class=\"normal\">\n \t\t\t\t\t\tfirst cell of the first line\n \t\t\t\t\t</td>\n \t\t\t\t\t<td class=\"normal\">\n \t\t\t\t\t\tsecond cell of the first line\n \t\t\t\t\t</td>\n \t\t\t\t</tr>\n \t\t\t</table>\n \t\t</td>\n  </tr>\n\t<tr class=\"phantom\">\n \t\t<td class=\"phantom\">\n \t\t\t<table class=\"phantom\">\n \t\t\t\t<tr class=\"normal\">\n \t\t\t\t\t<td class=\"normal\">\n \t\t\t\t\t\tfirst cell of the second line\n \t\t\t\t\t</td>\n \t\t\t\t\t<td class=\"normal\">\n \t\t\t\t\t\tsecond cell of the second line\n \t\t\t\t\t</td>\n \t\t\t\t</tr>\n \t\t\t</table>\n \t\t</td>\n  </tr>\n</table>"
        },
        "UList": {
            "name": "UList",
            "shortname": "UList",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "HtmlElements",
            "namespace": "",
            "file": "js\\classes\\HtmlElements\\Tag\\UList.js",
            "line": 5,
            "description": "This class is used to represent unordered lists."
        },
        "Content": {
            "name": "Content",
            "shortname": "Content",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "HtmlElements",
            "namespace": "",
            "file": "js\\classes\\HtmlElements\\Content.js",
            "line": 5,
            "description": "This class is used to encompass other objects."
        },
        "Document": {
            "name": "Document",
            "shortname": "Document",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Document",
            "namespace": "",
            "file": "js\\classes\\HtmlElements\\Document.js",
            "line": 4,
            "description": "This class is to deal with documents: parsing, converting, saving. Its functionality is similar\nto those of {{#crossLink \"Dom\"}}Dom{{/crossLink}}.\n\nThe difference between them: {{#crossLink \"Document\"}}Document{{/crossLink}} is a singleton,\nwhile {{#crossLink \"Dom\"}}Dom{{/crossLink}} is a class that accepts creation of multiple\ninstances."
        },
        "Dom": {
            "name": "Dom",
            "shortname": "Dom",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Document",
            "namespace": "",
            "file": "js\\classes\\HtmlElements\\Dom.js",
            "line": 4,
            "description": "This class deals with the elements of the editor document. Its functionality is similar\nto those of {{#crossLink \"Document\"}}Document{{/crossLink}}.\n\nThe difference between them: {{#crossLink \"Document\"}}Document{{/crossLink}} is a singleton,\nwhile {{#crossLink \"Dom\"}}Dom{{/crossLink}} is a class that accepts creation of multiple\ninstances."
        },
        "Factory": {
            "name": "Factory",
            "shortname": "Factory",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "HtmlElements",
            "namespace": "",
            "file": "js\\classes\\HtmlElements\\Factory.js",
            "line": 5,
            "description": "This class is to be used to create different objects. What type of object is to be created\nis decided based on functionality of {{#crossLink \"Mapper\"}}Mapper{{/crossLink}} class,\nan instance of which might be passed as an argument.\ninstance."
        },
        "Mapper": {
            "name": "Mapper",
            "shortname": "Mapper",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "HtmlElements",
            "namespace": "",
            "file": "js\\classes\\HtmlElements\\Mapper.js",
            "line": 3,
            "description": "This class associates different types of object. It is intended to be used along with\n{{#crossLink \"Factory\"}}Factory{{/crossLink}} class.\nThe idea is to have criteria on which decide what type of objects should be constructed.\nThis class is responsible for these criteria."
        },
        "PlainText": {
            "name": "PlainText",
            "shortname": "PlainText",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "HtmlElements",
            "namespace": "",
            "file": "js\\classes\\HtmlElements\\PlainText.js",
            "line": 5,
            "description": "Represents plain text. This class is intented to represent [text node](https://developer.mozilla.org/en-US/docs/Web/API/Text) elements.\nThough there is no `text` tag in HTML, it is introduced here in order to consider plain text on the same basis as other tags."
        },
        "Tag": {
            "name": "Tag",
            "shortname": "Tag",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "HtmlElements",
            "namespace": "",
            "file": "js\\classes\\HtmlElements\\Tag.js",
            "line": 5,
            "description": "This class is used to represent a general html tag."
        },
        "CellProperties": {
            "name": "CellProperties",
            "shortname": "CellProperties",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Properties",
            "namespace": "",
            "file": "js\\classes\\Properties\\CellProperties.js",
            "line": 3,
            "description": "Represents table cell properties."
        },
        "ImageProperties": {
            "name": "ImageProperties",
            "shortname": "ImageProperties",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Properties",
            "namespace": "",
            "file": "js\\classes\\Properties\\ImageProperties.js",
            "line": 3,
            "description": "Represents image properties."
        },
        "LinkProperties": {
            "name": "LinkProperties",
            "shortname": "LinkProperties",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Properties",
            "namespace": "",
            "file": "js\\classes\\Properties\\LinkProperties.js",
            "line": 3,
            "description": "Represents image properties."
        },
        "ListItemProperties": {
            "name": "ListItemProperties",
            "shortname": "ListItemProperties",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Properties",
            "namespace": "",
            "file": "js\\classes\\Properties\\ListItemProperties.js",
            "line": 3,
            "description": "Represents list item styles."
        },
        "ListProperties": {
            "name": "ListProperties",
            "shortname": "ListProperties",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Properties",
            "namespace": "",
            "file": "js\\classes\\Properties\\ListProperties.js",
            "line": 4,
            "description": "Represents image styles."
        },
        "RowProperties": {
            "name": "RowProperties",
            "shortname": "RowProperties",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Properties",
            "namespace": "",
            "file": "js\\classes\\Properties\\RowProperties.js",
            "line": 3,
            "description": "Represents image properties."
        },
        "TableProperties": {
            "name": "TableProperties",
            "shortname": "TableProperties",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Properties",
            "namespace": "",
            "file": "js\\classes\\Properties\\TableProperties.js",
            "line": 3,
            "description": "Represents image properties."
        },
        "CKHelper": {
            "name": "CKHelper",
            "shortname": "CKHelper",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Helper",
            "namespace": "",
            "file": "js\\classes\\CKHelper.js",
            "line": 5,
            "description": "Collection of functions used by various plugins of the CKEditor."
        },
        "Helper": {
            "name": "Helper",
            "shortname": "Helper",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Helper",
            "namespace": "",
            "file": "js\\classes\\Helper.js",
            "line": 4,
            "description": "Set of useful functions"
        },
        "Properties": {
            "name": "Properties",
            "shortname": "Properties",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Properties",
            "namespace": "",
            "file": "js\\classes\\Properties.js",
            "line": 5,
            "description": "A general Property class. If the argument is an object, then its properties are copied\ninto Property instance. If the argument is a string, then it will be splitted according to\nthe pattern \"key: value;\" to populate object properties."
        },
        "CDownload": {
            "name": "CDownload",
            "shortname": "CDownload",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Controllers",
            "namespace": "",
            "file": "js\\controllers\\CDownload.js",
            "line": 4,
            "description": "Download Controller."
        },
        "CImage": {
            "name": "CImage",
            "shortname": "CImage",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Controllers",
            "namespace": "",
            "file": "js\\controllers\\CImage.js",
            "line": 4,
            "description": "Link Controller."
        },
        "CLink": {
            "name": "CLink",
            "shortname": "CLink",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Controllers",
            "namespace": "",
            "file": "js\\controllers\\CLink.js",
            "line": 4,
            "description": "Link Controller."
        },
        "CTable": {
            "name": "CTable",
            "shortname": "CTable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Controllers",
            "namespace": "",
            "file": "js\\controllers\\CTable.js",
            "line": 4,
            "description": "Table Controller."
        },
        "Controller": {
            "name": "Controller",
            "shortname": "Controller",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Controllers",
            "namespace": "",
            "file": "js\\controllers\\Controller.js",
            "line": 4,
            "description": "Base controller class."
        },
        "Converter": {
            "name": "Converter",
            "shortname": "Converter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "HtmlElements",
            "namespace": "",
            "file": "js\\converters\\Converter.js",
            "line": 4,
            "description": "Methods of this class convert one format in another."
        },
        "ConverterElastic": {
            "name": "ConverterElastic",
            "shortname": "ConverterElastic",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "HtmlElements",
            "namespace": "",
            "file": "js\\converters\\ConverterElastic.js",
            "line": 4,
            "description": "Methods of this class converts into elastic format.\n\nExtends {{#crossLink \"ConverterGeneral\"}}ConverterGeneral{{/crossLink}} class."
        },
        "ConverterFixed": {
            "name": "ConverterFixed",
            "shortname": "ConverterFixed",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "HtmlElements",
            "namespace": "",
            "file": "js\\converters\\ConverterFixed.js",
            "line": 4,
            "description": "Methods of this class convert into fixed format.\n\nExtends {{#crossLink \"ConverterGeneral\"}}ConverterGeneral{{/crossLink}}."
        },
        "ConverterGeneral": {
            "name": "ConverterGeneral",
            "shortname": "ConverterGeneral",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "HtmlElements",
            "namespace": "",
            "file": "js\\converters\\ConverterGeneral.js",
            "line": 4,
            "description": "Base class for converters into specific formats."
        },
        "ConverterSimpleText": {
            "name": "ConverterSimpleText",
            "shortname": "ConverterSimpleText",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "HtmlElements",
            "namespace": "",
            "file": "js\\converters\\ConverterSimpleText.js",
            "line": 4,
            "description": "Methods of this class convert a node into a simple text format.\n\n A simple format text is a text containing html tags corresponding to bold, italic etc. font."
        },
        "Worker": {
            "name": "Worker",
            "shortname": "Worker",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Converter",
            "namespace": "",
            "file": "js\\converters\\Worker.js",
            "line": 4,
            "description": "Worker.\n\nAn object that applies certain action if some condition meets."
        },
        "EHToolbar": {
            "name": "EHToolbar",
            "shortname": "EHToolbar",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "EventHandler",
            "namespace": "",
            "file": "js\\eventHandlers\\EHToolbar.js",
            "line": 4,
            "description": "Object for managing toolbar events."
        },
        "CKEDITOR": {
            "name": "CKEDITOR",
            "shortname": "CKEDITOR",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Config",
            "namespace": "",
            "file": "settings\\editor_config.js",
            "line": 4,
            "description": "Configuration of CKEDITOR."
        },
        "NEWSLETTER": {
            "name": "NEWSLETTER",
            "shortname": "NEWSLETTER",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Config",
            "namespace": "",
            "file": "settings\\general_config.js",
            "line": 4,
            "description": "Singleton containing configuration settings. Some of the properties are write-protected."
        }
    },
    "classitems": [
        {
            "file": "customPlugins\\download\\dialogs\\download.js",
            "line": 7,
            "description": "Instance of {{#crossLink \"Controller\"}}Controller{{/crossLink}}",
            "itemtype": "property",
            "name": "_controller",
            "type": "CDownload",
            "access": "private",
            "tagname": "",
            "class": "LinkDialog"
        },
        {
            "file": "customPlugins\\linkMail\\linkMailDialog.js",
            "line": 12,
            "description": "Instance of {{#crossLink \"CLink\"}}CLink{{/crossLink}}",
            "itemtype": "property",
            "name": "_controller",
            "type": "{CLink}",
            "access": "private",
            "tagname": "",
            "class": "LinkDialog",
            "module": "Dialogs"
        },
        {
            "file": "customPlugins\\linkMail\\linkMailDialog.js",
            "line": 25,
            "description": "Style for text input fields for choosing colors.",
            "itemtype": "property",
            "name": "_inputColorStyle",
            "type": "{String}",
            "access": "private",
            "tagname": "",
            "class": "LinkDialog",
            "module": "Dialogs"
        },
        {
            "file": "customPlugins\\linkMail\\linkMailDialog.js",
            "line": 34,
            "description": "Style for label fields (text in front of input fields).",
            "itemtype": "property",
            "name": "_labelStyle",
            "type": "{String}",
            "access": "private",
            "tagname": "",
            "class": "LinkDialog",
            "module": "Dialogs"
        },
        {
            "file": "customPlugins\\linkMail\\linkMailDialog.js",
            "line": 42,
            "description": "Style for label fields (text in front of input fields).",
            "itemtype": "property",
            "name": "_labelStyle",
            "type": "{String}",
            "access": "private",
            "tagname": "",
            "class": "LinkDialog",
            "module": "Dialogs"
        },
        {
            "file": "customPlugins\\linkMail\\linkMailDialog.js",
            "line": 50,
            "description": "Color picker (JavaScript ColorPicker).\n\ndhtmlxColorPicker is open source GPL v2 and Free License\n[JavaScript component](http://dhtmlx.com/docs/products/dhtmlxColorPicker/)\nfor easy color selection.",
            "itemtype": "property",
            "name": "_colorPicker",
            "type": "DhtmlXColorPicker",
            "access": "private",
            "tagname": "",
            "since": "0.0.6",
            "class": "LinkDialog",
            "module": "Dialogs"
        },
        {
            "file": "customPlugins\\linkMail\\linkMailDialog.js",
            "line": 63,
            "description": "{{#crossLink \"table2Dialog/_colorPicker:property\"}}_colorPicker{{/crossLink}} initializer.\n\n`z-index` of the color picker is assigned a value that is greater than `z-index` of\nthe table dialog window. Without this assignment, the color picker dialog window is\nlocated below the layer of the table dialog window and hence remains unreachable.\n\nThere might be a better way to find dynamically what z-index it should be assigned.\nFor the moment, the table dialog window turns out to have z-index 10010 (found by\nanalyzing its html code).",
            "itemtype": "method",
            "name": "colorPeackerInit",
            "return": {
                "description": "",
                "type": "Void"
            },
            "since": "0.0.6",
            "class": "LinkDialog",
            "module": "Dialogs"
        },
        {
            "file": "customPlugins\\linkMail\\linkMailDialog.js",
            "line": 174,
            "description": "The function to execute when the dialog is displayed for the first time.\n\nBinds {{#crossLink \"table2Dialog/_colorPicker:property\"}}_colorPicker{{/crossLink}}\nto color-related input text fields.",
            "itemtype": "method",
            "name": "onLoad",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "LinkDialog",
            "module": "Dialogs"
        },
        {
            "file": "customPlugins\\linkMail\\linkMailDialog.js",
            "line": 199,
            "description": "The function to execute when the dialog is loaded (executed every time the dialog is opened).\n\nFills in link plugin dialog with selected (if any) link properties.",
            "itemtype": "method",
            "name": "onShow",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "LinkDialog",
            "module": "Dialogs"
        },
        {
            "file": "customPlugins\\save2\\dialogs\\save.js",
            "line": 7,
            "description": "Instance of {{#crossLink \"Controller\"}}Controller{{/crossLink}}",
            "itemtype": "property",
            "name": "_controller",
            "type": "CDownload",
            "access": "private",
            "tagname": "",
            "class": "Save",
            "module": "Dialogs"
        },
        {
            "file": "customPlugins\\save2\\dialogs\\save.js",
            "line": 15,
            "description": "Name of the plugin to which this dialog menu refers.",
            "itemtype": "property",
            "name": "_pluginName",
            "type": "{String}",
            "class": "Save",
            "module": "Dialogs"
        },
        {
            "file": "customPlugins\\save2\\plugin.js",
            "line": 13,
            "description": "Plugin name. A string under which the plugin is registered in the editor.",
            "itemtype": "property",
            "name": "_pluginName",
            "access": "private",
            "tagname": "",
            "type": "{String}",
            "class": "Save",
            "module": "Plugins"
        },
        {
            "file": "customPlugins\\save2\\plugin.js",
            "line": 21,
            "description": "Internationalization of strings used by the plugin.",
            "itemtype": "property",
            "name": "_translations",
            "access": "private",
            "tagname": "",
            "type": "{Object}",
            "class": "Save",
            "module": "Plugins"
        },
        {
            "file": "customPlugins\\save2\\plugin.js",
            "line": 45,
            "description": "Commands that configure the plugin, namely:\n<ol><li>\nregister the plugin: adds icon, command and dialog.\n</li><li>\nadd translations defined in {{#crossLink \"Save/_translations:property\"}}_translations{{/crossLink}}.\n</li></ol>\n<b>NB</b>: name \"constructor\" used in the documentation does not correspond to a real called \"constructor\" but rather\nto a set of commands used to configure the plugin.",
            "itemtype": "method",
            "name": "constructor",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Save",
            "module": "Plugins"
        },
        {
            "file": "customPlugins\\table2\\dialogs\\table2.js",
            "line": 13,
            "description": "Returns table insertion/updating dialog.\n\nIn case of update, the dialog fields are filled-in with the table attribute value.",
            "itemtype": "method",
            "name": "manageTable",
            "params": [
                {
                    "name": "editor",
                    "description": "instance of CKEDITOR",
                    "type": "CKEDITOR"
                },
                {
                    "name": "isNew",
                    "description": "whether the method should insert new table or update exisiting one",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "dialog definition",
                "type": "Object"
            },
            "since": "0.0.6",
            "class": "TableDialog",
            "module": "Dialogs"
        },
        {
            "file": "customPlugins\\table2\\dialogs\\table2.js",
            "line": 25,
            "description": "Instance of {{#crossLink \"Controller\"}}Controller.{{/crossLink}}",
            "itemtype": "property",
            "name": "_controller",
            "type": "CTable",
            "access": "private",
            "tagname": "",
            "class": "TableDialog",
            "module": "Dialogs"
        },
        {
            "file": "customPlugins\\table2\\dialogs\\table2.js",
            "line": 33,
            "description": "Style for text input fields for numbers.",
            "itemtype": "property",
            "name": "_inputNumberStyle",
            "type": "{String}",
            "access": "private",
            "tagname": "",
            "class": "TableDialog",
            "module": "Dialogs"
        },
        {
            "file": "customPlugins\\table2\\dialogs\\table2.js",
            "line": 41,
            "description": "Style for text input fields for choosing colors.",
            "itemtype": "property",
            "name": "_inputColorStyle",
            "type": "{String}",
            "access": "private",
            "tagname": "",
            "class": "TableDialog",
            "module": "Dialogs"
        },
        {
            "file": "customPlugins\\table2\\dialogs\\table2.js",
            "line": 49,
            "description": "Color picker (JavaScript ColorPicker).\n\ndhtmlxColorPicker is open source GPL v2 and Free License [JavaScript component](http://dhtmlx.com/docs/products/dhtmlxColorPicker/)\nfor easy color selection.",
            "itemtype": "property",
            "name": "_colorPicker",
            "type": "DhtmlXColorPicker",
            "access": "private",
            "tagname": "",
            "since": "0.0.6",
            "class": "TableDialog",
            "module": "Dialogs"
        },
        {
            "file": "customPlugins\\table2\\dialogs\\table2.js",
            "line": 61,
            "description": "{{#crossLink \"TableDialog/_colorPicker:property\"}}_colorPicker{{/crossLink}} initializer.\n\n`z-index` of the color picker is assigned a value that is greater than `z-index` of\nthe table dialog window. Without this assignment, the color picker dialog window is\nlocated below the layer of the table dialog window and hence remains unreachable.\n\nThere might be a better way to find dynamically what z-index it should be assigned.\nFor the moment, the table dialog window turns out to have z-index 10010 (found by\nanalyzing its html code).",
            "itemtype": "method",
            "name": "colorPeackerInit",
            "return": {
                "description": "",
                "type": "Void"
            },
            "since": "0.0.6",
            "class": "TableDialog",
            "module": "Dialogs"
        },
        {
            "file": "customPlugins\\table2\\dialogs\\table2.js",
            "line": 85,
            "description": "Draws text input fields to insert weight factors for the column widths.\n\nThe number of text input field is taken from a text input field responsable for the\nnumber of table columns. Once that text input field is modified, this function is fired.\nIf inserted number of columns is bigger than the number of the text input fields\nto insert column weight factors, then missing text input fields are appended.\nIf inserted number of the columns is smaller than the number of the text input fields\nto insert column weight factors, then extra text input fields are removed.",
            "itemtype": "method",
            "name": "drawInputCells",
            "return": {
                "description": "",
                "type": "Void"
            },
            "since": "0.0.4",
            "access": "private",
            "tagname": "",
            "class": "TableDialog",
            "module": "Dialogs"
        },
        {
            "file": "customPlugins\\table2\\dialogs\\table2.js",
            "line": 136,
            "description": "Removes (if any) input field resposible for column widths.",
            "params": [
                {
                    "name": "dialog",
                    "description": "",
                    "type": "CKEDITOR.dialog"
                }
            ],
            "itemtype": "method",
            "name": "dropInputCells",
            "return": {
                "description": "",
                "type": "Void"
            },
            "since": "0.0.6",
            "class": "TableDialog",
            "module": "Dialogs"
        },
        {
            "file": "customPlugins\\table2\\dialogs\\table2.js",
            "line": 158,
            "description": "It takes the content of input field that invoked this function and converts\nit into a number. If the convertion fails, 1 is used. The result of the conversion\nis then substituted into the input field.",
            "itemtype": "method",
            "name": "asNumber",
            "return": {
                "description": "",
                "type": "Void"
            },
            "since": "0.0.6",
            "class": "TableDialog",
            "module": "Dialogs"
        },
        {
            "file": "customPlugins\\table2\\dialogs\\table2.js",
            "line": 175,
            "description": "Binds element that invoked this method with specific text input field: if the elements invokes this function,\nthe value of target text input field gets modified.\n\nIf the element invokes this function and target text input field value is not positive,\nthen this field recieves value 1.\n\nInvoking element must have `target` key to be set to a three-element array\n<code>[tabId, elementId, defaultValue]</code>\nwhere `tabId` and `elemId` chracterize location of the target element and `defaultValue`\nis value that is suggested for the target.",
            "itemtype": "method",
            "name": "suggestValue",
            "return": {
                "description": "",
                "type": "Void"
            },
            "since": "0.0.6",
            "class": "TableDialog",
            "module": "Dialogs"
        },
        {
            "file": "customPlugins\\table2\\dialogs\\table2.js",
            "line": 491,
            "description": "Binding {{#crossLink \"TableDialog/_colorPicker:property\"}}_colorPicker{{/crossLink}}\nto color-related input text fields.",
            "itemtype": "method",
            "name": "onLoad",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "TableDialog",
            "module": "Dialogs"
        },
        {
            "file": "customPlugins\\table2\\dialogs\\table2.js",
            "line": 517,
            "description": "The function to execute when the dialog is loaded (executed every time the dialog is opened).\n\nFills in table plugin dialog with selected (if any) table properties.",
            "itemtype": "method",
            "name": "onShow",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "TableDialog",
            "module": "Dialogs"
        },
        {
            "file": "customPlugins\\table2\\dialogs\\table2.js",
            "line": 561,
            "description": "Wrapper to call method {{#crossLink \"TableDialog/manageTable:method\"}}manageTable{{/crossLink}} method with\nthe second argument set to `false`.",
            "itemtype": "method",
            "name": "updateTable",
            "params": [
                {
                    "name": "editor",
                    "description": "instance of CKEDITOR",
                    "type": "CKEDITOR"
                },
                {
                    "name": "isNew",
                    "description": "whether the method should insert new table or modify exisiting one",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "dialog definition",
                "type": "Object"
            },
            "since": "0.0.6",
            "class": "TableDialog",
            "module": "Dialogs"
        },
        {
            "file": "customPlugins\\table2\\dialogs\\table2.js",
            "line": 576,
            "description": "Wrapper to call method {{#crossLink \"TableDialog/manageTable:method\"}}manageTable{{/crossLink}} method with\nthe second argument set to `true`.",
            "itemtype": "method",
            "name": "createTable",
            "params": [
                {
                    "name": "editor",
                    "description": "instance of CKEDITOR",
                    "type": "CKEDITOR"
                },
                {
                    "name": "isNew",
                    "description": "whether the method should insert new table or modify exisiting one",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "dialog definition",
                "type": "Object"
            },
            "since": "0.0.6",
            "class": "TableDialog",
            "module": "Dialogs"
        },
        {
            "file": "customPlugins\\table2\\dialogs\\table2Modify.js",
            "line": 13,
            "description": "Style for text input fields for numbers.",
            "itemtype": "property",
            "name": "_inputNumberStyle",
            "type": "{String}",
            "access": "private",
            "tagname": "",
            "class": "table2ModifyDialog",
            "module": "Dialogs"
        },
        {
            "file": "customPlugins\\table2\\dialogs\\table2Modify.js",
            "line": 21,
            "description": "Style for text input fields for choosing colors.",
            "itemtype": "property",
            "name": "_inputColorStyle",
            "type": "{String}",
            "access": "private",
            "tagname": "",
            "class": "table2ModifyDialog",
            "module": "Dialogs"
        },
        {
            "file": "customPlugins\\table2\\dialogs\\table2Modify.js",
            "line": 31,
            "description": "Color picker (JavaScript ColorPicker).\n\ndhtmlxColorPicker is open source GPL v2 and Free License [JavaScript component](http://dhtmlx.com/docs/products/dhtmlxColorPicker/)\nfor easy color selection.",
            "itemtype": "property",
            "name": "_colorPicker",
            "type": "DhtmlXColorPicker",
            "access": "private",
            "tagname": "",
            "since": "0.0.6",
            "class": "table2ModifyDialog",
            "module": "Dialogs"
        },
        {
            "file": "customPlugins\\table2\\dialogs\\table2Modify.js",
            "line": 43,
            "description": "{{#crossLink \"table2Dialog/_colorPicker:property\"}}_colorPicker{{/crossLink}} initializer.\n\n`z-index` of the color picker is assigned a value that is greater than `z-index` of\nthe table dialog window. Without this assignment, the color picker dialog window is\nlocated below the layer of the table dialog window and hence remains unreachable.\n\nThere might be a better way to find dynamically what z-index it should be assigned.\nFor the moment, the table dialog window turns out to have z-index 10010 (found by\nanalyzing its html code).",
            "itemtype": "method",
            "name": "colorPeackerInit",
            "return": {
                "description": "",
                "type": "Void"
            },
            "since": "0.0.6",
            "class": "table2ModifyDialog",
            "module": "Dialogs"
        },
        {
            "file": "customPlugins\\table2\\dialogs\\table2Modify.js",
            "line": 67,
            "description": "Draws text input fields to insert weight factors for the column widths.\n\nThe number of text input field is taken from a text input field responsable for the\nnumber of table columns. Once that text input field is modified, this function is fired.\nIf inserted number of columns is bigger than the number of the text input fields\nto insert column weight factors, then missing text input fields are appended.\nIf inserted number of the columns is smaller than the number of the text input fields\nto insert column weight factors, then extra text input fields are removed.",
            "itemtype": "method",
            "name": "drawColumns",
            "return": {
                "description": "",
                "type": "Void"
            },
            "since": "0.0.4",
            "access": "private",
            "tagname": "",
            "class": "table2ModifyDialog",
            "module": "Dialogs"
        },
        {
            "file": "customPlugins\\table2\\dialogs\\table2Modify.js",
            "line": 109,
            "description": "It takes the content of input field that invoked this function and converts\nit into a number. If the convertion fails, 1 is used. The result of the conversion\nis then substituted into the input field.",
            "itemtype": "method",
            "name": "asNumber",
            "return": {
                "description": "",
                "type": "Void"
            },
            "since": "0.0.6",
            "class": "table2ModifyDialog",
            "module": "Dialogs"
        },
        {
            "file": "customPlugins\\table2\\dialogs\\table2Modify.js",
            "line": 126,
            "description": "Binds element that invoked this method with specific text input field: if the elements invokes this function,\nthe value of target text input field gets modified.\n\nIf the element invokes this function and target text input field value is not positive,\nthen this field recieves value 1.\n\nInvoking element must have `target` key to be set to a three-element array\n<code>[tabId, elementId, defaultValue]</code>\nwhere `tabId` and `elemId` chracterize location of the target element and `defaultValue`\nis value that is suggested for the target.",
            "itemtype": "method",
            "name": "suggestValue",
            "return": {
                "description": "",
                "type": "Void"
            },
            "since": "0.0.6",
            "class": "table2ModifyDialog",
            "module": "Dialogs"
        },
        {
            "file": "customPlugins\\table2\\dialogs\\table2Modify.js",
            "line": 444,
            "description": "Binding {{#crossLink \"table2Dialog/_colorPicker:property\"}}_colorPicker{{/crossLink}}\nto color-related input text fields.",
            "itemtype": "method",
            "name": "onLoad",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "table2ModifyDialog",
            "module": "Dialogs"
        },
        {
            "file": "customPlugins\\table2\\dialogs\\table2Modify.js",
            "line": 468,
            "description": "The function to execute when the dialog is loaded (executed every time the dialog is opened).\n\nFills in table plugin dialog with selected (if any) table properties.",
            "itemtype": "method",
            "name": "onShow",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "table2ModifyDialog",
            "module": "Dialogs"
        },
        {
            "file": "js\\classes\\CKHelper\\Selection.js",
            "line": 21,
            "description": "Editor instance containing the selection.",
            "itemtype": "property",
            "name": "editor",
            "type": "CKEDITOR.editor",
            "access": "private",
            "tagname": "",
            "class": "Selection",
            "module": "CKHelper"
        },
        {
            "file": "js\\classes\\CKHelper\\Selection.js",
            "line": 28,
            "description": "Selected elements.",
            "itemtype": "property",
            "name": "selected",
            "type": "CKEDITOR.dom.selection",
            "access": "private",
            "tagname": "",
            "class": "Selection",
            "module": "CKHelper"
        },
        {
            "file": "js\\classes\\CKHelper\\Selection.js",
            "line": 38,
            "description": "Array of [range instances](http://docs.ckeditor.com/#!/api/CKEDITOR.dom.range) corresponding to the selection.",
            "itemtype": "property",
            "name": "ranges",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "Selection",
            "module": "CKHelper"
        },
        {
            "file": "js\\classes\\CKHelper\\Selection.js",
            "line": 48,
            "description": "{{#crossLink \"Selection/ranges:property\"}}ranges{{/crossLink}} getter.",
            "itemtype": "method",
            "name": "getRanges",
            "return": {
                "description": "array of CKEDITOR.dom.range instances",
                "type": "Array"
            },
            "class": "Selection",
            "module": "CKHelper"
        },
        {
            "file": "js\\classes\\CKHelper\\Selection.js",
            "line": 57,
            "description": "{{#crossLink \"Selection/selected:property\"}}selected{{/crossLink}} setter. Sets as well\n{{#crossLink \"Selection/ranges:property\"}}ranges{{/crossLink}}.",
            "itemtype": "method",
            "name": "setSelected",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Selection",
            "module": "CKHelper"
        },
        {
            "file": "js\\classes\\CKHelper\\Selection.js",
            "line": 71,
            "description": "{{#crossLink \"Selection/selected:property\"}}selected{{/crossLink}} getter.",
            "itemtype": "method",
            "name": "getSelected",
            "return": {
                "description": "",
                "type": "CKEDITOR.dom.selection"
            },
            "access": "private",
            "tagname": "",
            "class": "Selection",
            "module": "CKHelper"
        },
        {
            "file": "js\\classes\\CKHelper\\Selection.js",
            "line": 82,
            "description": "{{#crossLink \"Selection/editor:property\"}}editor{{/crossLink}} getter.",
            "itemtype": "method",
            "name": "getEditor",
            "return": {
                "description": "",
                "type": "CKEDITOR.editor"
            },
            "class": "Selection",
            "module": "CKHelper"
        },
        {
            "file": "js\\classes\\CKHelper\\Selection.js",
            "line": 91,
            "description": "{{#crossLink \"Selection/editor:property\"}}editor{{/crossLink}} setter. Sets as well\n{{#crossLink \"Selection/selected:property\"}}selected{{/crossLink}} and\n{{#crossLink \"Selection/ranges:property\"}}ranges{{/crossLink}}.",
            "itemtype": "method",
            "name": "setEditor",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "CKEDITOR.editor"
                }
            ],
            "class": "Selection",
            "module": "CKHelper"
        },
        {
            "file": "js\\classes\\CKHelper\\Selection.js",
            "line": 107,
            "description": "If selection is empty, returns empty array. Otherwise returns two dimensional array of the form\n<pre>\n[[a<sub>00</sub>, a<sub>01</sub>, ...], [a<sub>10</sub>, a<sub>11</sub>, ...], ...].\n</pre>\nEach inner array corresponds to the elements inside the\n{{#crossLink \"Selection/ranges:property\"}}ranges{{/crossLink}} property of the selection.\nSince DOM is an ***ordered*** collection of the nodes, the the above mentioned array is\njust a collection of simply-connected sets of nodes corresponding to the selection.\n\nNB1: _Simply-connected_ set is a set such that there exists a path inside the set\nconnecting two arbitrary elements of the set.\n\nNB2: _Path_ consists of pieces connecting two neighbours (the set is ordered, so that\nthe concept of \"neighbour\" exists).",
            "itemtype": "method",
            "name": "selectedNodes",
            "params": [
                {
                    "name": "sel",
                    "description": "",
                    "type": "Selection"
                }
            ],
            "access": "private",
            "tagname": "",
            "return": {
                "description": "two dimensional array of\n                                      [CKEDITOR.dom.domObject](http://docs.ckeditor.com/#!/api/CKEDITOR.dom.domObject)\n                                      or empty array",
                "type": "Array"
            },
            "class": "Selection",
            "module": "CKHelper"
        },
        {
            "file": "js\\classes\\CKHelper\\Selection.js",
            "line": 240,
            "description": "Two-dimensional array of nodes in selection.\n\nThis property was created in order to assure that private method\n{{#crossLink \"Selection/selectedNodes:method\"}}selectedNodes{{/crossLink}} gets called\njust once because it seemingly modifies DOM in such\na way that if one calles it multiple times, a wrong array offset is requested, hence, an\nerror is generated.",
            "itemtype": "property",
            "name": "nodes",
            "type": "{Array}      array of [CKEDITOR.dom.domObject](http://docs.ckeditor.com/#!/api/CKEDITOR.dom.domObject)",
            "class": "Selection",
            "module": "CKHelper"
        },
        {
            "file": "js\\classes\\CKHelper\\Selection.js",
            "line": 253,
            "description": "Returns text representation of the selected nodes. Remember that they are located inside a two-dimensional array.",
            "itemtype": "method",
            "name": "toText",
            "params": [
                {
                    "name": "blockSeparator",
                    "description": "string to be used as a separator between arrays",
                    "type": "String"
                },
                {
                    "name": "elemSeparator",
                    "description": "string to be used as a separator between elements in array",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Selection",
            "module": "CKHelper"
        },
        {
            "file": "js\\classes\\CKHelper\\Selection.js",
            "line": 278,
            "description": "Returns the start element of selection if it exists.",
            "itemtype": "method",
            "name": "getStartElement",
            "return": {
                "description": "",
                "type": "CKEDITOR.dom.element"
            },
            "class": "Selection",
            "module": "CKHelper"
        },
        {
            "file": "js\\classes\\CKHelper\\Selection.js",
            "line": 290,
            "description": "Returns `true` if {{#crossLink \"Selection/selectedNodes:method\"}}selectedNodes{{/crossLink}} is empty,\n`false` otherwise.\n\n{{#crossLink \"Selection/selectedNodes:method\"}}selectedNodes{{/crossLink}} output is considered empty\nif it is either empty array `[]` or an array containing empty array: `[[]]`.",
            "itemtype": "method",
            "name": "isEmpty",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Selection",
            "module": "CKHelper"
        },
        {
            "file": "js\\classes\\CKHelper\\Selection.js",
            "line": 307,
            "description": "Returns `true` if selected text starts inside a link, `false` otherwise.\nIn case when the selection is empty, cursor position is considered as beginning\nof empty selection.",
            "itemtype": "method",
            "name": "startsInsideLink",
            "return": {
                "description": "whether the selection starts inside a link",
                "type": "Boolean"
            },
            "class": "Selection",
            "module": "CKHelper"
        },
        {
            "file": "js\\classes\\CKHelper\\Selection.js",
            "line": 324,
            "description": "Returns `true` if selection content is editable, `false` otherwise.\n\nSelection is editable if:\n<ol>\n<li>it is empty</li>\n<li>it contains a single element that has type `text`</li>\n<li>it contains a single element that is a link which child nodes are of type `text`</li>\n</ol>",
            "itemtype": "method",
            "name": "isEditable",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Selection",
            "module": "CKHelper"
        },
        {
            "file": "js\\classes\\CKHelper\\Selection.js",
            "line": 377,
            "description": "Removes duplicate DOM nodes form input array. Each element of the array must be an instance of\n[CKEDITOR.dom.domObject](http://docs.ckeditor.com/#!/api/CKEDITOR.dom.domObject).",
            "itemtype": "method",
            "name": "dropDuplicates",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "$arr",
                    "description": "one-dimensional array of\n                                             [CKEDITOR.dom.domObject](http://docs.ckeditor.com/#!/api/CKEDITOR.dom.domObject)\n                                             objects",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "array of distinct\n                                             [CKEDITOR.dom.domObject](http://docs.ckeditor.com/#!/api/CKEDITOR.dom.domObject)\n                                             elements",
                "type": "Array"
            },
            "class": "Selection",
            "module": "CKHelper"
        },
        {
            "file": "js\\classes\\CKHelper\\Selection.js",
            "line": 420,
            "description": "Replaces each element in {{#crossLink \"Selection/selected:property\"}}selected{{/crossLink}} by\na link in which this element is located. In case the element is not located inside any link, then it\nis leaved without changes. The output array mimics the structure of\n{{#crossLink \"Selection/selected:property\"}}selected{{/crossLink}} array: it should be a two-dimensional array\nwithout duplicates.",
            "itemtype": "method",
            "name": "absorbLink",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Selection",
            "module": "CKHelper"
        },
        {
            "file": "js\\classes\\CKHelper\\Selection.js",
            "line": 457,
            "description": "Propagate style property named `prop` with the value `val` to the last descendant of each node in the selection.\nRemember that the selection is in general a two-dimensional array (or one-dimensional if the selection is empty).\n\nUpdate: added possibility for `prop` to be an object (in this case the rest argument are ignored)\nwith the following keys: <ol><li>\n`name` - name of the style property\n</li><li>\n`value` - on-value of the above property\n</li><li>\n`altVal` - off-value of the above property\n</li></ol>",
            "itemtype": "method",
            "name": "switchDeepestChildStyle",
            "params": [
                {
                    "name": "prop",
                    "description": "name of the property to be imposed",
                    "type": "String|Object"
                },
                {
                    "name": "val",
                    "description": "on-value of the above property",
                    "type": "String"
                },
                {
                    "name": "altVal",
                    "description": "off-value of the property",
                    "type": "String"
                }
            ],
            "since": "0.0.4",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Selection",
            "module": "CKHelper"
        },
        {
            "file": "js\\classes\\CKHelper\\Selection.js",
            "line": 499,
            "description": "Returns first ancestor of {{#crossLink \"Selection/nodes:property\"}}nodes{{/crossLink}} for which `criteria` evaluates to\n`true`.\n\nTo function `criteria` there will be given one by one elements from {{#crossLink \"Selection/nodes:property\"}}nodes{{/crossLink}}",
            "itemtype": "method",
            "name": "findAcsendant",
            "params": [
                {
                    "name": "criteria",
                    "description": "[description]",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "[CKEDITOR.dom.element](http://docs.ckeditor.com/#!/api/CKEDITOR.dom.element)",
                "type": "CKEDITOR.dom.element"
            },
            "class": "Selection",
            "module": "CKHelper"
        },
        {
            "file": "js\\classes\\Helper\\Unit.js",
            "line": 21,
            "description": "Absolute value of the Unit instance.",
            "itemtype": "property",
            "name": "_value",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "since": "0.0.5",
            "class": "Unit",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\Helper\\Unit.js",
            "line": 29,
            "description": "Measurement unit of the Unit instance.",
            "itemtype": "property",
            "name": "_measure",
            "type": "String",
            "access": "private",
            "tagname": "",
            "since": "0.0.5",
            "class": "Unit",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\Helper\\Unit.js",
            "line": 37,
            "description": "Initializes properties {{#crossLink \"Unit/_value:property\"}}_value{{/crossLink}} and\n{{#crossLink \"Unit/_measure:property\"}}_measure{{/crossLink}}. The order is as follows:\n<ol><li>\nIf `value` is an instance of {{#crossLink \"Unit\"}}Unit{{/crossLink}}, then its value and measure\nare used to initialize corresponding properties of the current instance.\n</li><li>\nIn case `measure` is provided and it is not an empty string, its value is assigned to\n{{#crossLink \"Unit/_measure:property\"}}_measure{{/crossLink}}.\n</li><li>\nIf `value` is a number, then {{#crossLink \"Unit/_value:property\"}}_value{{/crossLink}} is set to that value.\n</li><li>\nIf `value` is a string, it is parsed into a float number which is then assigned to\n{{#crossLink \"Unit/_value:property\"}}_value{{/crossLink}}. Then it is tried to pick up eventual information\nabout dimension from that string and if the dimensiomnturns out to be non-empty string and\n{{#crossLink \"Unit/_measure:property\"}}_measure{{/crossLink}} turns out to be not initialized,\nthe found dimension is assigned to {{#crossLink \"Unit/_measure:property\"}}_measure{{/crossLink}}.\n</li></oi>",
            "itemtype": "method",
            "name": "constructor",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Any"
                },
                {
                    "name": "measure",
                    "description": "",
                    "type": "String|Null"
                }
            ],
            "class": "Unit",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\Helper\\Unit.js",
            "line": 96,
            "description": "{{#crossLink \"Unit/_value:property\"}}_value{{/crossLink}} getter.",
            "itemtype": "method",
            "name": "getValue",
            "return": {
                "description": "",
                "type": "Number"
            },
            "since": "0.0.5",
            "class": "Unit",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\Helper\\Unit.js",
            "line": 106,
            "description": "Returns {{#crossLink \"Unit/_value:property\"}}_value{{/crossLink}} as a string. If the\nvalue is not defined, an empty string is returned.",
            "itemtype": "method",
            "name": "getValueAsString",
            "return": {
                "description": "",
                "type": "String"
            },
            "since": "0.0.7",
            "class": "Unit",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\Helper\\Unit.js",
            "line": 118,
            "description": "{{#crossLink \"Unit/_value:property\"}}_value{{/crossLink}} setter.",
            "itemtype": "method",
            "name": "setValue",
            "params": [
                {
                    "name": "val",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "since": "0.0.5",
            "class": "Unit",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\Helper\\Unit.js",
            "line": 133,
            "description": "{{#crossLink \"Unit/_measure:property\"}}_measure{{/crossLink}} getter.",
            "itemtype": "method",
            "name": "getMeasure",
            "return": {
                "description": "",
                "type": "String"
            },
            "since": "0.0.5",
            "class": "Unit",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\Helper\\Unit.js",
            "line": 144,
            "description": "{{#crossLink \"Unit/_measure:property\"}}_measure{{/crossLink}} setter.",
            "itemtype": "method",
            "name": "setMeasure",
            "params": [
                {
                    "name": "m",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "since": "0.0.5",
            "class": "Unit",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\Helper\\Unit.js",
            "line": 158,
            "description": "Returns a new Unit instance whose {{#crossLink \"Unit/_value:property\"}}_value{{/crossLink}} and\n{{#crossLink \"Unit/_measure:property\"}}_measure{{/crossLink}} are equal to the target ones.",
            "since": "0.0.6",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "target clone",
                "type": "Unit"
            },
            "class": "Unit",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\Helper\\Unit.js",
            "line": 169,
            "description": "Compares the target with the argument. Returns `true`, if the argument can be converted into Unit instance\nwith {{#crossLink \"Unit/_measure:property\"}}_measure{{/crossLink}} attribute being equal to the target's one.\nOtherwise, returns `false`.",
            "itemtype": "method",
            "name": "isLikeAs",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Obj"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Unit",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\Helper\\Unit.js",
            "line": 188,
            "description": "Returns `true` if the instance is equal to zero, otherwise returns `false`.\n\nAn instance is said to be equal to zero if its {{#crossLink \"Unit/_value:property\"}}_value{{/crossLink}}\nis equal to zero.",
            "itemtype": "method",
            "name": "isZero",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "since": "0.0.6",
            "class": "Unit",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\Helper\\Unit.js",
            "line": 201,
            "description": "Sums up the target and `unit`.\n\nIf they have different units of measurement, an error is thrown unless at least of the operands\nis different from zero.\n\nExamples:<ol>\n<li>1cm + 2cm  =  3cm </li>\n<li>1cm + 2px  =  error </li>\n<li>4 + 7  =  11 </li>\n<li>0px + 2cm  =  2cm </li>\n<li>1px + 0cm  =  1px </li>\n<li>0 + 2cm  =  2cm </li>\n<li>1px + 0  =  1px </li>\n<li>0px + 0cm  =  0</li>\n<li>0 + 0cm  =  0</li>\n<li>0px + 0  =  0</li>\n<li>0 + 0  =  0</li>\n</ol>",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "unit",
                    "description": "",
                    "type": "Unit"
                }
            ],
            "return": {
                "description": "the sum of the target and the argument.",
                "type": "Unit"
            },
            "class": "Unit",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\Helper\\Unit.js",
            "line": 244,
            "description": "Subtracts the argument from the target. The argument is converted to a Unit object,\nthen its sign is changed and the method {{#crossLink \"Unit/add:method\"}}add(){{/crossLink}} is called.",
            "itemtype": "method",
            "name": "sub",
            "params": [
                {
                    "name": "obj",
                    "description": "it will be first converted to a Unit instance.",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "the difference between target and the argument.",
                "type": "Unit"
            },
            "class": "Unit",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\Helper\\Unit.js",
            "line": 257,
            "description": "Multiplies target by `n`.\n\nReturns new instance of {{#crossLink \"Unit\"}}Unit{{/crossLink}}.",
            "itemtype": "method",
            "name": "times",
            "params": [
                {
                    "name": "n",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Unit"
            },
            "class": "Unit",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\Helper\\Unit.js",
            "line": 276,
            "description": "Returns string representation of the instance: join absolute value and unit of measurement.\nIf parameter is provided, it is used as a separator between the abs.value and unit of\nmeasurement.",
            "itemtype": "method",
            "name": "toString",
            "params": [
                {
                    "name": "sep",
                    "description": "",
                    "type": "String|null"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "since": "0.0.5",
            "class": "Unit",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\Helper\\Unit.js",
            "line": 299,
            "description": "Returns the result of division of `n` by `m` with `p` digits after point.\n\nNotice `bind(this)` at the end. It is added to be able to call\n{{#crossLink \"Unit/isInteger:method\"}}isInteger{{/crossLink}} method from this private one.",
            "itemtype": "method",
            "name": "_fracWithPresicion",
            "params": [
                {
                    "name": "n",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "m",
                    "description": "Non-zero number",
                    "type": "Number"
                },
                {
                    "name": "p",
                    "description": "Non-negative integer number",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "since": "0.0.5",
            "access": "private",
            "tagname": "",
            "class": "Unit",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\Helper\\Unit.js",
            "line": 331,
            "description": "Returns the result of division of the target by the argument.\n\nThe following cases are distinguished (in order of processing):\n<ol><li>\nIf the argument is a non-zero number, then {{#crossLink \"Unit/_value:property\"}}_value{{/crossLink}}\nof the target is divided by this number. If it is zero, an error is thrown.\n</li><li>\nIf the argument is an instance of {{#crossLink \"Unit\"}}Unit{{/crossLink}}:\n<ul><li>\nif the denominator is dimensionless or has the same dimensionality as the numerator,\nthen division is performed normally\n</li><li>\nif the numerator and  denominator have different dimesions, then an error is thrown.\n</li></ul>\n</li></ol>\nIf the argument is not an instance of {{#crossLink \"Unit\"}}Unit{{/crossLink}} class, then\nthe method is called again with argument being converted into Unit instance.",
            "itemtype": "method",
            "name": "frac",
            "params": [
                {
                    "name": "u",
                    "description": "",
                    "type": "Unit"
                },
                {
                    "name": "p",
                    "description": "Precision (optional). Number of digits after the decimal point",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "",
                "type": "Unit"
            },
            "class": "Unit",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\Helper\\Unit.js",
            "line": 380,
            "description": "Returns `true` if the target's unit of measurement is a non-empty string. Otherwise,\nreturns `false`.",
            "itemtype": "method",
            "name": "hasMeasure",
            "since": "0.0.5",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Unit",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\Helper\\Unit.js",
            "line": 392,
            "description": "Returns an instance of {{#crossLink \"Unit\"}}Unit{{/crossLink}} that represents\nthe target in percentage form if it is a dimensionless number.\nIf instead it has a dimension, an error is thrown.\n\nSome additional code is added in order to suppres possible artificial digits\npertinent to javascript. For example, in javascript 0.164 * 100 is equal to\nsomething like 16.40000...02.",
            "itemtype": "method",
            "name": "toPercent",
            "return": {
                "description": "",
                "type": "Unit"
            },
            "since": "0.0.5",
            "class": "Unit",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\Helper\\Unit.js",
            "line": 421,
            "description": "Returns an instance of {{#crossLink \"Unit\"}}Unit{{/crossLink}} that represents\nthe target in percentage form if it is a dimensionless number.\nIf instead it has a dimension, an error is thrown.",
            "itemtype": "method",
            "name": "fromPercent",
            "return": {
                "description": "",
                "type": "Unit"
            },
            "since": "0.0.5",
            "class": "Unit",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\Helper\\Unit.js",
            "line": 436,
            "description": "If the instance has no {{#crossLink \"Unit/_measure:property\"}}_measure{{/crossLink}}, then\ncalls method {{#crossLink \"Unit/setMeasure:method\"}}setMeasure{{/crossLink}} to impose it\nto value `m`.",
            "itemtype": "method",
            "name": "suggestMeasure",
            "params": [
                {
                    "name": "m",
                    "description": "",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Unit",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\Helper\\Unit.js",
            "line": 454,
            "description": "Returns a new Unit instance with {{#crossLink \"Unit/_value:property\"}}_value{{/crossLink}}\nbeing \"floored\".",
            "itemtype": "method",
            "name": "floor",
            "return": {
                "description": "",
                "type": "Unit"
            },
            "since": "0.0.6",
            "class": "Unit",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\Helper\\Unit.js",
            "line": 465,
            "description": "Whether the argument is an integer decimal number.",
            "itemtype": "method",
            "name": "isInteger",
            "params": [
                {
                    "name": "n",
                    "description": "",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "since": "0.0.8",
            "class": "Unit",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Cell.js",
            "line": 20,
            "description": "Re-set private properties defined in parent class {{#crossLink \"Tag\"}}Tag{{/crossLink}}:\n<ol><li>\n{{#crossLink \"Tag/tag:property\"}}tag{{/crossLink}} to be \"td\"\n</li><li>\n{{#crossLink \"Tag/className:property\"}}className{{/crossLink}} to be \"Cell\"\n</li><li>\n{{#crossLink \"Tag/_properties:property\"}}_properties{{/crossLink}} to be\n{{#crossLink \"CellProperties\"}}TableCellStyles{{/crossLink}}\n</li><li>\n{{#crossLink \"Tag/content:property\"}}content{{/crossLink}} accepts current class argument.\n</li></ol>",
            "itemtype": "method",
            "name": "constructor",
            "class": "Cell",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Image.js",
            "line": 21,
            "description": "Re-set private properties defined in parent class {{#crossLink \"Tag\"}}Tag{{/crossLink}}:\n<ol><li>\n{{#crossLink \"Tag/tag:property\"}}tag{{/crossLink}} to be \"img\"\n</li><li>\n{{#crossLink \"Tag/className:property\"}}className{{/crossLink}} to be \"Image\"\n</li><li>\n{{#crossLink \"Tag/styles:property\"}}styles{{/crossLink}} to be\n{{#crossLink \"ImageStyles\"}}ImageStyles{{/crossLink}}\n</li></ol>",
            "itemtype": "method",
            "name": "constructor",
            "class": "Image",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Image.js",
            "line": 37,
            "description": "Sets `src` property of image {{#crossLink \"Tag/attributes:property\"}}attributes{{/crossLink}}\nif `url` corresponds to an image with non zero width and height. In this case, `height` and\n`width` properties are set in {{#crossLink \"Tag/styles:property\"}}styles{{/crossLink}} and\n{{#crossLink \"Tag/attributes:property\"}}attributes{{/crossLink}}.",
            "itemtype": "method",
            "name": "setOrigin",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Image",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Image.js",
            "line": 67,
            "description": "Drops protocol name from `url`. Everything until the first occurence of '://' will be removed (inclusively).",
            "itemtype": "method",
            "name": "dropProtocol",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Image",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Image.js",
            "line": 80,
            "description": "Returns protocol corresponding to `url`: everything starting from the beginning of line until\nfirst occurence of '://' (exclusively).",
            "itemtype": "method",
            "name": "getProtocol",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Image",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Image.js",
            "line": 99,
            "description": "Gets \"src\" property of image {{#crossLink \"Attributes\"}}attribute{{/crossLink}} inherited from\n{{#crossLink \"Tag\"}}Tag{{/crossLink}} class.",
            "itemtype": "method",
            "name": "getOrigin",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Image",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Image.js",
            "line": 109,
            "description": "Gets image height. It is read from {{#crossLink \"Tag/attributes:property\"}}attributes{{/crossLink}}.\nIt is set along with `src` attribute in {{#crossLink \"Image/setOrigin:method\"}}setOrigin{{/crossLink}}\nmethod.",
            "itemtype": "method",
            "name": "getHeight",
            "return": {
                "description": "",
                "type": "Integer"
            },
            "class": "Image",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Image.js",
            "line": 120,
            "description": "Returns html representation of the instance if\n{{#crossLink \"Image/getOrigin:method\"}}getOrigin(){{/crossLink}} returns non-empty string.\nOtherwise, returns empty string.\n\nHtml representation consists of opening and closing tags that are output of methods\n{{#crossLink \"Tag/openingTag:method\"}}openingTag{{/crossLink}} and\n{{#crossLink \"Tag/closingTag:method\"}}closingTag{{/crossLink}} correspondingly.\n\nThis method overrides the parent one {{#crossLink \"Tag/toHtml:method\"}}toHtml{{/crossLink}}\n(since I could not consistently call a parent class method from a child one when the child\nclass overrides the corresponding parent method.)",
            "itemtype": "method",
            "name": "toHtml",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Image",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Link.js",
            "line": 19,
            "description": "Re-set private properties defined in parent class {{#crossLink \"Tag\"}}Tag{{/crossLink}}:\n<ol><li>\n{{#crossLink \"Tag/tag:property\"}}tag{{/crossLink}} to be \"a\"\n</li><li>\n{{#crossLink \"Tag/className:property\"}}className{{/crossLink}} to be \"Link\"\n</li><li>\n{{#crossLink \"Tag/_properties:property\"}}_properties{{/crossLink}} to be\n{{#crossLink \"LinkProperties\"}}LinkProperties{{/crossLink}}\n</li></ol>",
            "itemtype": "method",
            "name": "constructor",
            "class": "Link",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Link.js",
            "line": 35,
            "description": "Scheme corresponding to link.",
            "itemtype": "property",
            "name": "_scheme",
            "type": "{String}",
            "access": "private",
            "tagname": "",
            "since": "0.0.7",
            "class": "Link",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Link.js",
            "line": 44,
            "description": "Allowed schemes.",
            "itemtype": "property",
            "name": "_allowedSchemes",
            "type": "{Array}",
            "since": "0.0.7",
            "access": "private",
            "tagname": "",
            "class": "Link",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Link.js",
            "line": 54,
            "description": "{{#crossLink \"Link/_allowedSchemes:property\"}}_allowedSchemes{{/crossLink}} getter.",
            "itemtype": "method",
            "name": "getAllowedSchemes",
            "since": "0.0.7",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Link",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Link.js",
            "line": 64,
            "description": "{{#crossLink \"Link/_scheme:property\"}}_scheme{{/crossLink}} setter.\n\nIf `s` is not among {{#crossLink \"Link/_allowedSchemes:property\"}}_allowedSchemes{{/crossLink}},\na {{#crossLink \"Link/_defaultScheme:property\"}}default scheme{{/crossLink}} is used.",
            "itemtype": "method",
            "name": "setScheme",
            "params": [
                {
                    "name": "s",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "since": "0.0.7",
            "class": "Link",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Link.js",
            "line": 78,
            "description": "{{#crossLink \"Link/_scheme:property\"}}_scheme{{/crossLink}} getter.",
            "itemtype": "method",
            "name": "getScheme",
            "since": "0.0.7",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Link",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Link.js",
            "line": 88,
            "description": "Returns dafault scheme.\n\nTo be consistent, the returned value must be one of the allowed values.",
            "itemtype": "method",
            "name": "getDefaultScheme",
            "since": "0.0.7",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Link",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Link.js",
            "line": 100,
            "description": "Returns value of \"href\" key inside {{#crossLink \"Tag/_properties:property\"}}_properties{{/crossLink}}.",
            "itemtype": "method",
            "name": "getHref",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Link",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Link.js",
            "line": 109,
            "description": "Href setter. Calles parent method  {{#crossLink \"Tag/setProperty:method\"}}setProperty{{/crossLink}}('href', ...).",
            "itemtype": "method",
            "name": "setHref",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Link",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Link.js",
            "line": 124,
            "description": "Sets `text-attribute` of the {{#crossLink \"Link/style:property\"}}`style`{{/crossLink}} property.\nIf the argument is missing or equal to `true`, \"underline\" is imposed.\nIf the argument is false, then \"none\" is imposed.\nIf the argument is a string,  `text-property` will be assigned to be equal to that string.\nIf nothing of the above holds, `text-property` remains unchanged.",
            "itemtype": "method",
            "name": "underline",
            "params": [
                {
                    "name": "val",
                    "description": "",
                    "type": "String|Null|Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Link",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Link.js",
            "line": 144,
            "description": "Sets `text-attribute` of the {{#crossLink \"Link/style:property\"}}`style`{{/crossLink}} property to be `none`.",
            "itemtype": "method",
            "name": "dropUnderline",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Link",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Link.js",
            "line": 153,
            "description": "Apply target properties on the argument `obj`. The following cases are distinguished:\n<ul><li>\nthe argument is an instance of {{#crossLink \"Link\"}}Link{{/crossLink}}. In this case, returns output of\n{{#crossLink \"Link/updateLink:method\"}}updateLink{{/crossLink}} method.\n</li><li>\nthe argument is an instance of {{#crossLink \"Content\"}}Content{{/crossLink}}. In this case, returns output of\n{{#crossLink \"Link/applyContent:method\"}}applyContent{{/crossLink}} method.\n</li><li>\nthe argument is an instance of {{#crossLink \"Tag\"}}Tag{{/crossLink}}. In this case, returns output of\n{{#crossLink \"Link/applyTag:method\"}}applyTag{{/crossLink}} method.\n</li></ul>\nIf non of the above holds, result of {{#crossLink \"Link/wrap:method\"}}wrap{{/crossLink}} method is returned.",
            "itemtype": "method",
            "name": "apply",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "type of output depends on input argument",
                "type": "Any"
            },
            "class": "Link",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Link.js",
            "line": 187,
            "description": "Returns a copy of the target in which {{#crossLink \"Tag/content:property\"}}content{{/crossLink}}\ncontains the only element which is `obj`.",
            "itemtype": "method",
            "name": "wrap",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "",
                "type": "Link"
            },
            "class": "Link",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Link.js",
            "line": 208,
            "description": "Converts the argument in link. Argument `tagObj` must be a {{#crossLink \"Tag\"}}Tag{{/crossLink}} instance.\nIf its {{#crossLink \"Tag/content\"}}content{{/crossLink}} is\n<ol><li>\nnon empty, then it is returned a copy of the argument in which {{#crossLink \"Tag/content:property\"}}content{{/crossLink}}\nis replaced by output of {{#crossLink \"Link/applyContent:method\"}}applyContent{{/crossLink}} method.\n</li><li>\nempty, then a {{#crossLink \"Link\"}}Link{{/crossLink}} instance is returned. This instance has\n{{#crossLink \"Tag/attributes:property\"}}attributes{{/crossLink}} and\n{{#crossLink \"Tag/styles:property\"}}styles{{/crossLink}} of the target and its\n{{#crossLink \"Tag/content:property\"}}content{{/crossLink}} contains `tagObj` as the only element.\n</li><li>\n</li></ol>",
            "itemtype": "method",
            "name": "applyTag",
            "params": [
                {
                    "name": "tagObj",
                    "description": "",
                    "type": "Tag"
                }
            ],
            "return": {
                "description": "",
                "type": "Tag|Link"
            },
            "class": "Link",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Link.js",
            "line": 240,
            "description": "Modifies a Content instance in such a way that {{#crossLink \"Link/apply:method\"}}apply{{/crossLink}}\nis applied on all elements of the argumet.",
            "itemtype": "method",
            "name": "applyContent",
            "params": [
                {
                    "name": "cntn",
                    "description": "",
                    "type": "Content"
                }
            ],
            "return": {
                "description": "",
                "type": "Content"
            },
            "class": "Link",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Link.js",
            "line": 264,
            "description": "Returns a new Link instance with `href` as in the target, {{#crossLink \"Tag/content:property\"}}content{{/crossLink}}\nas in the argument, {{#crossLink \"Tag/attributes:property\"}}attributes{{/crossLink}} and\n{{#crossLink \"Tag/styles:property\"}}styles{{/crossLink}} are as in the argument but augmented by corresponding values\nfrom the target",
            "itemtype": "method",
            "name": "updateLink",
            "params": [
                {
                    "name": "link",
                    "description": "",
                    "type": "Link"
                }
            ],
            "return": {
                "description": "",
                "type": "Link"
            },
            "class": "Link",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Link.js",
            "line": 287,
            "description": "Returns `true` if the link's inline style {{#crossLink \"Tag/_properties:property\"}}_properties{{/crossLink}} contain\n`text-decoration` key which is set to `underline`. Otherwise, `false` is returned.",
            "itemtype": "method",
            "name": "isUnderlined",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "since": "0.0.6",
            "class": "Link",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Link.js",
            "line": 298,
            "description": "Link template: json object of table properties that parametrise the table. As required, overrides\nbase class method {{#crossLink \"Tag/template:method\"}}Tag::template{{/crossLink}}.\n\nReturns an object with the following keys:<dl>\n<dt>href</dt><dd> (String) value of the link \"href\" attribute</dd>\n<dt>scheme</dt><dd> (String) scheme (mail or link)</dd>\n<dt>color</dt><dd>(String) link color</dd>\n<dt>isUnderlined</dt><dd>(Boolean) whether the link is underlined</dd>\n<dt>isCompound</dt><dd>(Boolean) whether the link content contains more that one element</dd>\n<dt>target</dt><dd> (String) in what window the link is supposed to be open</dd>\n<dt>text</dt><dd> (String) string representation of the link content</dd>\n<dt>title</dt><dd> (String) title attribute</dd>\n</dl>",
            "itemtype": "method",
            "name": "template",
            "return": {
                "description": "",
                "type": "Object"
            },
            "since": "0.0.7",
            "class": "Link",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Link.js",
            "line": 336,
            "description": "Splits `href` into \"protocol\" part and the rest.\n\nReturns an object with keys <ol><li>\n`protocol` containing only alphanumeric symbols\n</li><li>\n`href` containing the rest of the input string without finishing slash, starting semicolon and slashes.\n</li></ol>",
            "itemtype": "method",
            "name": "parseUri",
            "params": [
                {
                    "name": "href",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "since": "0.0.6",
            "static": 1,
            "class": "Link",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\List.js",
            "line": 21,
            "description": "Array of allowed values for the tag names: ['ol', 'ul'].",
            "itemtype": "property",
            "name": "_allowedTags",
            "type": "{Array}",
            "access": "private",
            "tagname": "",
            "class": "List",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\List.js",
            "line": 29,
            "description": "{{#crossLink \"List/_allowedTags:property\"}}_allowedTags{{/crossLink}} getter.\n\nIt returns by value, not by reference.",
            "itemtype": "method",
            "name": "getAllowedTags",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "List",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\List.js",
            "line": 40,
            "description": "Re-set private properties defined in parent class {{#crossLink \"Tag\"}}Tag{{/crossLink}}:\n<ol><li>\n{{#crossLink \"Tag/tag:property\"}}tag{{/crossLink}} to be \"td\"\n</li><li>\n{{#crossLink \"Tag/className:property\"}}className{{/crossLink}} to be \"Cell\"\n</li><li>\n{{#crossLink \"Tag/styles:property\"}}styles{{/crossLink}} to be\n{{#crossLink \"TableCellStyles\"}}TableCellStyles{{/crossLink}}\n</li><li>\n{{#crossLink \"Tag/content:property\"}}content{{/crossLink}} accepts current class argument.\n</li></ol>",
            "itemtype": "method",
            "name": "constructor",
            "class": "List",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\List.js",
            "line": 58,
            "description": "Change the {{#crossLink \"Tag/tag:property\"}}tag{{/crossLink}} of the list. If the argument is not in\nthe array of allowed names {{#crossLink \"List/_allowedTags:property\"}}_allowedTags{{/crossLink}}, then no\nchange occurs.",
            "itemtype": "method",
            "name": "switchName",
            "params": [
                {
                    "name": "name",
                    "description": "the value to be imposed as a list type.",
                    "type": "String"
                }
            ],
            "class": "List",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\List.js",
            "line": 71,
            "description": "Gets the number of the list items",
            "itemtype": "method",
            "name": "itemNum",
            "return": {
                "description": "an integer number",
                "type": "Number"
            },
            "class": "List",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\List.js",
            "line": 80,
            "description": "Appends an object to the list items. The object must be a ListItem instance.\nIf not, an error is thrown.",
            "itemtype": "method",
            "name": "appendItem",
            "params": [
                {
                    "name": "item",
                    "description": "an instance of ListItem",
                    "type": "ListItem"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "List",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\List.js",
            "line": 94,
            "description": "Inserts the item at the given position. If the item to insert is a ListItem instance, then\n{{#crossLink \"Content/insertElemAt:method\"}}Content::insertElemAt(){{/crossLink}}\nContent::insertElemAt() is called. Otherwise, an error is thrown.",
            "itemtype": "method",
            "name": "insertItemAt",
            "params": [
                {
                    "name": "pos",
                    "description": "index of the position of there to insert the item",
                    "type": "Number"
                },
                {
                    "name": "item",
                    "description": "item to insert",
                    "type": "ListItem"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "List",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\List.js",
            "line": 111,
            "description": "Appends list: takes list items of the argument and appends it one by one to the target list.\nThe argument must be an instance of List. If not, an error is thrown.",
            "itemtype": "method",
            "name": "appendList",
            "params": [
                {
                    "name": "list",
                    "description": "",
                    "type": "List"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "List",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\List.js",
            "line": 129,
            "description": "Wraps elements of the input array into a {{#crossLink \"ListItem\"}}list item{{/crossLink}} object\nand appends it to its {{#crossLink \"Tag/content:property\"}}content{{/crossLink}} property defined in\nparent class {{#crossLink \"Tag\"}}Tag{{/crossLink}}.\nIf the argument is not of array type, creates a single-element array and apply the above procedure.",
            "itemtype": "method",
            "name": "appendAsItems",
            "params": [
                {
                    "name": "itemArr",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "List",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\ListItem.js",
            "line": 20,
            "description": "Re-set private properties defined in parent class {{#crossLink \"Tag\"}}Tag{{/crossLink}}:\n<ol><li>\n{{#crossLink \"Tag/tag:property\"}}tag{{/crossLink}} to be \"td\"\n</li><li>\n{{#crossLink \"Tag/className:property\"}}className{{/crossLink}} to be \"Cell\"\n</li><li>\n{{#crossLink \"Tag/_properties:property\"}}_properties{{/crossLink}} to be\n{{#crossLink \"ListItemProperties\"}}ListItemProperties{{/crossLink}}\n</li><li>\n{{#crossLink \"Tag/content:property\"}}content{{/crossLink}} accepts current class argument.\n</li></ol>",
            "itemtype": "method",
            "name": "constructor",
            "class": "ListItem",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\OList.js",
            "line": 21,
            "description": "Re-set private properties defined in parent class {{#crossLink \"Tag\"}}Tag{{/crossLink}}:\n<ol><li>\n{{#crossLink \"Tag/tag:property\"}}tag{{/crossLink}} to be \"ol\"\n</li><li>\n{{#crossLink \"Tag/className:property\"}}className{{/crossLink}} to be \"OList\"\n</li></ol>",
            "itemtype": "method",
            "name": "constructor",
            "class": "OList",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Row.js",
            "line": 20,
            "description": "Re-set private properties defined in parent class {{#crossLink \"Tag\"}}Tag{{/crossLink}}:\n<ol><li>\n{{#crossLink \"Tag/tag:property\"}}tag{{/crossLink}} to be \"tr\"\n</li><li>\n{{#crossLink \"Tag/className:property\"}}className{{/crossLink}} to be \"Row\"\n</li><li>\n{{#crossLink \"Tag/styles:property\"}}styles{{/crossLink}} to be\n{{#crossLink \"TableRowStyles\"}}TableRowStyles{{/crossLink}}\n</li></ol>",
            "itemtype": "method",
            "name": "constructor",
            "class": "Row",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Row.js",
            "line": 36,
            "description": "Returns an array of absolute cell widths (widths without unit of measurement).",
            "itemtype": "method",
            "name": "getCellWidths",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Row",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Row.js",
            "line": 51,
            "description": "Alias for length() method of the parent class.",
            "itemtype": "method",
            "name": "cellNum",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Row",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Row.js",
            "line": 60,
            "description": "Sets widths of the cells inside the row.",
            "itemtype": "method",
            "name": "setCellWidths",
            "params": [
                {
                    "name": "profile",
                    "description": "each elements if this array is a width of the corresp. cell in the row.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Row",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Row.js",
            "line": 77,
            "description": "Inserts a cell into a given position. If the object to insert is a Cell instance,\nthen parent method insertElemAt is called. Otherwise, an error is thrown.",
            "itemtype": "method",
            "name": "insertCellAt",
            "params": [
                {
                    "name": "cell",
                    "description": "a cell to insert. If not a Cell instance, an error will be thrown.",
                    "type": "Cell"
                },
                {
                    "name": "pos",
                    "description": "position at which the cell is to be inserted.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Row",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Row.js",
            "line": 92,
            "description": "Appends a cell to the row cells. If one tries to append a non-Cell object, an exception is thrown.\nOtherwise, a method appendElem of the parent class is called.",
            "itemtype": "method",
            "name": "appendCell",
            "params": [
                {
                    "name": "cell",
                    "description": "a cell to be appended. If not a Cell instance, an error is thrown.",
                    "type": "Cell"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Row",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Row.js",
            "line": 106,
            "description": "Returns `true` if the row contains only one cell and this cell contains only one element\nthat is a {{#crossLink \"Table\"}}Table{{/crossLink}} instance. Otherwise, `false` is returned.",
            "itemtype": "method",
            "name": "onlyTableInside",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Row",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Row.js",
            "line": 120,
            "description": "Alias for {{#crossLink \"Tag/dropElemAt:method\"}}dropElemAt{{/crossLink}} method.",
            "itemtype": "method",
            "name": "dropCellAt",
            "params": [
                {
                    "name": "pos",
                    "description": "index of the cell to de dropped out.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Row",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Row.js",
            "line": 130,
            "description": "Drops the cell at the given position and resizes the remaining cells. If the cell to drop has a nieghbour to its\nright, then the freed space isassigned to that neighbour, otherwise it is assigned to the left neighbour:\n<pre>\n|xxx| a | b   | c |   ->   |     a | b   | c |\n| a |xxx| b   | c |   ->   | a |     b   | c |\n| a | b | c | xxx |   ->   | a | b | c       |\n</pre>\nIf the cell to drop does not exist, the row remains unchanged.",
            "itemtype": "method",
            "name": "knockOutCell",
            "params": [
                {
                    "name": "cellNum",
                    "description": "cell number to delete. Numeration starts with 0.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Row",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Row.js",
            "line": 166,
            "description": "Appends style to a given cell of the row. Alias for Tag::appendStyleToElemAt().",
            "itemtype": "method",
            "name": "appendStyleToCellAt",
            "params": [
                {
                    "name": "cellNum",
                    "description": "index of the target cell",
                    "type": "Number"
                },
                {
                    "name": "stl",
                    "description": "style to be appended",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Row",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Row.js",
            "line": 209,
            "description": "This is an alias for {{#crossLink \"Row/getPhantomCellProp:method\"}}getPhantomCellProp('style'){{/crossLink}}.",
            "itemtype": "method",
            "name": "phantomCellStyles",
            "return": {
                "description": "",
                "type": "Style"
            },
            "class": "Row",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Row.js",
            "line": 218,
            "description": "This is an alias for {{#crossLink \"Row/getPhantomCellProp:method\"}}getPhantomCellProp('attr'){{/crossLink}}.",
            "itemtype": "method",
            "name": "phantomCellAttr",
            "return": {
                "description": "",
                "type": "Attributes"
            },
            "class": "Row",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Row.js",
            "line": 227,
            "description": "If the row corresponds to a framed row (a row for which method\n{{#crossLink \"Row/onlyTableInside:method\"}}onlyTableInside{{/crossLink}} returns `true`), then\n{{#crossLink \"Tag/styles:property\"}}styles{{/crossLink}} or\n{{#crossLink \"Tag/attributes:property\"}}attributes{{/crossLink}} is returned.",
            "itemtype": "method",
            "name": "getPhantomCellProp",
            "params": [
                {
                    "name": "prop",
                    "description": "\"style\" or \"attr\"",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Properties"
            },
            "class": "Row",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Row.js",
            "line": 247,
            "description": "If the row corresponds to a framed row (a row for which method\n{{#crossLink \"Row/onlyTableInside:method\"}}onlyTableInside{{/crossLink}} returns true),\nthen {{#crossLink \"Tag/styles:property\"}}styles{{/crossLink}} or\n{{#crossLink \"Tag/attributes:property\"}}attributes{{/crossLink}} of the table inside first cell of current row is returned.",
            "itemtype": "method",
            "name": "getPhantomTableProp",
            "params": [
                {
                    "name": "prop",
                    "description": "\"style\" or \"attr\"",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Properties"
            },
            "class": "Row",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Row.js",
            "line": 269,
            "description": "If the row corresponds to a framed row (a row for which method\n{{#crossLink \"Row/onlyTableInside:method\"}}onlyTableInside{{/crossLink}}\nreturns `true`), then style of the table inside the cell is returned.\nThis is an alias for {{#crossLink \"Row/getPhantomTableProp:method\"}}getPhantomTableProp('style'){{/crossLink}}\nmethod.",
            "itemtype": "method",
            "name": "phantomTableStyles",
            "return": {
                "description": "",
                "type": "Style"
            },
            "class": "Row",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Row.js",
            "line": 282,
            "description": "If the row corresponds to a framed row (a row for which method\n{{#crossLink \"Row/onlyTableInside:method\"}}onlyTableInside{{/crossLink}}\nreturns `true`), then attribute of the table inside the cell is returned.\nThis is an alias for {{#crossLink \"Row/getPhantomTableProp:method\"}}getPhantomTableProp('attr'){{/crossLink}}.",
            "itemtype": "method",
            "name": "phantomTableAttr",
            "return": {
                "description": "",
                "type": "Properties"
            },
            "class": "Row",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Row.js",
            "line": 294,
            "description": "Inserts `c` cells into the row. If `fun` is a function, it recieves as an argument\nthe number of cell and its output is then inserted into cell content.\n\nPrevious row content gets lost.",
            "itemtype": "method",
            "name": "makeShape",
            "params": [
                {
                    "name": "c",
                    "description": "number of cells",
                    "type": "Integer"
                },
                {
                    "name": "fun",
                    "description": "[optional] function whose output is to be set as cell content",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "since": "0.0.6",
            "class": "Row",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Row.js",
            "line": 325,
            "description": "Sets top border for each cell.",
            "itemtype": "method",
            "name": "setCellTopBorder",
            "params": [
                {
                    "name": "borderInfo",
                    "description": "border description (e.g., \"1px solid red\")",
                    "type": "String"
                }
            ],
            "since": "0.0.6",
            "class": "Row",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Table.js",
            "line": 94,
            "description": "Re-set private properties defined in parent class {{#crossLink \"Tag\"}}Tag{{/crossLink}}:\n<ol><li>\n{{#crossLink \"Tag/tag:property\"}}tag{{/crossLink}} to be \"table\"\n</li><li>\n{{#crossLink \"Tag/className:property\"}}className{{/crossLink}} to be \"Table\"\n</li><li>\n{{#crossLink \"Tag/styles:property\"}}styles{{/crossLink}} to be\n{{#crossLink \"TableStyles\"}}TableStyles{{/crossLink}}\n</li><li>\n{{#crossLink \"Tag/attributes:property\"}}styles{{/crossLink}} to be\n{{#crossLink \"TableAttributes\"}}TableAttributes{{/crossLink}}\n</li></ol>",
            "itemtype": "method",
            "name": "constructor",
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Table.js",
            "line": 114,
            "description": "Phantom cell.",
            "itemtype": "property",
            "name": "phantomCell",
            "type": "{Cell}",
            "access": "private",
            "tagname": "",
            "default": "undefined",
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Table.js",
            "line": 123,
            "description": "Phantom row.",
            "itemtype": "property",
            "name": "phantomRow",
            "type": "{Row}",
            "access": "private",
            "tagname": "",
            "default": "undefined",
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Table.js",
            "line": 133,
            "description": "Phantom table {{#crossLink \"Styles\"}}styles{{/crossLink}}.",
            "itemtype": "property",
            "name": "phantomTable",
            "type": "{Table}",
            "access": "private",
            "tagname": "",
            "default": "undefined",
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Table.js",
            "line": 142,
            "description": "Initializes {{#crossLink \"Table/phantomRow:property\"}}phantomRow{{/crossLink}},\n{{#crossLink \"Table/phantomCell:property\"}}phantomCell{{/crossLink}},\n{{#crossLink \"Table/phantomTable:property\"}}phantomTable{{/crossLink}} if not initialized.\nIf they are initialized, no re-initialization happens.",
            "itemtype": "method",
            "name": "initPhantoms",
            "return": {
                "description": "void"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Table.js",
            "line": 163,
            "description": "{{#crossLink \"Table/phantomCellStyles:property\"}}phantomCellStyles{{/crossLink}} getter.",
            "itemtype": "method",
            "name": "getPhantomCellStyles",
            "return": {
                "description": "",
                "type": "Styles"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Table.js",
            "line": 175,
            "description": "{{#crossLink \"Table/phantomCellStyles:property\"}}phantomCellStyles{{/crossLink}} setter.",
            "itemtype": "method",
            "name": "setPhantomCellStyles",
            "params": [
                {
                    "name": "stl",
                    "description": "",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Table.js",
            "line": 193,
            "description": "{{#crossLink \"Table/phantomCellStyles:property\"}}phantomRowStyles{{/crossLink}} getter.",
            "itemtype": "method",
            "name": "getPhantomRowStyles",
            "return": {
                "description": "",
                "type": "Styles"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Table.js",
            "line": 204,
            "description": "{{#crossLink \"Table/phantomRowStyles:property\"}}setPhantomRowStyles{{/crossLink}} setter.",
            "itemtype": "method",
            "name": "setPhantomRowStyles",
            "params": [
                {
                    "name": "stl",
                    "description": "",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Table.js",
            "line": 222,
            "description": "{{#crossLink \"Table/phantomTableStyles:property\"}}phantomTableStyles{{/crossLink}} getter.",
            "itemtype": "method",
            "name": "getPhantomTableStyles",
            "return": {
                "description": "",
                "type": "Styles"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Table.js",
            "line": 233,
            "description": "{{#crossLink \"Table/phantomTableStyles:property\"}}phantomTableStyles{{/crossLink}} setter.",
            "itemtype": "method",
            "name": "setPhantomTableStyles",
            "params": [
                {
                    "name": "stl",
                    "description": "",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Table.js",
            "line": 251,
            "description": "{{#crossLink \"FramedTable/phantomCellAttributes:property\"}}phantomCellAttributes{{/crossLink}} getter.",
            "itemtype": "method",
            "name": "getPhantomCellAttributes",
            "return": {
                "description": "",
                "type": "Properties"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Table.js",
            "line": 263,
            "description": "{{#crossLink \"FramedTable/phantomCellAttributes:property\"}}phantomCellAttributes{{/crossLink}} setter.",
            "itemtype": "method",
            "name": "setPhantomCellAttributes",
            "params": [
                {
                    "name": "prop",
                    "description": "",
                    "type": "Properties"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Table.js",
            "line": 274,
            "description": "Returns `true` if the content of the instance contains the only element\nwhich is a \"tbody\" tag instance.",
            "itemtype": "method",
            "name": "hasTBody",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Table.js",
            "line": 285,
            "description": "{{#crossLink \"FramedTable/phantomRowAttributes:property\"}}phantomRowAttributes{{/crossLink}} getter.",
            "itemtype": "method",
            "name": "getPhantomRowAttributes",
            "return": {
                "description": "",
                "type": "Properties"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Table.js",
            "line": 297,
            "description": "Sets {{#crossLink \"Tag/_properties:property\"}}_properties{{/crossLink}} of\n{{#crossLink \"Table/phantomRow:property\"}}phantomRow{{/crossLink}}.",
            "itemtype": "method",
            "name": "setPhantomRowProperties",
            "params": [
                {
                    "name": "prop",
                    "description": "",
                    "type": "Properties"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "since": "0.0.5",
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Table.js",
            "line": 310,
            "description": "Sets {{#crossLink \"Tag/_properties:property\"}}_properties{{/crossLink}} of\n{{#crossLink \"Table/phantomCell:property\"}}phantomCell{{/crossLink}}.",
            "itemtype": "method",
            "name": "setPhantomCellProperties",
            "params": [
                {
                    "name": "prop",
                    "description": "",
                    "type": "Properties"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "since": "0.0.5",
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Table.js",
            "line": 324,
            "description": "{{#crossLink \"FramedTable/phantomTableAttributes:property\"}}phantomTableAttributes{{/crossLink}} getter.",
            "itemtype": "method",
            "name": "getPhantomTableAttributes",
            "return": {
                "description": "",
                "type": "Properties"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Table.js",
            "line": 336,
            "description": "Sets private variable {{#crossLink \"Tag/_property:property\"}}_property{{/crossLink}} of\n{{#crossLink \"Table/phantomTable:property\"}}phantomTable{{/crossLink}}.",
            "itemtype": "method",
            "name": "setPhantomTableProperties",
            "params": [
                {
                    "name": "prop",
                    "description": "",
                    "type": "Any"
                }
            ],
            "since": "0.0.5",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Table.js",
            "line": 350,
            "description": "{{#crossLink \"Table/phantomTable:property\"}}phantomTable{{/crossLink}}\n{{#crossLink \"Tag/_properties:property\"}}_properties{{/crossLink}} getter.\nAlias for {{#crossLink \"Tag/getProperties:property\"}}getProperties{{/crossLink}}\nmethod.",
            "itemtype": "method",
            "name": "getPhantomTableProperties",
            "since": "0.0.5",
            "return": {
                "description": "",
                "type": "Properties|Null"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Table.js",
            "line": 366,
            "description": "{{#crossLink \"Table/phantomCell:property\"}}phantomCell{{/crossLink}}\n{{#crossLink \"Tag/_properties:property\"}}_properties{{/crossLink}} getter.\nAlias for {{#crossLink \"Tag/getProperties:property\"}}getProperties{{/crossLink}}\nmethod.",
            "itemtype": "method",
            "name": "getPhantomCellProperties",
            "since": "0.0.5",
            "return": {
                "description": "",
                "type": "Properties|Null"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Table.js",
            "line": 380,
            "description": "{{#crossLink \"Table/phantomRow:property\"}}phantomRow{{/crossLink}}\n{{#crossLink \"Tag/_properties:property\"}}_properties{{/crossLink}} getter.\nAlias for {{#crossLink \"Tag/getProperties:property\"}}getProperties{{/crossLink}}\nmethod.",
            "itemtype": "method",
            "name": "getPhantomRowProperties",
            "since": "0.0.5",
            "return": {
                "description": "",
                "type": "Properties|Null"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Table.js",
            "line": 393,
            "description": "Returns {{#crossLink \"Tag/openingTag:method\"}}opening{{/crossLink}} or\n{{#crossLink \"Tag/closingTag:method\"}}closing{{/crossLink}} tag for one of the\nphantom elements: {{#crossLink \"Table/phantomCell:property\"}}cell{{/crossLink}},\n{{#crossLink \"Table/phantomRow:property\"}}row{{/crossLink}},\n{{#crossLink \"Table/phantomTable:property\"}}table{{/crossLink}}.",
            "itemtype": "method",
            "name": "getPhantomTag",
            "params": [
                {
                    "name": "phantomElem",
                    "description": "\"cell\", \"row\", \"table\" (case insensitive)",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "\"open\" or \"close\" (case insensitive).\n                                                       If missing, supposed to be equal to \"open\".",
                    "type": "String|Null"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Table.js",
            "line": 422,
            "description": "The number of the rows in the table. It scans {{#crossLink \"Table/content:property\"}}content{{/crossLink}}\nof the instance until the first occurrence of `tbody` tag. Once found, its length is returned. If not found,\nzero is returned.",
            "itemtype": "method",
            "name": "rowNum",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Table.js",
            "line": 434,
            "description": "Sets `tbody` part of the table. The argument must be either a {{#crossLink \"Row\"}}Row{{/crossLink}}\ninstance or an array of {{#crossLink \"Row\"}}Row{{/crossLink}} instances.\nOtherwise, an error is thrown.\n\nEven though not more than one instance of `tbody` must be present among\n{{#crossLink \"Tag/content:property\"}}content{{/crossLink}}\n{{#crossLink \"Content/elements:property\"}}elements{{/crossLink}}, all `tbody` tags are first dropped\nfrom {{#crossLink \"Tag/content:property\"}}content{{/crossLink}} and then the requested one is inserted.",
            "itemtype": "method",
            "name": "setBody",
            "params": [
                {
                    "name": "body",
                    "description": "array of {{#crossLink \"Row\"}}Row{{/crossLink}} instances or\n                                     {{#crossLink \"Row\"}}Row{{/crossLink}} instance",
                    "type": "Array|Row"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "since": "0.0.5",
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Table.js",
            "line": 474,
            "description": "Alias for {{#crossLink \"Table/setBody:method\"}}setBody{{/crossLink}} method.\n\nOverrides parent method {{#crossLink \"Tag/setElements:method\"}}setElements{{/crossLink}}.",
            "itemtype": "method",
            "name": "setElements",
            "params": [
                {
                    "name": "elems",
                    "description": "array of {{#crossLink \"Row\"}}Row{{/crossLink}} instances or\n                                     {{#crossLink \"Row\"}}Row{{/crossLink}} instance",
                    "type": "Array|Row"
                }
            ],
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Table.js",
            "line": 486,
            "description": "Returns array of {{#crossLink \"Row\"}}Row{{/crossLink}} instances in `tbody` part of the table.",
            "itemtype": "method",
            "name": "getBody",
            "return": {
                "description": "one dimensional array of\n                                     {{#crossLink \"Row\"}}Row{{/crossLink}} instances\n                                     or empty array",
                "type": "Array"
            },
            "since": "0.0.5",
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Table.js",
            "line": 500,
            "description": "Returns footer of the table.",
            "itemtype": "method",
            "name": "getFooter",
            "return": {
                "description": "",
                "type": "Tag|Null"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Table.js",
            "line": 512,
            "description": "Returns header of the table.",
            "itemtype": "method",
            "name": "getHeader",
            "return": {
                "description": "",
                "type": "Tag|Null"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Table.js",
            "line": 524,
            "description": "Returns header of the table.",
            "itemtype": "method",
            "name": "getCaption",
            "return": {
                "description": "",
                "type": "Tag|Null"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Table.js",
            "line": 536,
            "description": "Appends a row to the content property. If the argument is not a Row instance, an error is thrown.",
            "itemtype": "method",
            "name": "appendRow",
            "params": [
                {
                    "name": "row",
                    "description": "a row to append. If not a Row instance, an error is thrown.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Table.js",
            "line": 560,
            "description": "Gives a two-dimensional array [[w_11, w_12, ...., w_1n], ...., [w_m1, w_m2, ...., w_m3]]\nwhere w_ij is width of the cell located in the row i and column j.",
            "itemtype": "method",
            "name": "getMatrix",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Table.js",
            "line": 577,
            "description": "Returns array of widths of the cells in the table rows if all rows\nhave the same cell widths. Otherwise null is returned.",
            "itemtype": "method",
            "name": "getProfile",
            "return": {
                "description": "",
                "type": "Array|Null"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Table.js",
            "line": 589,
            "description": "Imposes the widths of all cell in all rows of the table body. If the argument is not array, an error is thrown.\nIf the array length is different from the number of columns, an error is thrown. Otherwise, it is called\nmethod {{#crossLink \"Row/setCellWidths:method\"}}setCellWidths{{/crossLink}} on each row of table body.",
            "itemtype": "method",
            "name": "setProfile",
            "params": [
                {
                    "name": "profile",
                    "description": "an array of cell widths that will be applied to each row.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Table.js",
            "line": 614,
            "description": "Inserts a cell \"cell\" into a given position \"pos\" of each row of the table.\nIf the table has 5 columns, then after insertion it will have 5+1=6 columns.\nPosition \"pos\" will correspond to the index of the inserted cell in the row after insertion.\n\"pos\" must be a valid cell number into the table after insertion. So, for the example above,\nthe valid values for \"pos\" are 0, 1, 2, 3, 4 and 5.",
            "itemtype": "method",
            "name": "insertColAt",
            "params": [
                {
                    "name": "cell",
                    "description": "",
                    "type": "Cell"
                },
                {
                    "name": "pos",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Table.js",
            "line": 650,
            "description": "Knocks out given column from the table. The operation is delegated to\n{{#crossLink \"Row/knockOutCell:method\"}}Row::knockOutCell{{/crossLink}} method.",
            "itemtype": "method",
            "name": "knockOutCol",
            "params": [
                {
                    "name": "colNum",
                    "description": "the number of the column to be knocked out. Numeration starts with 0.",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Table.js",
            "line": 668,
            "description": "Drops specified column from the table. The operation is delegated to the `Row::dropCellAt()`",
            "itemtype": "method",
            "name": "dropColAt",
            "params": [
                {
                    "name": "colNum",
                    "description": "the number of the column to delete. Numeration starts with 0.",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Table.js",
            "line": 684,
            "description": "Gives the number of columns in the table or null if not all rows have the same number of cells.\nThe operation is delegated to the `Row::cellNum()`.",
            "itemtype": "method",
            "name": "colNum",
            "return": {
                "description": "",
                "type": "Number|null"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Table.js",
            "line": 712,
            "description": "Whether all rows in the table have the same cell widths.",
            "itemtype": "method",
            "name": "isSameWidth",
            "return": {
                "description": "true, if all rows have the same cells' widths, false otherwise.",
                "type": "Boolean"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Table.js",
            "line": 749,
            "description": "Set the border of the table.\n\nIt gets a copy of current {{#crossLink \"Tag/_properties:property\"}}_properties{{/crossLink}}, applies\n{{#crossLink \"Properties/setBorder:method\"}}Properties.setBorder(){{/crossLink}} method to it and\nsets instance's properties to the resulted properties.",
            "itemtype": "method",
            "name": "setBorder",
            "params": [
                {
                    "name": "borderInfo",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Table.js",
            "line": 765,
            "description": "Returns object with information about border properties (style, width, color).\n\nIt is an alias of {{#crossLink \"Properties/getBorder:method\"}}Properties.getBorder(){{/crossLink}}.",
            "itemtype": "method",
            "name": "getBorder",
            "return": {
                "description": "",
                "type": "Object"
            },
            "since": "0.0.6",
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Table.js",
            "line": 777,
            "description": "Removes the border of the table.\n\nIt updates {{#crossLink \"Tag/_properties:property\"}}_properties{{/crossLink}} by applying to it\n{{#crossLink \"Properties/removeBorder:property\"}}removeBorder{{/crossLink}} method.",
            "itemtype": "method",
            "name": "removeBorder",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Table.js",
            "line": 791,
            "description": "Returns true if the table is fragmented, and false otherwise. It takes table rows and calls method\n{{#crossLink \"Row/onlyTableInside:method\"}}onlyTableInside{{/crossLink}} on each of them until\nfirst \"false\" is encountered.\n\nA table is a __framed table__ if all table rows have only one cell and this cell contains\nonly one element that is a Table instance.",
            "itemtype": "method",
            "name": "isFragmented",
            "return": {
                "description": "true if the table is framed, and false otherwise",
                "type": "Boolean"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Table.js",
            "line": 811,
            "description": "Returns `true` if at least one of the following variables  {{#crossLink \"Table/phantomRow:property\"}}phantomRow{{/crossLink}},\n{{#crossLink \"Table/phantomCell:property\"}}phantomCell{{/crossLink}},\n{{#crossLink \"Table/phantomTable:property\"}}phantomTable{{/crossLink}} is set. `False` otherwise.",
            "itemtype": "method",
            "name": "isFramed",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Table.js",
            "line": 822,
            "description": "Unsets phantom properties. After resetting those properties, the table becomes a table without frame.",
            "itemtype": "method",
            "name": "unsetPhantom",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Table.js",
            "line": 833,
            "description": "Appends the style to the column. If the column exists, the method call `Row::appendStyleToCell()`\non each of the table rows.",
            "itemtype": "method",
            "name": "appendStyleToCol",
            "params": [
                {
                    "name": "colNum",
                    "description": "column number to which the style is to be appended.",
                    "type": "Number"
                },
                {
                    "name": "style",
                    "description": "Style or Object to be appended",
                    "type": "Style|Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Table.js",
            "line": 857,
            "description": "Generates html representation of the table body. If table is framed, wraps each element of\n{{#crossLink \"Tag/content:property\"}}content{{/crossLink}} with strings corresponding to phantom\nelements. Generation of html string of each {{#crossLink \"Tag/content:property\"}}content element{{/crossLink}}\nis delegated to its `toHtml` method (if an element has no `toHtml` method, this element gets ignored).",
            "itemtype": "method",
            "name": "bodyToHtml",
            "params": [
                {
                    "name": "withFrame",
                    "description": "whether the table is framed or not.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "since": "0.0.5",
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Table.js",
            "line": 883,
            "description": "Generates html code corresponding to this instance. Makes use of\n{{#crossLink \"Table/bodyToHtml:method\"}}bodyToHtml{{/crossLink}} method.\n\nThis method overrides parent one {{#crossLink \"Tag/toHtml:method\"}}toHtml{{/crossLink}} because one has to manage\npresence of properties {{#crossLink \"Table/phantomTable:property\"}}phantomTable{{/crossLink}},\n{{#crossLink \"Table/phantomCell:property\"}}phantomCell{{/crossLink}} and\n{{#crossLink \"Table/phantomRow:property\"}}phantomRow{{/crossLink}}.",
            "itemtype": "method",
            "name": "toHtml",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Table.js",
            "line": 913,
            "description": "Generates instance of [DOM.Element](https://developer.mozilla.org/en-US/docs/Web/API/element)\ncorresponding to this instance.\n\nThis method overrides parent one  {{#crossLink \"Tag/toNode:method\"}}toNode{{/crossLink}} because\none has to manage presence of properties {{#crossLink \"Table/phantomTable:property\"}}phantomTable{{/crossLink}},\n{{#crossLink \"Table/phantomCell:property\"}}phantomCell{{/crossLink}} and\n{{#crossLink \"Table/phantomRow:property\"}}phantomRow{{/crossLink}}.",
            "itemtype": "method",
            "name": "toNode",
            "return": {
                "description": "",
                "type": "DOM.Element"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Table.js",
            "line": 946,
            "description": "If the table is fragmented and all rows have the same requested property, then\nthis property of the first row is returned. In any other case, null is returned.\nNB: to compare requested property for all rows, this property must be an object\nwith boolean-valued method isTheSameAs().",
            "itemtype": "method",
            "name": "getPhantomRowProp",
            "params": [
                {
                    "name": "prop",
                    "description": "a tag of the property to return. All rows should have this property.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the value of the property specified by the argument, if it is the same\n                                     for all rows, null otherwise.",
                "type": "Object|null"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Table.js",
            "line": 989,
            "description": "Gets copy of n-th row stored in table body. If that row does not exist, nothing is returned.",
            "itemtype": "method",
            "name": "getRow",
            "params": [
                {
                    "name": "n",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Row|Null"
            },
            "since": "0.0.5",
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Table.js",
            "line": 1005,
            "description": "Returns copy of the first row stored in table body. If that row does not exist, nothing is returned.",
            "itemtype": "method",
            "name": "getFirstRow",
            "return": {
                "description": "",
                "type": "Row"
            },
            "since": "0.0.5",
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Table.js",
            "line": 1017,
            "description": "Returns copy of last row stored in table body. If that row does not exist, nothing is returned.",
            "itemtype": "method",
            "name": "getLastRow",
            "return": {
                "description": "",
                "type": "Row"
            },
            "since": "0.0.5",
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Table.js",
            "line": 1030,
            "description": "If the table is fragmented, gives the requested property of the phantom cell if that property is\nthe same for all rows. Otherwise, null is returned.",
            "itemtype": "method",
            "name": "getPhantomCellProp",
            "params": [
                {
                    "name": "propName",
                    "description": "requested property (supposed to be \"style\" or \"attr\")",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Object|null"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Table.js",
            "line": 1057,
            "description": "If the table is fragmented, gives the requested property of the phantom cell if that property is\nthe same for all rows. Otherwise, null is returned.",
            "itemtype": "method",
            "name": "getPhantomTableProp",
            "params": [
                {
                    "name": "propName",
                    "description": "requested property (supposed to be \"style\" or \"attr\")",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Object|null"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Table.js",
            "line": 1086,
            "description": "If the table is fragmented, then sets up the phantom properties and rearrange content property.\nIf not, the table remains as it is.\n\nNB: note that disentanglement occurs of a table body only. If the table header contains a\nfragmented table, it remains untouched.",
            "itemtype": "method",
            "name": "desintangle",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Table.js",
            "line": 1132,
            "description": "Inserts `r` {{#crossLink \"Row\"}}rows{{/crossLink}} with `c` {{#crossLink \"Cell\"}}cells{{/crossLink}} each.\n\nCreating a {{#crossLink \"Row\"}}row{{/crossLink}} with `c`-many cells is delegated to\n{{#crossLink \"Row/makeShape:method\"}}Row.makeShape{{/crossLink}} method.\n\nPrevious content of the table gets lost after execution of this method.",
            "itemtype": "method",
            "name": "makeShape",
            "params": [
                {
                    "name": "r",
                    "description": "number of rows",
                    "type": "Integer"
                },
                {
                    "name": "c",
                    "description": "number of columns",
                    "type": "Integer"
                },
                {
                    "name": "fun",
                    "description": "[optional]  function to mark the rows. It will be given\n                                         two arguments: current row and cell numbers.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "since": "0.0.6",
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Table.js",
            "line": 1176,
            "description": "Configures current {{#crossLink \"Table\"}}Table{{/crossLink}} instance\nusing information provided by `template` object.\n`template` object is of format described in {{#crossLink \"Table/template:method\"}}Table::template{{/crossLink}} method.",
            "itemtype": "method",
            "name": "configure",
            "params": [
                {
                    "name": "template",
                    "description": "json object chracterizing parameters of the table instance",
                    "type": "Object"
                },
                {
                    "name": "fun",
                    "description": "[optional] function to be passed to\n                                                {{#crossLink \"Table/makeShape:property\"}}makeShape{{/crossLink}}\n                                                method.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "Table"
            },
            "since": "0.0.6",
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Table.js",
            "line": 1200,
            "description": "Marks all table rows.",
            "itemtype": "method",
            "name": "markRows",
            "params": [
                {
                    "name": "marker",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "since": "0.0.6",
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Table.js",
            "line": 1221,
            "description": "Imposes table characteristics related to its properties (e.g., background color, border width,\nrow/cell width) and not to its structure (number of rows and columns).",
            "itemtype": "method",
            "name": "configureProperties",
            "params": [
                {
                    "name": "descr",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Table.js",
            "line": 1348,
            "description": "Table template: json object of table properties that parametrise the table. As required, overrides\nbase class method {{#crossLink \"Tag/template:method\"}}Tag::template{{/crossLink}}.\n\nReturns an object with the following kyes:<dl>\n<dt>rows</dt><dd> (Integer) number of rows</dd>\n<dt>cols</dt><dd> (Integer) number of columns</dd>\n<dt>tableBorderWidth</dt><dd>(String|Number) table border width (might include unit of measurement)</dd>\n<dt>tableBorderColor</dt><dd>(String) table border color</dd>\n<dt>phantomBorderWidth</dt><dd>(String|Number) width of border around each row\n(might include unit of measurement)</dd>\n<dt>phantomBorderColor</dt><dd> (String) color of border around each row</dd>\n<dt>cellBorders<dt><dd>(Object) object with the following keys:<dl>\n\t\t<dt>leftVer</dt><dd>(Boolean) whether the most left vertical border of the first cell of each row is present</dd>\n \t<dt>rightVer</dt><dd>(Boolean) whether the most right vertical border of the last cell of each row is present</dd>\n \t<dt>intVer</dt><dd>(Boolean) whether the inner vertical borders are present</dd>\n \t<dt>topHor</dt><dd>(Boolean) whether the top horizontal border of each cell of the first row is present</dd>\n \t<dt>bottomHor</dt><dd>(Boolean) whether the bottom horizontal border of each cell of the last row is present</dd>\n \t<dt>intHor</dt><dd>(Boolean) whether inner horizontal borders are present</dd>\n</dl></dd>\n<dt>cellBorderWidth</dt><dd>(String|Unit) width of the border(s) mentioned in key `cellBorders`</dd>\n<dt>cellBorderColor</dt><dd>(String) Color of the border(s) mentioned in key `cellBorders`</dd>\n<dt>globalTableBgColor</dt><dd>(String) table background color</dd>\n<dt>spaceTableGlobal</dt><dd>(String|Unit) table margin</dd>\n<dt>paddingTableGlobal</dt><dd>(String|Unit) table padding </dd>\n<dt>spaceBtwRows</dt><dd>(String) `border-spacing` of the table in the following format: '5px 6px',\n5px - horizontally, 6px - vertically    </dd>\n<dt>spaceCell</dt><dd>(String|Unit)  `padding` of each cell</dd>\n<dt>width</dt><dd>(String|Unit) table width</dd>\n</dl>",
            "itemtype": "method",
            "name": "template",
            "return": {
                "description": "",
                "type": "Object"
            },
            "since": "0.0.7",
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Table.js",
            "line": 1415,
            "description": "Sets style property `key` of children with numbers that are in array `cellArr` of rows\nwith numbers that are in array `rowArr` to be equal to `value`.\n\nExample, <code>table.setStylePropertyOfBlock('padding', '1em', [1, 3, 5], [2, 8, 12])</code>\nimposes inline style `padding` to be `1em` to cells with numbers 2, 8, 12 of rows with numbers 1, 3, and 5.",
            "itemtype": "method",
            "name": "setStylePropertyOfBlock",
            "params": [
                {
                    "name": "rowArr",
                    "description": "array of integers indicating row numbers",
                    "type": "Array|Null"
                },
                {
                    "name": "cellArr",
                    "description": "array of integers indicating cell numbers",
                    "type": "Array|Null"
                },
                {
                    "name": "key",
                    "description": "name of style property to set (e.g., \"width\", \"padding\" etc)",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "border description (e.g., \"1px solid red\")",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "since": "0.0.6",
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Table.js",
            "line": 1449,
            "description": "Sets width of all rows of the table.\n\nIt calls {{#crossLink \"Tag/setWidth:method\"}}setWidth{{/crossLink}} method on each row.",
            "itemtype": "method",
            "name": "setAllRowWidths",
            "params": [
                {
                    "name": "w",
                    "description": "width value",
                    "type": "String|Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "since": "0.0.6",
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Table.js",
            "line": 1475,
            "description": "Returns value of style property `key` of rows which indexes are in array `rowArr` and cell\nindexes are in array `cellArr` if all objects have the same value of the above property.\nOtherwise, `null` is returned.\n\n`rowArr` array admits negative values (with usual meaning: enumeration starts from the end).",
            "itemtype": "method",
            "name": "getStylePropertyOfBlock",
            "params": [
                {
                    "name": "key",
                    "description": "name of style property (e.g., \"width\", \"top-border\")",
                    "type": "String"
                },
                {
                    "name": "rowArr",
                    "description": "array of row indexes (or null for all rows)",
                    "type": "Array|null"
                },
                {
                    "name": "cellArr",
                    "description": "array of column indexes (or null for all rows)",
                    "type": "Array|null"
                }
            ],
            "return": {
                "description": "",
                "type": "String|null"
            },
            "since": "0.0.6",
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Table.js",
            "line": 1521,
            "description": "Updates `tableNode` with new chracteristics given by `tableInfo` object.\n\nIt takes `tableNode`, constructs {{#crossLink \"Table\"}}Table{{/crossLink}} instance of it,\nadjusts its properties according to `tableInfo` and returns it.",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "tableNode",
                    "description": "",
                    "type": "Table"
                },
                {
                    "name": "dialogData",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "a Table instance with updated properties",
                "type": "Table"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Table.js",
            "line": 1537,
            "description": "Returns {{#crossLink \"Table/getStylePropertyOfBlock:method\"}}getStylePropertyOfBlock(){{/crossLink}} output\nformatted as {{#crossLink \"Properties/getBorder:method\"}}border info object{{/crossLink}}.",
            "itemtype": "method",
            "name": "getStylePropertyOfRangeAsBorderInfo",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "rowArr",
                    "description": "",
                    "type": "Array|null"
                },
                {
                    "name": "cellArr",
                    "description": "",
                    "type": "Array|null"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Table.js",
            "line": 1568,
            "description": "Creates an array of `len` increasing numbers starting with `start`:\n`start`, `start + 1`, ...",
            "itemtype": "method",
            "name": "_range",
            "params": [
                {
                    "name": "start",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "len",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "since": "0.0.6",
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Table.js",
            "line": 1588,
            "description": "Returns an object that parametrizes borders around the cells. The object has the following format:\n<br>\n<code>\n{leftVer: ..., rightVer: ..., intVer: ..., topHor: ..., bottomHor: ..., intHor: ..., [width: ..., color: ...]}\n</code>\n<br>\nwhere\n<ul><li>\n`leftVer`, `rightVer`, `intVer`, `topHor`, `bottomHor`, `intHor` are boolean-valued keys\nstanding for left/right/intermediate horizontal/vertical cell borders,\n</li><li>\n`width` - (optional) integer, present if at least one of the above boolean values is true.\n</li><li>\n`color` - (optional) string, present along with \"width\" key.\n</li></ul>",
            "itemtype": "method",
            "name": "getCellBorders",
            "return": {
                "description": "",
                "type": "Object"
            },
            "since": "0.0.6",
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\Table.js",
            "line": 1642,
            "description": "Returns {{#crossLink \"Properties/getBorder:method\"}}border-like{{/crossLink}} object characterizing\n{{#crossLink \"Table/phantomTable:property\"}}phantom table{{/crossLink}} (if it exists) border.\nIf {{#crossLink \"Table/phantomTable:property\"}}phantom table{{/crossLink}} does not exist,\nan object <code>{style: none}</code> is returned.",
            "itemtype": "method",
            "name": "getPhantomTableBorder",
            "return": {
                "description": "",
                "type": "Object"
            },
            "since": "0.0.6",
            "class": "Table",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag\\UList.js",
            "line": 21,
            "description": "Re-set private properties defined in parent class {{#crossLink \"Tag\"}}Tag{{/crossLink}}:\n<ol><li>\n{{#crossLink \"Tag/tag:property\"}}tag{{/crossLink}} to be \"ul\"\n</li><li>\n{{#crossLink \"Tag/className:property\"}}className{{/crossLink}} to be \"UList\"\n</li></ol>",
            "itemtype": "method",
            "name": "constructor",
            "class": "UList",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Content.js",
            "line": 19,
            "description": "The  name of the class.",
            "itemtype": "property",
            "name": "className",
            "type": "{String}",
            "access": "private",
            "tagname": "",
            "class": "Content",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Content.js",
            "line": 28,
            "description": "Array in which Content items are stored.",
            "itemtype": "property",
            "name": "elements",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "default": "[str]",
            "class": "Content",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Content.js",
            "line": 36,
            "description": "{{#crossLink \"Content/className:property\"}}Class name{{/crossLink}} getter.",
            "itemtype": "method",
            "name": "getName",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Content",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Content.js",
            "line": 46,
            "description": "{{#crossLink \"Content/elements:property\"}}elements{{/crossLink}} getter. <br/>\n*NB*: the method tries to return a copy of {{#crossLink \"Content/elements:property\"}}elements{{/crossLink}}\ncontent.",
            "itemtype": "method",
            "name": "getElements",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Content",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Content.js",
            "line": 62,
            "description": "{{#crossLink \"Content/elements:property\"}}elements{{/crossLink}} setter.",
            "itemtype": "method",
            "name": "setElements",
            "params": [
                {
                    "name": "items",
                    "description": "array of items",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Content",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Content.js",
            "line": 74,
            "description": "The number of items in the \"elements\" property",
            "itemtype": "method",
            "name": "length",
            "return": {
                "description": "",
                "type": "Integer"
            },
            "class": "Content",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Content.js",
            "line": 83,
            "description": "Gets a copy of element correspoinding to index `pos`. If it does not exist, null is returned.",
            "itemtype": "method",
            "name": "getElem",
            "params": [
                {
                    "name": "pos",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Mixed"
            },
            "class": "Content",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Content.js",
            "line": 97,
            "description": "Gets the first element. Alias for {{#crossLink \"Content/getElem:method\"}}getElem(0){{/crossLink}}.",
            "itemtype": "method",
            "name": "getFirst",
            "return": {
                "description": "",
                "type": "Mixed"
            },
            "class": "Content",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Content.js",
            "line": 106,
            "description": "Gets the last element. Alias for {{#crossLink \"Content/getElem:method\"}}getElem(...){{/crossLink}}.",
            "itemtype": "method",
            "name": "getLast",
            "return": {
                "description": "",
                "type": "Mixed"
            },
            "class": "Content",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Content.js",
            "line": 116,
            "description": "Inserts element at position pos inside the array of elements. If the lenght of array \"elements\"\nis equal to N, than the allowed position index is inside the range [0, 1, ..., N]. If the given\nposition index is outside that range, an error is thrown. If the position index is equal to N\n(that corresponds to appending the element), then Content::appendElem is called.",
            "itemtype": "method",
            "name": "insertElemAt",
            "params": [
                {
                    "name": "pos",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "elem",
                    "description": "",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Content",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Content.js",
            "line": 140,
            "description": "Reset {{#crossLink \"Content/elements:property\"}}elements{{/crossLink}} array.",
            "itemtype": "method",
            "name": "flush",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Content",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Content.js",
            "line": 149,
            "description": "Appends argument to the array of {{#crossLink \"Content/elements:property\"}}elements{{/crossLink}}.\nIf the argument is a {{#crossLink \"Content\"}}Content{{/crossLink}} instance, then its\n{{#crossLink \"Content/elements:property\"}}elements{{/crossLink}} are appended one by one to the\ntarget instance {{#crossLink \"Content/elements:property\"}}elements{{/crossLink}} array.",
            "itemtype": "method",
            "name": "appendElem",
            "params": [
                {
                    "name": "elem",
                    "description": "",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Content",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Content.js",
            "line": 172,
            "description": "If the argument is an instance of Content, then its {{#crossLink \"Content/elements:property\"}}elements{{/crossLink}}\nare copied (if possible) and inserted into target {{#crossLink \"Content/elements:property\"}}elements{{/crossLink}}\narray.",
            "itemtype": "method",
            "name": "absorb",
            "params": [
                {
                    "name": "cntn",
                    "description": "",
                    "type": "Content"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Content",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Content.js",
            "line": 189,
            "description": "Drops the element at the given position and returns it. If element at the position does not exist,\nan error is thrown.",
            "itemtype": "method",
            "name": "dropElemAt",
            "params": [
                {
                    "name": "pos",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Mixed"
            },
            "class": "Content",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Content.js",
            "line": 206,
            "description": "Drops the first element. Alias for {{#crossLink \"Content/dropElemAt:method\"}}Content/dropElemAt(0){{/crossLink}}.",
            "itemtype": "method",
            "name": "dropFirst",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Content",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Content.js",
            "line": 215,
            "description": "Drops the last element. If the number of current elements is greater than zero, then it is called\n{{#crossLink \"Content/dropElemAt:method\"}}Content/dropElemAt(pos){{/crossLink}} with pos being\nthe index of the last element.",
            "itemtype": "method",
            "name": "dropLast",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Content",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Content.js",
            "line": 229,
            "description": "Transforms the object into html form. Object-type entries of the \"elements\" property,\nshould have `toHtml()` method in order the html string to be generated. If it has no\n`toHtml()`, then html comment `<!--- ... -->` will be generated.",
            "itemtype": "method",
            "name": "toHtml",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Content",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Content.js",
            "line": 257,
            "description": "Text representation of the content. Object-type entries of the \"elements\" property,\nshould have `toText()` method in order the html string to be generated. If it has no\n`toText()`, then this object will be ignored.",
            "itemtype": "method",
            "name": "toText",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Content",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Content.js",
            "line": 286,
            "description": "Scans recursively the content of \"element\" property and returns true, if each item of the content is empty.\nReturns false otherwise.\nWhat is supposed to be empty:\n<ul><li>objects having method `isEmpty()` and which returns `true`</li>\n<li> '' or '&nbsp;' </li>\n<li>objects without any attributes</li> <ul>",
            "todo": [
                "decide whether consider functions to be empty or not."
            ],
            "itemtype": "method",
            "name": "isEmpty",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Content",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Content.js",
            "line": 328,
            "description": "Returns true, if the argument is empty, and false otherwise.\nWhat is supposed to be empty:\n<ol>\n<li>object that has a method `isEmpty` that returns `true`</li>\n<li>object without methods</li>\n<li>string ''</li>\n<li>array [] </li>\n</ol>",
            "itemtype": "method",
            "name": "isElemEmpty",
            "params": [
                {
                    "name": "arg",
                    "description": "",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Content",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Content.js",
            "line": 363,
            "description": "If the argument is not empty, calls {{#crossLink \"Content/appendElem:method\"}}Content::appendElem(){{/crossLink}}.\nIf the argument is empty, nothing is done. The argument is considered empty, if the method\n{{#crossLink \"Content/isElemEmpty:method\"}}Content::isElemEmpty(arg){{/crossLink}} returns `true`.",
            "itemtype": "method",
            "name": "appendElemIfNotEmpty",
            "params": [
                {
                    "name": "obj",
                    "description": "Object to be inserted if not empty",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Content",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Content.js",
            "line": 377,
            "description": "Loads elements into the {{#crossLink \"Content/elements:property\"}}element{{/crossLink}} property.\nEach element of the input array is to be mimicked using the means of the FACTORY. If it is not\ndefined, then no loading is performed and `false` is returned. Otherwise, the method tries to load\nand returns `true`.",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "arr",
                    "description": "array of Elements or Text instances",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "true, if loaded successfully, false otherwise",
                "type": "Boolean"
            },
            "class": "Content",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Content.js",
            "line": 401,
            "description": "Converts each element of this instance into a node and appends it to the argument.\n\nTakes each element of the array {{#crossLink \"Content/elements:property\"}}Content::elements{{/crossLink}},\nconverts it into a node (if the element responds to `toNode()` method, the convertion will\nbe performed using this method, otherwise a text node will be constructed)\nand then appends this node to the argument which is supposed to be an instance of\n[DOM.Node](https://developer.mozilla.org/en-US/docs/Web/API/Node) (in fact, it is enough\nthat is has [appendChild()](https://developer.mozilla.org/en-US/docs/Web/API/Node.appendChild)\nmethod).",
            "itemtype": "method",
            "name": "stickTo",
            "params": [
                {
                    "name": "el",
                    "description": "[DOM.Node](https://developer.mozilla.org/en-US/docs/Web/API/Node)",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Content",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Content.js",
            "line": 427,
            "description": "Clones the target. Tries to create a clone of each {{#crossLink \"Content/elements:property\"}}elements{{/crossLink}}\nitem. In case the item is an object with no \"clone\" method, it is inserted into\n{{#crossLink \"Content/elements:property\"}}elements{{/crossLink}} by reference.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Content",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Content.js",
            "line": 443,
            "description": "Appends Style `stl` to element at position `pos`.",
            "itemtype": "method",
            "name": "appendStyleToElemAt",
            "params": [
                {
                    "name": "pos",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Content",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Content.js",
            "line": 458,
            "description": "Returns array of positions at which object with tag name `name` is situated.",
            "itemtype": "method",
            "name": "findTagPos",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "since": "0.0.5",
            "class": "Content",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Content.js",
            "line": 475,
            "description": "Returns first element from {{#crossLink \"Content/elements:property\"}}elements{{/crossLink}} whose getTag() returns `name`.\nIf nothing is found, nothing is returned.",
            "itemtype": "method",
            "name": "getFirstEntryOfTag",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "first element from\n                                        {{#crossLink \"Content/elements:property\"}}elements{{/crossLink}}\n                                        which \"getTag\" method returns `name`.",
                "type": "Tag|Null"
            },
            "since": "0.0.5",
            "class": "Content",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Content.js",
            "line": 498,
            "description": "Filters out array {{#crossLink \"Content/elements:property\"}}elements{{/crossLink}} in such a way\nthat only those elements for which `fun` returns `true` remain.",
            "itemtype": "method",
            "name": "filterOut",
            "params": [
                {
                    "name": "fun",
                    "description": "function to be applied to each element",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Content",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Content.js",
            "line": 513,
            "description": "Applies function `fun` to each element of {{#crossLink \"Content/elements:property\"}}elements{{/crossLink}}.",
            "itemtype": "method",
            "name": "applyToAll",
            "params": [
                {
                    "name": "fun",
                    "description": "function to be applied to each element of content",
                    "type": "Function"
                }
            ],
            "since": "0.0.6",
            "class": "Content",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Document.js",
            "line": 26,
            "description": "Instance of [DOM.Node](https://developer.mozilla.org/en-US/docs/Web/API/Node) representing\nthe content of the class instance.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_content",
            "type": "{DOM.Node}",
            "class": "Document",
            "module": "Document"
        },
        {
            "file": "js\\classes\\HtmlElements\\Document.js",
            "line": 36,
            "description": "(Optional) Styles to be applied to overall content of the newsletter before saving it.\n\nIf set, it is supposed to be an instance of {{#crossLink \"Properties\"}}Properties{{/crossLink}}\nclass with {{#crossLink \"Properties/_mode:property\"}}_mode{{/crossLink}} to be set to correspond\nto inline styles.",
            "itemtype": "property",
            "name": "_wrapCss",
            "type": "Properties",
            "access": "private",
            "tagname": "",
            "since": "0.0.6",
            "class": "Document",
            "module": "Document"
        },
        {
            "file": "js\\classes\\HtmlElements\\Document.js",
            "line": 49,
            "description": "Instance of {{#crossLink \"Converter\"}}Converter{{/crossLink}}. Its responsability is to convert\ncurrent instance into different formats.",
            "itemtype": "property",
            "name": "_converter",
            "type": "Converter",
            "default": "Converter",
            "access": "private",
            "tagname": "",
            "class": "Document",
            "module": "Document"
        },
        {
            "file": "js\\classes\\HtmlElements\\Document.js",
            "line": 58,
            "description": "Constructor.\n\nSets {{#crossLink \"Document/_content:property\"}}_content{{/crossLink}} to be equal to `node`\nif it is an instance of [DOM.Node](https://developer.mozilla.org/en-US/docs/Web/API/Node)\n(in fact, it is enough that `node` has `typeNode` property).",
            "itemtype": "method",
            "name": "constructor",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "DOM.Node"
                }
            ],
            "class": "Document",
            "module": "Document"
        },
        {
            "file": "js\\classes\\HtmlElements\\Document.js",
            "line": 71,
            "description": "{{#crossLink \"Document/_converter:property\"}}_converter{{/crossLink}} setter. Supposed to be an\ninstance of {{#crossLink \"Converter\"}}Converter{{/crossLink}} though no validation control is\nperformed.",
            "itemtype": "method",
            "name": "setConverter",
            "params": [
                {
                    "name": "c",
                    "description": "",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Document",
            "module": "Document"
        },
        {
            "file": "js\\classes\\HtmlElements\\Document.js",
            "line": 83,
            "description": "{{#crossLink \"Document/_converter:property\"}}_converter{{/crossLink}} getter.",
            "itemtype": "method",
            "name": "getConverter",
            "return": {
                "description": "Supposed to be an instance of\n                                     {{#crossLink \"Converter\"}}Converter{{/crossLink}}",
                "type": "Any"
            },
            "class": "Document",
            "module": "Document"
        },
        {
            "file": "js\\classes\\HtmlElements\\Document.js",
            "line": 93,
            "description": "Sets {{#crossLink \"Converter/_mapper:property\"}}_mapper{{/crossLink}} of\n{{#crossLink \"Document/_converter:property\"}}_converter{{/crossLink}}.\nAlias for {{#crossLink \"Converter/setMapper:method\"}}setMapper{{/crossLink}} method.",
            "itemtype": "method",
            "name": "setMapper",
            "params": [
                {
                    "name": "m",
                    "description": "",
                    "type": "Void"
                }
            ],
            "class": "Document",
            "module": "Document"
        },
        {
            "file": "js\\classes\\HtmlElements\\Document.js",
            "line": 105,
            "description": "Returns \"deep\" [clone](https://developer.mozilla.org/en-US/docs/Web/API/Node.cloneNode) of\n{{#crossLink \"Document/_content:property\"}}_content{{/crossLink}}. If it is not set, nothing\nis returned",
            "itemtype": "method",
            "name": "getContent",
            "return": {
                "description": "",
                "type": "DOM.Node"
            },
            "class": "Document",
            "module": "Document"
        },
        {
            "file": "js\\classes\\HtmlElements\\Document.js",
            "line": 118,
            "description": "{{#crossLink \"Document/_content:property\"}}_content{{/crossLink}} setter.",
            "itemtype": "method",
            "name": "setContent",
            "params": [
                {
                    "name": "n",
                    "description": "",
                    "type": "DOM.Node"
                }
            ],
            "class": "Document",
            "module": "Document"
        },
        {
            "file": "js\\classes\\HtmlElements\\Document.js",
            "line": 129,
            "description": "Removes attributes present in array `flies` of regular expressions from\n{{#crossLink \"Document/_content:property\"}}_content{{/crossLink}}\nIt first creates a \"shallow\" (without children) copy of the argument and applies\n{{#crossLink \"Document/cleanCurrent:method\"}}cleanCurrent{{/crossLink}} method\nto remove attributes from the argument. Then, consider each child of the argument\nand applies {{#crossLink \"Document/clean:method\"}}clean{{/crossLink}} method to them\nand append the result to the shallow copy.",
            "itemtype": "method",
            "name": "clean",
            "params": [
                {
                    "name": "flies",
                    "description": "array of regular expressions",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Document",
            "module": "Document"
        },
        {
            "file": "js\\classes\\HtmlElements\\Document.js",
            "line": 159,
            "description": "Escapes \"tricky\" symbols by their html code representations.\n\nAfter execution of this method, special symbols inside text nodes of\n{{#crossLink \"Document/_content:property\"}}_content{{/crossLink}}\nget substituted by their html representations.",
            "itemtype": "method",
            "name": "escape",
            "return": {
                "description": "",
                "type": "Void"
            },
            "since": "0.0.6",
            "class": "Document",
            "module": "Document"
        },
        {
            "file": "js\\classes\\HtmlElements\\Document.js",
            "line": 200,
            "description": "Removes attributes present in array `flies` from the current node without affecting child nodes.\nIf the node is a not an element node, then nothing is performed upon it.",
            "itemtype": "method",
            "name": "cleanRoot",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "DOM.Node"
                },
                {
                    "name": "flies",
                    "description": "array of regular expressions",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Document",
            "module": "Document"
        },
        {
            "file": "js\\classes\\HtmlElements\\Document.js",
            "line": 233,
            "description": "{{#crossLink \"Document/_wrapCss:property\"}}_wrapCss{{/crossLink}} setter.\n\nIf necessary, the argument is transformed into a\n{{#crossLink \"Properties\"}}Propreties{{/crossLink}} instance,\nand then assigned to {{#crossLink \"Document/_wrapCss:property\"}}_wrapCss{{/crossLink}}.",
            "itemtype": "method",
            "name": "setWrapCss",
            "params": [
                {
                    "name": "css",
                    "description": "",
                    "type": "Any"
                }
            ],
            "since": "0.0.6",
            "class": "Document",
            "module": "Document"
        },
        {
            "file": "js\\classes\\HtmlElements\\Document.js",
            "line": 248,
            "description": "{{#crossLink \"Document/_wrapCss:property\"}}_wrapCss{{/crossLink}} getter.",
            "itemtype": "method",
            "name": "getWrapCss",
            "return": {
                "description": "",
                "type": "Properties"
            },
            "since": "0.0.6",
            "class": "Document",
            "module": "Document"
        },
        {
            "file": "js\\classes\\HtmlElements\\Document.js",
            "line": 258,
            "description": "Creates a valid html document whose body is given by string `content`.\n\n**NB**: it uses css of the editor content body.",
            "itemtype": "method",
            "name": "docHtml",
            "return": {
                "description": "content of html document",
                "type": "String"
            },
            "class": "Document",
            "module": "Document"
        },
        {
            "file": "js\\classes\\HtmlElements\\Document.js",
            "line": 279,
            "description": "Converts {{#crossLink \"Document/_content:property\"}}_content{{/crossLink}} into prescribed format.",
            "itemtype": "method",
            "name": "convertTo",
            "params": [
                {
                    "name": "format",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Document",
            "module": "Document"
        },
        {
            "file": "js\\classes\\HtmlElements\\Dom.js",
            "line": 21,
            "description": "Toggles inline style property `prop` of node `n`. When it turns out that the property should\nbe set, it is set to value `val`.",
            "itemtype": "method",
            "name": "_toggleNodeStyle",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "n",
                    "description": "instance of [DOM.Node](https://developer.mozilla.org/en-US/docs/Web/API/Node)",
                    "type": "DOM.Node"
                },
                {
                    "name": "prop",
                    "description": "style property name to be toggled",
                    "type": "String"
                },
                {
                    "name": "val",
                    "description": "on-value of the the style property",
                    "type": "String"
                },
                {
                    "name": "altVal",
                    "description": "off-value of the style property",
                    "type": "String|Null"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "since": "0.0.4",
            "class": "Dom",
            "module": "Document"
        },
        {
            "file": "js\\classes\\HtmlElements\\Dom.js",
            "line": 53,
            "description": "Returns **proxy** node of `n`:\n<ol><li>\nif `n` is a text element without siblings, then proxy of `n` is its parent node,\n</li><li>\nif `n` is a text element with siblings or is a node element, then proxy of `n` is `n` itself.\n</li></ol>",
            "itemtype": "method",
            "name": "_proxy",
            "params": [
                {
                    "name": "n",
                    "description": "[Node](https://developer.mozilla.org/en-US/docs/Web/API/Node) instance",
                    "type": "DOM.Node"
                }
            ],
            "return": {
                "description": "",
                "type": "DOM.Node|Null"
            },
            "class": "Dom",
            "module": "Document"
        },
        {
            "file": "js\\classes\\HtmlElements\\Dom.js",
            "line": 74,
            "description": "Looks for a value of style property `key` of nearest ascendant of `node` in the scope of node `scope`.\nIf the property is found, its value is returned, otherwise,  `undefined` is returned.\n\nLimit node `scope` is supposed to contain `node`. Otherwise, the search for the property\nis performed up to the \"highest\" parent of `node`.\n\nNB: ** optimize algorithm in such a way that DOM is parsed only once even when `scope` is set wrong. **",
            "itemtype": "method",
            "name": "getInheritedStyleProp",
            "params": [
                {
                    "name": "node",
                    "description": "[Node](https://developer.mozilla.org/en-US/docs/Web/API/Node) instance",
                    "type": "DOM.Node"
                },
                {
                    "name": "scope",
                    "description": "[Node](https://developer.mozilla.org/en-US/docs/Web/API/Node) instance",
                    "type": "DOM.Node"
                },
                {
                    "name": "key",
                    "description": "name of property to find among inline style of ascendants",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String|Number|Null"
            },
            "since": "0.0.4",
            "class": "Dom",
            "module": "Document"
        },
        {
            "file": "js\\classes\\HtmlElements\\Dom.js",
            "line": 149,
            "description": "Modifies inline style properties of a {{#crossLink \"Selection/_proxy:method\"}}proxy{{/crossLink}}\nnode of deepest children of node `n` in the following way:\n<ol><li>\nif style property `prop` of the deepest child is equal to `val`, then inline\nstyle property of its \"proxy\" node is set to be `altVal`.\n</li><li>\nif style property `prop` of the deepest child is not equal to `val`, then inline\nstyle property of its \"proxy\" node is set to be `val`.\n</li></ol>",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_deferToggleStyle",
            "params": [
                {
                    "name": "n",
                    "description": "[Node](https://developer.mozilla.org/en-US/docs/Web/API/Node) instance",
                    "type": "Node"
                },
                {
                    "name": "prop",
                    "description": "name of style property (i.e., \"width\" or \"text-decoration\")",
                    "type": "String"
                },
                {
                    "name": "val",
                    "description": "value of style property (i.e., \"10px\" or \"underline\")",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "since": "0.0.4",
            "todo": [
                "Try to make this method shorter"
            ],
            "class": "Dom",
            "module": "Document"
        },
        {
            "file": "js\\classes\\HtmlElements\\Dom.js",
            "line": 213,
            "description": "Gives common ancestor of nodes n1 and n2. If it does not exist, `null` is returned.",
            "itemtype": "method",
            "name": "_commonAncestor",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "n1",
                    "description": "[Node](https://developer.mozilla.org/en-US/docs/Web/API/Node) instance",
                    "type": "DOM.Node"
                },
                {
                    "name": "n2",
                    "description": "[Node](https://developer.mozilla.org/en-US/docs/Web/API/Node) instance",
                    "type": "DOM.Node"
                }
            ],
            "return": {
                "description": "",
                "type": "DOM.Node|Null"
            },
            "since": "0.0.4",
            "class": "Dom",
            "module": "Document"
        },
        {
            "file": "js\\classes\\HtmlElements\\Dom.js",
            "line": 245,
            "description": "Gives common ancestor of nodes n1 and n2. If it does not exist, `null` is returned.",
            "itemtype": "method",
            "name": "commonAncestor",
            "params": [
                {
                    "name": "n1",
                    "description": "[Node](https://developer.mozilla.org/en-US/docs/Web/API/Node) instance",
                    "type": "DOM.Node"
                },
                {
                    "name": "n2",
                    "description": "[Node](https://developer.mozilla.org/en-US/docs/Web/API/Node) instance",
                    "type": "DOM.Node"
                }
            ],
            "return": {
                "description": "",
                "type": "DOM.Node|Null"
            },
            "class": "Dom",
            "module": "Document"
        },
        {
            "file": "js\\classes\\HtmlElements\\Dom.js",
            "line": 256,
            "description": "Returns common ancestor of all array elements. If an element is not a\n[Node](https://developer.mozilla.org/en-US/docs/Web/API/Node) instance, it is ignored.",
            "itemtype": "method",
            "name": "commonAncestorSoft",
            "return": {
                "description": "common ancestor of the arguments",
                "type": "DOM.Node|Null"
            },
            "class": "Dom",
            "module": "Document"
        },
        {
            "file": "js\\classes\\HtmlElements\\Dom.js",
            "line": 295,
            "description": "Returns the nearest node from which `node` inherits inline style property `key`. If no such node exists, returns `undefined`.",
            "itemtype": "method",
            "name": "getMentor",
            "params": [
                {
                    "name": "key",
                    "description": "name of inline style property",
                    "type": "String"
                },
                {
                    "name": "node",
                    "description": "[Node](https://developer.mozilla.org/en-US/docs/Web/API/Node) instance",
                    "type": "DOM.Node"
                }
            ],
            "return": {
                "description": "[Node](https://developer.mozilla.org/en-US/docs/Web/API/Node) instance",
                "type": "DOM.Node|undefined"
            },
            "class": "Dom",
            "module": "Document"
        },
        {
            "file": "js\\classes\\HtmlElements\\Dom.js",
            "line": 318,
            "description": "Nails inline style property `key` of `node`:  applies style property on \"innocent\" nodes\nand toggles node inline property `key` between `primary` and `secondary`.\n\nIf `node` has a mentor node, then:\n<ol><li>\nassign value of inline style property `key` of the mentor to each\n{{#crossLink \"Dom/complementNodes:method\"}}complement node{{/crossLink}} to the path `mentor - ... - node`,\n</li><li>\neliminate inline style property `key` from the mentor,\n</li><li>\ncall {{#crossLink \"Dom/setStyleProperty:method\"}}setStyleProperty{{/crossLink}} method that takes care of\nsetting inline style property of `node` to required value.\n</li></ol>\nIf `node` has no mentor node, then set its inline style property `key` to be equal to `secondary`",
            "itemtype": "method",
            "name": "nailStyleProperty",
            "params": [
                {
                    "name": "node",
                    "description": "[Node](https://developer.mozilla.org/en-US/docs/Web/API/Node) instance",
                    "type": "DOM.Node"
                },
                {
                    "name": "key",
                    "description": "name of inline style property",
                    "type": "String"
                },
                {
                    "name": "primary",
                    "description": "primary value of inline style property",
                    "type": "String|Number"
                },
                {
                    "name": "secondary",
                    "description": "secondary value of inline style property",
                    "type": "String|Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Dom",
            "module": "Document"
        },
        {
            "file": "js\\classes\\HtmlElements\\Dom.js",
            "line": 364,
            "description": "Returns reference to a node with inline style property `key` being set to `value`.\nIf `node` is a [Node](https://developer.mozilla.org/en-US/docs/Web/API/Node) instance,\nthen reference it itself is returned. Otherwise, it is returned a new\n[Node](https://developer.mozilla.org/en-US/docs/Web/API/Node) instance, which contains\na clone of `node` and which replaces `node`.",
            "itemtype": "method",
            "name": "setStyleProperty",
            "params": [
                {
                    "name": "node",
                    "description": "[Node](https://developer.mozilla.org/en-US/docs/Web/API/Node) instance",
                    "type": "DOM.Node"
                },
                {
                    "name": "key",
                    "description": "name of inline style property to set",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "value of the inline style property",
                    "type": "String|Number"
                }
            ],
            "return": {
                "description": "[Node](https://developer.mozilla.org/en-US/docs/Web/API/Node)",
                "type": "DOM.Node"
            },
            "class": "Dom",
            "module": "Document"
        },
        {
            "file": "js\\classes\\HtmlElements\\Dom.js",
            "line": 395,
            "description": "Gets inline style property with name `key` of `node`. Returns `undefined` if `node`\ndoes not have inline style property `key`.",
            "itemtype": "method",
            "name": "getStyleProperty",
            "params": [
                {
                    "name": "node",
                    "description": "[Node](https://developer.mozilla.org/en-US/docs/Web/API/Node) instance",
                    "type": "DOM.Node"
                },
                {
                    "name": "key",
                    "description": "name of inline style property of `node`",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String|Number"
            },
            "class": "Dom",
            "module": "Document"
        },
        {
            "file": "js\\classes\\HtmlElements\\Dom.js",
            "line": 413,
            "description": "Drops inline style property `key` from `node` and removes inline style attribute if\nit becomes empty.\nReturns `true` if the initially contains inline style property `key` and `false` otherwise.",
            "itemtype": "method",
            "name": "dropStyleProperty",
            "params": [
                {
                    "name": "node",
                    "description": "[Node](https://developer.mozilla.org/en-US/docs/Web/API/Node) instance",
                    "type": "DOM.Node"
                },
                {
                    "name": "key",
                    "description": "name of inline style attribute to drop",
                    "type": "String"
                }
            ],
            "return": {
                "description": "`true` if successefully deleted the requested property\n                                                and `false` otherwise",
                "type": "Boolean"
            },
            "class": "Dom",
            "module": "Document"
        },
        {
            "file": "js\\classes\\HtmlElements\\Dom.js",
            "line": 441,
            "description": "Toggles style property `key` of element `elem` from `primary` to `secondary`.\nIf the element has style property `key` equal to `primary`, then it is imposed to `secondary`.\nOtherwise, it is imposed to `primary`.\n\nAn element is considered to have style property imposed if either the element itself, or any of\nits parents has that value imposed.\n\nIf not [Element](https://developer.mozilla.org/en-US/docs/Web/API/Element) instance is given as the first\nargument, then the method performs nothing. Note, that for text nodes this method is not applicable,\nsince text nodes have no attributes.",
            "itemtype": "method",
            "name": "toggleElementStyle",
            "params": [
                {
                    "name": "elem",
                    "description": "[Element](https://developer.mozilla.org/en-US/docs/Web/API/Element) instance",
                    "type": "DOM.Element"
                },
                {
                    "name": "key",
                    "description": "name of style property to change",
                    "type": "String"
                },
                {
                    "name": "primary",
                    "description": "primary value of the above style property",
                    "type": "String|Number"
                },
                {
                    "name": "secondary",
                    "description": "secondary value of the style property",
                    "type": "String|Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "since": "0.0.4",
            "class": "Dom",
            "module": "Document"
        },
        {
            "file": "js\\classes\\HtmlElements\\Dom.js",
            "line": 471,
            "description": "Returns an [Element](https://developer.mozilla.org/en-US/docs/Web/API/Element) instance with the style\nproperty `key` equal to `secondary` if value of `key` attribute in \"style\" property  is equal to `primary`. Otherwise,\n`key` value will be imposed to `primary`.\n\nCreated instance is a \"span\" html tag.",
            "itemtype": "method",
            "name": "createToggledElemFromText",
            "params": [
                {
                    "name": "textNode",
                    "description": "[Text](https://developer.mozilla.org/en-US/docs/Web/API/Text)\n                                                     instance whose \"toggle\" copy is to be created",
                    "type": "DOM.Text"
                },
                {
                    "name": "key",
                    "description": "name of style property (i.e., \"text-decoration\", \"font-style\")",
                    "type": "String"
                },
                {
                    "name": "primary",
                    "description": "primary value of the style property",
                    "type": "String|Number"
                },
                {
                    "name": "secondary",
                    "description": "secondary value",
                    "type": "String|Number"
                }
            ],
            "return": {
                "description": "",
                "type": "DOM.Node"
            },
            "since": "0.0.4",
            "class": "Dom",
            "module": "Document"
        },
        {
            "file": "js\\classes\\HtmlElements\\Dom.js",
            "line": 499,
            "description": "Returns a one-dimensional array of [Node](https://developer.mozilla.org/en-US/docs/Web/API/Node) instances\nthat are descendants of `startNode-...-endNode` path but do not belong to that path.\nIf path from `startNode` to `endNode` does not exist, an error is thrown.\n<dl>\n<dt> Path A - ... - B</dt>\n<dd> An ordered collection of nodes n<sub>i</sub> from which one needs to pass through in order\nto arrive to node B starting from node A passing always from a node to its child.\n</dd>\n<dt> Descendant of a path A - ... - B</dt>\n<dd>\n\tA node C is a descendant of A - ... - B path if parent of node C belongs to A - ... - B path.\n</dd>\n</dl>",
            "itemtype": "method",
            "name": "complementNodes",
            "params": [
                {
                    "name": "startNode",
                    "description": "a [Node](https://developer.mozilla.org/en-US/docs/Web/API/Node)\n                                                        instance from which to start the path",
                    "type": "DOM.Node"
                },
                {
                    "name": "endNode",
                    "description": "a [Node](https://developer.mozilla.org/en-US/docs/Web/API/Node)\n                                                        instance at which to finish the path",
                    "type": "DOM.Node"
                }
            ],
            "return": {
                "description": "one-dimensional array of\n                                                        [Node](https://developer.mozilla.org/en-US/docs/Web/API/Node)\n                                                        instances or empty array",
                "type": "Array"
            },
            "class": "Dom",
            "module": "Document"
        },
        {
            "file": "js\\classes\\HtmlElements\\Dom.js",
            "line": 544,
            "description": "Replaces `propSecondary` string by `propPrimary` one in the class attribute of `elem`.\nIf `propSecondary` does not exist, then `propPrimary` is just appended to class\nattributes. If class attribute does not exist, then it is created with value `propName`.",
            "itemtype": "method",
            "name": "switchClassProperty",
            "params": [
                {
                    "name": "elem",
                    "description": "",
                    "type": "DOM.Element"
                },
                {
                    "name": "propPrimary",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "propSecondary",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "since": "0.0.6",
            "class": "Dom",
            "module": "Document"
        },
        {
            "file": "js\\classes\\HtmlElements\\Dom.js",
            "line": 575,
            "description": "Returns a Properties instance that accumulates the highest specificity attributes and styles of\nnode `n` within the scope `s` (included).\n\nThe method parses DOM ascending from the node `n` up to node `s` (included) and accumulates only those\nstyles/attributes that have not been set so far: that is if an attribute encouters more than once,\nonly its first occurence gets into consideration.\n\nIf node `s` is not set, then parsing is performed up to the \"highest\" root.\nIf node `s` is set, but node `n` is not its descendant, then a\n{{#crossLink \"Properties\"}}Properties{{/crossLink}} instance corresponding to node `n`\nis returned.",
            "itemtype": "method",
            "name": "getInheritedProperties",
            "params": [
                {
                    "name": "n",
                    "description": "",
                    "type": "DOM.Element"
                },
                {
                    "name": "s",
                    "description": "Optional",
                    "type": "DOM.Element"
                }
            ],
            "return": {
                "description": "",
                "type": "Properties"
            },
            "since": "0.0.7",
            "class": "Dom",
            "module": "Document"
        },
        {
            "file": "js\\classes\\HtmlElements\\Factory.js",
            "line": 24,
            "description": "An instance of {{#crossLink \"Mapper\"}}Mapper{{/crossLink}} class.",
            "itemtype": "property",
            "name": "_mapping",
            "access": "private",
            "tagname": "",
            "type": "{Mapper}",
            "class": "Factory",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Factory.js",
            "line": 32,
            "description": "{{#crossLink \"Factory/_mapping:property\"}}Mapper{{/crossLink}} getter.",
            "itemtype": "method",
            "name": "getMapping",
            "return": {
                "description": "",
                "type": "Mapper"
            },
            "class": "Factory",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Factory.js",
            "line": 41,
            "description": "{{#crossLink \"Factory/_mapping:property\"}}Mapper{{/crossLink}} setter. Returns `true`\nif the argument is an instance of {{#crossLink \"Mapper\"}}Mapper{{/crossLink}} class and\n`false` otherwise.",
            "itemtype": "method",
            "name": "setMapping",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Factory",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Factory.js",
            "line": 56,
            "description": "Creates a class instance corresponding to the argument. The decision is to be taken\nbased on the {{#crossLink \"Mapper/findTargetFor:method\"}}findTargetFor(){{/crossLink}}\nof {{#crossLink \"Factory/_mapping:method\"}}_mapping{{/crossLink}} property.",
            "itemtype": "method",
            "name": "stub",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "",
                "type": "Object|Null"
            },
            "class": "Factory",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Factory.js",
            "line": 75,
            "description": "Creates a copy of the argument. It first calls {{#crossLink \"Factory/stub:method\"}}stub{{/crossLink}} and if its\nresult responds to method \"load\", calls it.",
            "itemtype": "method",
            "name": "mimic",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Factory",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Mapper.js",
            "line": 21,
            "description": "Array of mappings. Each array element is an object with two keys: `criterion` and `target`.\nValue of `criterion` must be a boolean-valued function, while `target` must be a class.",
            "itemtype": "property",
            "name": "mappings",
            "type": "{Array}",
            "access": "private",
            "tagname": "",
            "default": "[]",
            "class": "Mapper",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Mapper.js",
            "line": 31,
            "description": "Default target.",
            "itemtype": "property",
            "name": "defaultTarget",
            "type": "Function|Null",
            "access": "private",
            "tagname": "",
            "default": "null",
            "class": "Mapper",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Mapper.js",
            "line": 39,
            "description": "{{#crossLink \"Mapper/defaultTarget:property\"}}Default target{{/crossLink}} setter. Assigns only\nif the argument is a function.",
            "itemtype": "method",
            "name": "setDefaultTarget",
            "params": [
                {
                    "name": "fun",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Mapper",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Mapper.js",
            "line": 52,
            "description": "{{#crossLink \"Mapper/defaultTarget:property\"}}Default target{{/crossLink}} getter.",
            "itemtype": "method",
            "name": "getDefaultTarget",
            "return": {
                "description": "",
                "type": "Function|Null"
            },
            "class": "Mapper",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Mapper.js",
            "line": 62,
            "description": "Forms an object {'criterion': crit, 'target': target} from the input and it it\nturns out to be a valid mapping, then this mapping is\nappended to {{#crossLink \"Mapper/mappings:property\"}}mappings{{/crossLink}}\nand the `true` is returned. Otherwise, `false` is returned.<br>\nA mapping is a valid one if method\n{{#crossLink \"Mapper/isValidMapping:method\"}}isValidMapping(){{/crossLink}} returns `true`.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "criterion",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "target",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Mapper",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Mapper.js",
            "line": 89,
            "description": "Returns a copy of the {{#crossLink \"Mapper/mappings:property\"}}mappings{{/crossLink}}.",
            "itemtype": "method",
            "name": "getMappings",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Mapper",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Mapper.js",
            "line": 100,
            "description": "Returns `true` if the argument is an object with function-valued keys `criterion` and `target`.\nReturns `false` otherwise.",
            "itemtype": "method",
            "name": "isValidMapping",
            "params": [
                {
                    "name": "map",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Mapper",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Mapper.js",
            "line": 111,
            "description": "Reset {{#crossLink \"Mapper/mappings:property\"}}mappings{{/crossLink}} to an empty array.",
            "itemtype": "method",
            "name": "flush",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Mapper",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Mapper.js",
            "line": 120,
            "description": "Finds target for the argument. It parses array {{#crossLink \"Mapper/mappings:property\"}}mappings{{/crossLink}}\nand calls `criterion` function of the array element. Value of `target` key of first `criterion` that returns\n`true`, is returned. If not found,\n{{#crossLink \"Mapper/getDefaultTarget:method\"}}getDefaultTarget(){{/crossLink}} is returned.",
            "itemtype": "method",
            "name": "findTargetFor",
            "params": [
                {
                    "name": "needle",
                    "description": "this variable is to be given as input for `criterion` function\n                                                of each array of mappings.",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "",
                "type": "Function|Null"
            },
            "class": "Mapper",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\PlainText.js",
            "line": 19,
            "description": "Returns the class name.  This property is introduced for compatibility with IE: i.e.\nin FF, `this.constructor` has `name` property that returns \"PlainText\", while in IE, there\nis no `name` property.",
            "itemtype": "property",
            "name": "className",
            "type": "{String}",
            "default": "\"PlainText\"",
            "access": "private",
            "tagname": "",
            "since": "0.0.2",
            "class": "PlainText",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\PlainText.js",
            "line": 31,
            "description": "Marker for instances of this class.",
            "itemtype": "property",
            "name": "tag",
            "type": "{String}",
            "access": "private",
            "tagname": "",
            "default": "\"text\"",
            "class": "PlainText",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\PlainText.js",
            "line": 41,
            "description": "{{#crossLink \"Text/tag:property\"}}tag{{/crossLink}} getter.",
            "itemtype": "method",
            "name": "getTag",
            "return": {
                "description": "",
                "type": "String"
            },
            "since": "0.0.4",
            "class": "PlainText",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\PlainText.js",
            "line": 51,
            "description": "{{#crossLink \"Text/className:property\"}}Class name{{/crossLink}} getter.",
            "itemtype": "method",
            "name": "getName",
            "return": {
                "description": "",
                "type": "String"
            },
            "since": "0.0.4",
            "class": "PlainText",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\PlainText.js",
            "line": 62,
            "description": "Content of the Text() instance.",
            "itemtype": "property",
            "name": "content",
            "type": "{String}",
            "access": "private",
            "tagname": "",
            "class": "PlainText",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\PlainText.js",
            "line": 70,
            "description": "Sets the `content` of the Text() instance. If the argument is neither string nor number, the `content` is set to empty string.",
            "itemtype": "method",
            "name": "setContent",
            "params": [
                {
                    "name": "arg",
                    "description": "",
                    "type": "String|Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "PlainText",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\PlainText.js",
            "line": 83,
            "description": "Returns content of the Text() instance.",
            "itemtype": "method",
            "name": "getContent",
            "return": {
                "description": "",
                "type": "String"
            },
            "type": "{String}",
            "class": "PlainText",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\PlainText.js",
            "line": 93,
            "description": "Returns html representation of the string which is nothing but `content` property itself.",
            "itemtype": "method",
            "name": "toHtml",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "PlainText",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\PlainText.js",
            "line": 103,
            "description": "Loads the instance of this class with info from the argument and returns `true` if the argument is\na [text node](https://developer.mozilla.org/en-US/docs/Web/API/Text) or a string. In this case\n{{#crossLink \"Text/content:property\"}}content{{/crossLink}} is set to the string content of the argument.\nOtherwise, `false` is returned.",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "elem",
                    "description": "",
                    "type": "DOM.TEXT|String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "PlainText",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\PlainText.js",
            "line": 126,
            "description": "Returns `true` if the result of {{#crossLink \"PlainText/getContent:method\"}}getContent(){{/crossLink}}\nis an empty string, null or undefined (even if it should never happen).",
            "itemtype": "method",
            "name": "isEmpty",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "PlainText",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\PlainText.js",
            "line": 137,
            "description": "Returns an instance of  [DOM.Text](https://developer.mozilla.org/en-US/docs/Web/API/Text)\ncorresponding to the instance of this class.",
            "itemtype": "method",
            "name": "toNode",
            "return": {
                "description": "",
                "type": "DOM.Text"
            },
            "class": "PlainText",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\PlainText.js",
            "line": 149,
            "description": "Clones the target. Parses all attributes of the target. If the attribute responds to \"clone\"\nmethod, then assign the result of this method to the corresponding clone attribute. Otherwise,\nassign the attribute value to the clone attribute (potentially problematic for what is passed\nby reference and not by value, like arrays).\n{{#crossLink \"PlainText/content:property\"}}content{{/crossLink}} is a private variable, so in the\nclone it is fed by means of {{#crossLink \"PlainText/getContent:method\"}}getContent(){{/crossLink}}\nand {{#crossLink \"PlainText/setContent:method\"}}setContent(){{/crossLink}} methods.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "PlainText",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag.js",
            "line": 21,
            "description": "Html tag corresponding to this class.",
            "itemtype": "property",
            "name": "tag",
            "type": "String",
            "default": "null",
            "access": "private",
            "tagname": "",
            "since": "0.0.1",
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag.js",
            "line": 30,
            "description": "Name of the current class.  This property is introduced for compatibility with IE: i.e.\nin FF, `this.constructor` has `tag` property that returns \"Tag\", while in IE, there\nis no `tag` property.\nEvery class that inherits from this one, should override this property.",
            "itemtype": "property",
            "name": "className",
            "type": "{String}",
            "default": "\"Tag\"",
            "access": "private",
            "tagname": "",
            "readonly": "",
            "since": "0.0.2",
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag.js",
            "line": 44,
            "description": "{{#crossLink \"Tag/tag:property\"}}tag{{/crossLink}} getter.",
            "itemtype": "method",
            "name": "getTag",
            "return": {
                "description": "",
                "type": "String"
            },
            "since": "0.0.1",
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag.js",
            "line": 55,
            "description": "{{#crossLink \"Tag/tag:property\"}}tag{{/crossLink}} setter. If the argument is\na string or a number, then if necessary, converts it into a string and performs\nassignment. If the argument is of any other type, no assignment occures.",
            "itemtype": "method",
            "name": "setTag",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String|Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "since": "0.0.1",
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag.js",
            "line": 76,
            "description": "Represents all properties of the tag. Previously, it was split into Attributes and Styles.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "_properties",
            "type": "{Properties}",
            "default": "Properties()",
            "since": "0.0.5",
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag.js",
            "line": 86,
            "description": "Content of the tag.",
            "itemtype": "property",
            "name": "content",
            "type": "{Content}",
            "default": "Content()",
            "access": "private",
            "tagname": "",
            "since": "0.0.4",
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag.js",
            "line": 98,
            "description": "Marker name.\n\nThis string stores the name of attribute which is used to mark the instance using\nthe method {{#crossLink \"Tag/mark:method\"}}mark(){{/crossLink}}.",
            "itemtype": "property",
            "name": "_marker",
            "type": "{String}",
            "default": "null",
            "access": "private",
            "tagname": "",
            "since": "0.0.6",
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag.js",
            "line": 111,
            "description": "{{#crossLink \"Tag/_marker:property\"}}_marker{{/crossLink}} getter.",
            "itemtype": "method",
            "name": "getMarker",
            "return": {
                "description": "",
                "type": "String"
            },
            "since": "0.0.6",
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag.js",
            "line": 122,
            "description": "{{#crossLink \"Tag/_marker:property\"}}_marker{{/crossLink}} setter.",
            "itemtype": "method",
            "name": "setMarker",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "since": "0.0.6",
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag.js",
            "line": 134,
            "description": "Sets {{#crossLink \"Tag/_properties:property\"}}properties{{/crossLink}} of the tag. If the argument is an instance\nof {{#crossLink \"Properties\"}}Properties{{/crossLink}}, its clone is assigned to private variable\n{{#crossLink \"Tag/_properties:property\"}}_properties{{/crossLink}}, otherwise the argument is passed to the\n{{#crossLink \"Properties\"}}Properties{{/crossLink}} constructor and newly created instance is assigned to\n{{#crossLink \"Tag/_properties:property\"}}_properties{{/crossLink}}.",
            "itemtype": "method",
            "name": "setProperties",
            "since": "0.0.5",
            "params": [
                {
                    "name": "prop",
                    "description": "",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag.js",
            "line": 153,
            "description": "Returns clone of {{#crossLink \"Tag/_properties:property\"}}_properties{{/crossLink}}.",
            "itemtype": "method",
            "name": "getProperties",
            "since": "0.0.5",
            "return": {
                "description": "",
                "type": "Properties"
            },
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag.js",
            "line": 164,
            "description": "Sets `style` property inside {{#crossLink \"Tag/_properties:property\"}}_properties{{/crossLink}}. It is an alias\nfor {{#crossLink \"Properties/setStyles:method\"}}setStyles(){{/crossLink}} method.",
            "itemtype": "method",
            "name": "setStyles",
            "params": [
                {
                    "name": "stl",
                    "description": "",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "since": "0.0.4",
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag.js",
            "line": 178,
            "description": "Gets `style` key of private variable {{#crossLink \"Tag/_properties:property\"}}_properties{{/crossLink}}.\nIt is an alias for {{#crossLink \"Properties/getStyles:method\"}}Properties::getStyles{{/crossLink}} method.",
            "itemtype": "method",
            "name": "getStyles",
            "return": {
                "description": "",
                "type": "Properties"
            },
            "since": "0.0.4",
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag.js",
            "line": 191,
            "description": "Smart {{#crossLink \"Tag/content:property\"}}content{{/crossLink}} setter. If the argument is a\n{{#crossLink \"Content\"}}Content{{/crossLink}} instance, then\n{{#crossLink \"Tag/content:property\"}}content{{/crossLink}}\nis set to this value. Otherwise, the argument is passed to the constructor of new instance of\n{{#crossLink \"Content\"}}Content{{/crossLink}} and the result is assigned to\n{{#crossLink \"Tag/content:property\"}}content{{/crossLink}}.",
            "itemtype": "method",
            "name": "setContent",
            "params": [
                {
                    "name": "cntn",
                    "description": "",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "since": "0.0.1",
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag.js",
            "line": 212,
            "description": "Returns copy of {{#crossLink \"Tag/content:property\"}}Content{{/crossLink}}.",
            "itemtype": "method",
            "name": "getContent",
            "return": {
                "description": "",
                "type": "Content"
            },
            "since": "0.0.4",
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag.js",
            "line": 222,
            "description": "{{#crossLink \"Tag/className:property\"}}Class name{{/crossLink}} getter.",
            "itemtype": "method",
            "name": "getName",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag.js",
            "line": 231,
            "description": "{{#crossLink \"Tag/className:property\"}}Class name{{/crossLink}} setter. Use it with caution. This\nmethod is intended to be used in classes that inherite from this one in order to set the name attribute.\n(If only were there a late binding ...)",
            "itemtype": "method",
            "name": "setName",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag.js",
            "line": 247,
            "description": "Appends style to the instance. Alias for {{#crossLink \"Styles/appendStyle:method\"}}Styles::appendStyle{{/crossLink}}.",
            "itemtype": "method",
            "name": "appendStyle",
            "params": [
                {
                    "name": "newStyle",
                    "description": "style to be appended",
                    "type": "Styles|Obj"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "since": "0.0.1",
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag.js",
            "line": 260,
            "description": "Appends style to the instance. Alias for\n{{#crossLink \"Attributes/appendAttributes:method\"}}Attributes::appendAttributes{{/crossLink}}.",
            "itemtype": "method",
            "name": "appendAttributes",
            "params": [
                {
                    "name": "attr",
                    "description": "attributes to be appended",
                    "type": "Obj"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "since": "0.0.1",
            "deprecated": true,
            "deprecationMessage": "Use appendProperties instead",
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag.js",
            "line": 276,
            "description": "Appends properties to {{#crossLink \"Tag/_properties:property\"}}_properties{{/crossLink}}\nof the instance. Alias for\n{{#crossLink \"Properties/appendProperty:method\"}}appendProperty(){{/crossLink}} method.",
            "itemtype": "method",
            "name": "appendProperties",
            "params": [
                {
                    "name": "prop",
                    "description": "properties to be appended",
                    "type": "Obj"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "since": "0.0.5",
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag.js",
            "line": 290,
            "description": "Appends style `stl` to element at position `pos.` It is an alias for the method\n{{#crossLink \"Content/appendStyleToElemAt:method\"}}appendStyleToElemAt{{/crossLink}}.",
            "itemtype": "method",
            "name": "appendStyleToElemAt",
            "params": [
                {
                    "name": "pos",
                    "description": "",
                    "type": "Any"
                },
                {
                    "name": "stl",
                    "description": "",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "since": "0.0.1",
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag.js",
            "line": 304,
            "description": "Retrieves requested property from {{#crossLink \"Tag/styles:property\"}}styles{{/crossLink}}\nproperty of the current object.",
            "itemtype": "method",
            "name": "getStyleProperty",
            "params": [
                {
                    "name": "prop",
                    "description": "property name to be retrieved from the styles",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Any"
            },
            "since": "0.0.4",
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag.js",
            "line": 320,
            "description": "Imposes requested property value in {{#crossLink \"Tag/styles:property\"}}styles{{/crossLink}}\nproperty of the current object.",
            "itemtype": "method",
            "name": "setStyleProperty",
            "params": [
                {
                    "name": "key",
                    "description": "property name to be set",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "property value",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Any"
            },
            "since": "0.0.4",
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag.js",
            "line": 334,
            "description": "Retrieves value of `prop` from {{#crossLink \"Tag/_properties:property\"}}_properties{{/crossLink}}\nof the current object.",
            "itemtype": "method",
            "name": "getProperty",
            "params": [
                {
                    "name": "prop",
                    "description": "property name to be retrieved from the attributes",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Any"
            },
            "since": "0.0.5",
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag.js",
            "line": 348,
            "description": "Sets the value of `key` of {{#crossLink \"Tag/_properties:property\"}}_properties{{/crossLink}}\nto `value`. Alias for {{#crossLink \"Properties/setProperty:property\"}}setProperty{{/crossLink}}",
            "itemtype": "method",
            "name": "setProperty",
            "params": [
                {
                    "name": "key",
                    "description": "property name to be set",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "property value",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "since": "0.0.5",
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag.js",
            "line": 362,
            "description": "Returns `true` if {{#crossLink \"Tag/_properties:property\"}}_properties{{/crossLink}}\ncontains `key` and `false` otherwise. Alias for\n{{#crossLink \"Properties/hasProperty:method\"}}hasProperty{{/crossLink}}",
            "itemtype": "method",
            "name": "hasProperty",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag.js",
            "line": 375,
            "description": "Returns `true` if {{#crossLink \"Tag/_properties:property\"}}_properties{{/crossLink}}\ncontains attribute `key` and `false` otherwise.",
            "itemtype": "method",
            "name": "hasStyleProperty",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag.js",
            "line": 387,
            "description": "Drops `key` from {{#crossLink \"Tag/_properties:property\"}}_properties{{/crossLink}}\nof the current object and returns a value of the key.",
            "itemtype": "method",
            "name": "dropProperty",
            "params": [
                {
                    "name": "key",
                    "description": "property name to be retrieved from the attributes",
                    "type": "String"
                }
            ],
            "return": {
                "description": "value of the key in the attributes",
                "type": "Any"
            },
            "since": "0.0.5",
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag.js",
            "line": 401,
            "description": "Drops requested property from {{#crossLink \"Tag/styles:property\"}}styles{{/crossLink}}\nproperty of the current object.",
            "itemtype": "method",
            "name": "dropStyleProperty",
            "params": [
                {
                    "name": "key",
                    "description": "property name to be retrieved from the styles",
                    "type": "String"
                }
            ],
            "return": {
                "description": "value of the key in the styles",
                "type": "Any"
            },
            "since": "0.0.4",
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag.js",
            "line": 415,
            "description": "Calls {{#crossLink \"Properties/setWidth:method\"}}setWidth(){{/crossLink}} methods to set the widths.",
            "itemtype": "method",
            "name": "setWidth",
            "params": [
                {
                    "name": "w",
                    "description": "",
                    "type": "String|Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "since": "0.0.1",
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag.js",
            "line": 428,
            "description": "Retrieves value of `width` attribute of {{#crossLink \"Tag/_properties:property\"}}_properties{{/crossLink}}.",
            "itemtype": "method",
            "name": "getWidth",
            "return": {
                "description": "",
                "type": "Mixed"
            },
            "since": "0.0.4",
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag.js",
            "line": 441,
            "description": "Returns absolute value of `width` attribute of {{#crossLink \"Tag/styles:property\"}}styles{{/crossLink}}\nproperty without unit of measurement. If `width` is not defined or defined but its absolute value\ncan not be found, then `undefined` is returned.",
            "itemtype": "method",
            "name": "getWidthValue",
            "return": {
                "description": "width without unit of measurement",
                "type": "Number|Null"
            },
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag.js",
            "line": 459,
            "description": "Returns copy of {{#crossLink \"Content/elements\"}}elements{{/crossLink}} of\n{{#crossLink \"Tag/content\"}}content{{/crossLink}}.",
            "itemtype": "method",
            "name": "getElements",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag.js",
            "line": 473,
            "description": "Imposes {{#crossLink \"Content/elements:property\"}}elements{{/crossLink}} of\n{{#crossLink \"Tag/content:property\"}}content{{/crossLink}}. If the argument\nis not array, not assignment occures.",
            "itemtype": "method",
            "name": "setElements",
            "params": [
                {
                    "name": "arr",
                    "description": "",
                    "type": "Array"
                }
            ],
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag.js",
            "line": 486,
            "description": "Gets the element stored in {{#crossLink \"Tag/content:property\"}}content{{/crossLink}}. Delegates its\nfunctionality to class {{#crossLink \"Content\"}}Content{{/crossLink}}.",
            "itemtype": "method",
            "name": "getElem",
            "params": [
                {
                    "name": "pos",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Any"
            },
            "since": "0.0.1",
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag.js",
            "line": 498,
            "description": "Returns copy of the first element of {{#crossLink \"Tag/content:property\"}}content{{/crossLink}}.\nAlias for {{#crossLink \"Content/getFirst:method\"}}Content::getFirst{{/crossLink}}.",
            "itemtype": "method",
            "name": "getFirst",
            "return": {
                "description": "",
                "type": "Any"
            },
            "since": "0.0.1",
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag.js",
            "line": 509,
            "description": "Returns copy of the first element of {{#crossLink \"Tag/content:property\"}}content{{/crossLink}}.\nAlias for {{#crossLink \"Content/getLast:method\"}}Content::getlast{{/crossLink}}.",
            "itemtype": "method",
            "name": "getLast",
            "return": {
                "description": "",
                "type": "Any"
            },
            "since": "0.0.1",
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag.js",
            "line": 520,
            "description": "Inserts an element into given position. Delegates its functionality to the class\n{{#crossLink \"Content\"}}Content{{/crossLink}}.",
            "itemtype": "method",
            "name": "insertElemAt",
            "params": [
                {
                    "name": "pos",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "elem",
                    "description": "",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "since": "0.0.1",
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag.js",
            "line": 533,
            "description": "Appends the element to the content of the list item. Delegates its functionality to\n{{#crossLink \"Content/appendElem:method\"}}appendElem{{/crossLink}}.",
            "itemtype": "method",
            "name": "appendElem",
            "params": [
                {
                    "name": "elem",
                    "description": "",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "since": "0.0.1",
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag.js",
            "line": 545,
            "description": "Returns the number of elements inside its content. Delegates to Content::length().",
            "itemtype": "method",
            "name": "length",
            "return": {
                "description": "",
                "type": "Number"
            },
            "since": "0.0.1",
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag.js",
            "line": 555,
            "description": "Deletes element from \"content\" property. Delegates its functionalality to\n{{#crossLink \"Content/dropElemAt:method}}dropElemAt{{/crossLink}}.",
            "itemtype": "method",
            "name": "dropElemAt",
            "params": [
                {
                    "name": "pos",
                    "description": "intented to be an integer, but no check is performed",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "",
                "type": "Any"
            },
            "since": "0.0.1",
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag.js",
            "line": 567,
            "description": "Deletes first element from \"content\" property. Delegates its functionalality to\n{{#crossLink \"Content/dropFirst:method\"}}Content::dropFirst(){{/crossLink}}.",
            "itemtype": "method",
            "name": "dropFirst",
            "return": {
                "description": "",
                "type": "Void"
            },
            "since": "0.0.1",
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag.js",
            "line": 578,
            "description": "Deletes last element from \"content\" property. Delegates its functionalality to\n{{#crossLink \"Content/dropLast:method\"}}Content::dropLast(){{/crossLink}}.",
            "itemtype": "method",
            "name": "dropLast",
            "return": {
                "description": "",
                "type": "Void"
            },
            "since": "0.0.1",
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag.js",
            "line": 590,
            "description": "If {{#crossLink \"Tag/tag:property\"}}tag{{/crossLink}} is a non-empty string, then it is\nreturned a string with which html representaion of current instance starts,\ni.e.: `<div class=\"media\" style=\"color: red; width: 73%\">`.",
            "itemtype": "method",
            "name": "openingTag",
            "return": {
                "description": "",
                "type": "String|Null"
            },
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag.js",
            "line": 610,
            "description": "Returns html closing tag, i.e. `</span>`.",
            "itemtype": "method",
            "name": "closingTag",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag.js",
            "line": 622,
            "description": "Gives html representation of the instance.\nIf {{#crossLink \"Tag/tag:property\"}}tag{{/crossLink}} is not a non-empty string, just html comment is generated.",
            "itemtype": "method",
            "name": "toHtml",
            "return": {
                "description": "",
                "type": "String"
            },
            "since": "0.0.1",
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag.js",
            "line": 643,
            "description": "Generates plain text representation of the tag content. Calls {{#crossLink \"Content/toText:method\"}}Content::toText(){{/crossLink}}.",
            "itemtype": "method",
            "name": "toText",
            "return": {
                "description": "",
                "type": "String"
            },
            "since": "0.0.1",
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag.js",
            "line": 653,
            "description": "Returns true, if the tag is empty. Returns false otherwise.<br />\nThe tag is considered empty if `isEmpty()` method for its {{#crossLink \"Tag/attributes:property\"}}attributes{{/crossLink}}\nand {{#crossLink \"Tag/styles:property\"}}styles{{/crossLink}} and {{#crossLink \"Content\"}}content{{/crossLink}} returns true.",
            "itemtype": "method",
            "name": "isEmpty",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "since": "0.0.1",
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag.js",
            "line": 665,
            "description": "Empties {{#crossLink \"Tag/content:property\"}}content{{/crossLink}}.",
            "itemtype": "method",
            "name": "flushContent",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag.js",
            "line": 675,
            "description": "Sets {{#crossLink \"Tag/_properties:property\"}}_properties{{/crossLink}} to a new\n{{#crossLink \"Properties\"}}Properties{{/crossLink}} instance.",
            "itemtype": "method",
            "name": "flushProperties",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag.js",
            "line": 686,
            "description": "Trims the content. Calls method {{#crossLink \"Content/trim:method\"}}Content::trim(){{/crossLink}} on the\n{{#crossLink \"Tag/content:property\"}}content{{/crossLink}} property.",
            "itemtype": "method",
            "name": "trim",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag.js",
            "line": 697,
            "description": "Appends element to the content. It is alias for the\n{{#crossLink \"Content/appendElem:method\"}}Content::appendElemIfNotEmpty(arg){{/crossLink}}",
            "itemtype": "method",
            "name": "appendElemIfNotEmpty",
            "params": [
                {
                    "name": "arg",
                    "description": "",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag.js",
            "line": 709,
            "description": "Creates a clone of the target. If the target has a `className` attribute corresponding to\nexisiting class, then that class instance is to be returned. Otherwise a {{#crossLink \"Tag\"}}Tag{{/crossLink}}\ninstance is returned. The method parses all attributes of the target and if the attribute\nresponds to a \"clone\" method, then calls this method and assigns its result to the corresponding\nclone attribute. Otherwise, assign target attribute value to the clone attribute (there might be\na potential problem with what is passed by reference and not by values, i.e. array). But among\n{{#crossLink \"Tag\"}}Tag{{/crossLink}} properties there are no array-valued ones.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag.js",
            "line": 737,
            "description": "Populates the following properties of the target object\n<ol><li>\n{{#crossLink \"Tag/tag:property\"}}tag{{/crossLink}}\n</li><li>\n{{#crossLink \"Tag/_properties:property\"}}_properties{{/crossLink}} by calling\n{{#crossLink \"Properties/load:method\"}}load(){{/crossLink}} method.\n</li><li>\n{{#crossLink \"Tag/content:property\"}}content{{/crossLink}} by calling\n{{#crossLink \"Content/load:method\"}}Content::load(){{/crossLink}} method.\n</li></ol>\nfrom the argument which must be an instance of\n[Element](https://developer.mozilla.org/en-US/docs/Web/API/Element) class. Returns `true` if\nthe argument is of required type and the above mentioned  `load` methods return `true`. Otherwise,\n`false` is returned.<br />\nNB: DOM.Element.attributes has the form `{1: {tag: \"width\", value:\"100\", ...}, 2: {tag: \"color\", value:\"black\", ...}, ...}`",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "elem",
                    "description": "origin from which the element properties are to be loaded",
                    "type": "Element"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag.js",
            "line": 782,
            "description": "Returns [DOM.Element](https://developer.mozilla.org/en-US/docs/Web/API/Element)  object corresponding to the current object.\nCalls methods {{#crossLink \"Attributes/decorateElement:method\"}}Attributes::decorateElement(){{/crossLink}} to apply attributes,\n{{#crossLink \"Style/decorateElement:method\"}}Style::decorateElement(){{/crossLink}} to apply styles and\n{{#crossLink \"Content/stickTo:method\"}}Content::stickTo(){{/crossLink}} to append elements from the\n{{#crossLink \"Tag/content:property\"}}Tag::content{{/crossLink}}.",
            "itemtype": "method",
            "name": "toNode",
            "return": {
                "description": "",
                "type": "DOM.Element"
            },
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag.js",
            "line": 799,
            "description": "Erases current value of atttribute \"title\" and sets it to `str` if `str` is a non-empty string.",
            "itemtype": "method",
            "name": "setTitle",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "since": "0.0.4",
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag.js",
            "line": 815,
            "description": "Applies function `fun` to each element of {{#crossLink \"Tag/content:property\"}}content{{/crossLink}}.\n\nIt is an alias for {{#crossLink \"Content/applyToAll:method\"}}Content::applyToAll(){{/crossLink}} method.",
            "itemtype": "method",
            "name": "applyToAll",
            "params": [
                {
                    "name": "fun",
                    "description": "function to be applied to each element of content",
                    "type": "Function"
                }
            ],
            "since": "0.0.6",
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag.js",
            "line": 830,
            "description": "Marks the target.\n\nAssign value of variable {{#crossLink \"Tag/className:property\"}}classname{{/crossLink}} to attribute `marker`\nand adds this key-value pair into {{#crossLink \"Tag/_properties:property\"}}_properties{{/crossLink}}. It sets\nas well {{#crossLink \"Tag/_marker:property\"}}_marker{{/crossLink}} to be `marker` in order to be able to\napply eventually {{#crossLink \"Tag/unmark:method\"}}unmark{{/crossLink}} method.",
            "itemtype": "method",
            "name": "mark",
            "params": [
                {
                    "name": "marker",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "since": "0.0.6",
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag.js",
            "line": 849,
            "description": "Unmarks the target.\n\nRemoves key {{#crossLink \"Tag/_marker:property\"}}_marker{{/crossLink}} from\n{{#crossLink \"Tag/_properties:property\"}}_properties{{/crossLink}} and clears\nvariable {{#crossLink \"Tag/_marker:property\"}}_marker{{/crossLink}}.",
            "itemtype": "method",
            "name": "unmark",
            "return": {
                "description": "",
                "type": "Void"
            },
            "since": "0.0.6",
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag.js",
            "line": 868,
            "description": "Shrinks instance width by `d`. Alias for {{#crossLink \"Properties/shrinkBy:method\"}}Properties::shrinkBy{{/crossLink}} method.",
            "itemtype": "method",
            "name": "shrinkBy",
            "params": [
                {
                    "name": "d",
                    "description": "",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "since": "0.0.6",
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag.js",
            "line": 882,
            "description": "Sets style key `name` of all children of the current instance to be equal to `value`.",
            "itemtype": "method",
            "name": "setStylePropertyToAll",
            "params": [
                {
                    "name": "key",
                    "description": "style key",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "style value",
                    "type": "String|Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "since": "0.0.6",
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag.js",
            "line": 902,
            "description": "Sets style key `name` of children which indexes are in array `range` to be equal to `value`.\n\nExample: <code>tag.setStylePropertyOfRange('margin', '10px', [1, 4, 6, 7])</code> sets inline style\nproperty `margin` to be `10px` for children which indexes are 1, 4, 6, or 7.",
            "itemtype": "method",
            "name": "setStylePropertyOfRange",
            "params": [
                {
                    "name": "key",
                    "description": "style key",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "style value",
                    "type": "String|Number"
                },
                {
                    "name": "range",
                    "description": "array of children indexes to which apply modifications\n                                               or `null` if modifications are to be applied to all children",
                    "type": "Array|Null"
                }
            ],
            "throws": {
                "description": "If range is niether an array nor null",
                "type": "Error"
            },
            "since": "0.0.6",
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag.js",
            "line": 933,
            "description": "Returns value of style property `key` of children which indexes are in array `range` if all of them have\nthe same value of the property. Otherwise, `null` is returned.\n\n`range` array admits negative numbers (with usual meaning: enumeration starts from the end).",
            "itemtype": "method",
            "name": "getStylePropertyOfRange",
            "params": [
                {
                    "name": "key",
                    "description": "name of style property (e.g., \"width\", \"top-border\")",
                    "type": "String"
                },
                {
                    "name": "range",
                    "description": "array of indexes of the children to take into consideration",
                    "type": "Array|null"
                }
            ],
            "return": {
                "description": "",
                "type": "String|null"
            },
            "since": "0.0.6",
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\HtmlElements\\Tag.js",
            "line": 985,
            "description": "Returns json object that uniquely parametrizes the instance.\n\nTo be overridden by inhertited classes.",
            "itemtype": "method",
            "name": "template",
            "return": {
                "description": "",
                "type": "Object"
            },
            "since": "0.0.7",
            "class": "Tag",
            "module": "HtmlElements"
        },
        {
            "file": "js\\classes\\Properties\\CellProperties.js",
            "line": 18,
            "description": "Re-set private properties defined in parent class {{#crossLink \"Properties\"}}Properties{{/crossLink}}:\n<ol><li>\n{{#crossLink \"Properties/className:property\"}}className{{/crossLink}} to be \"CellProperties\"\n</li></ol>",
            "itemtype": "method",
            "name": "constructor",
            "class": "CellProperties",
            "module": "Properties"
        },
        {
            "file": "js\\classes\\Properties\\CellProperties.js",
            "line": 27,
            "description": "Object with key-value pairs for image style. To be set, if corresponding key is not set.\n<pre>{'border-style': 'none', 'width': 0, 'max-width': 0, 'min-width': 0, 'padding': 0,\n'margin': 0, 'vertical-align': 'top', 'color': '#000001', 'text-align': 'justify'};</pre>",
            "itemtype": "property",
            "name": "imageStyleCore",
            "type": "{Object}",
            "access": "private",
            "tagname": "",
            "class": "CellProperties",
            "module": "Properties"
        },
        {
            "file": "js\\classes\\Properties\\ImageProperties.js",
            "line": 18,
            "description": "Re-set private properties defined in parent class {{#crossLink \"Properties\"}}Properties{{/crossLink}}:\n<ol><li>\n{{#crossLink \"Properties/className:property\"}}className{{/crossLink}} to be \"ImageProperties\"\n</li></ol>",
            "itemtype": "method",
            "name": "constructor",
            "class": "ImageProperties",
            "module": "Properties"
        },
        {
            "file": "js\\classes\\Properties\\ImageProperties.js",
            "line": 28,
            "description": "Default key-value pairs for image attributes.\n<pre>{'src': null, 'width': 0, 'height': 0, 'title': ''}</pre>",
            "itemtype": "property",
            "name": "imageCore",
            "type": "{Object}",
            "access": "private",
            "tagname": "",
            "class": "ImageProperties",
            "module": "Properties"
        },
        {
            "file": "js\\classes\\Properties\\ImageProperties.js",
            "line": 42,
            "description": "Object with key-value pairs for image style. To be set, if corresponding key is not set.\n<pre>{'border-style': 'none', 'width': 0, 'padding': 0, 'margin': 0, 'height': 0}</pre>",
            "itemtype": "property",
            "name": "imageStyleCore",
            "type": "{Object}",
            "access": "private",
            "tagname": "",
            "class": "ImageProperties",
            "module": "Properties"
        },
        {
            "file": "js\\classes\\Properties\\LinkProperties.js",
            "line": 18,
            "description": "Re-set private properties defined in parent class {{#crossLink \"Properties\"}}Properties{{/crossLink}}:\n<ol><li>\n{{#crossLink \"Properties/className:property\"}}className{{/crossLink}} to be \"LinkProperties\"\n</li></ol>",
            "itemtype": "method",
            "name": "constructor",
            "class": "LinkProperties",
            "module": "Properties"
        },
        {
            "file": "js\\classes\\Properties\\LinkProperties.js",
            "line": 28,
            "description": "Default key-value pairs for link attributes.\n<pre>{'href': '', 'target': '_blank', 'title': ''}</pre>",
            "itemtype": "property",
            "name": "linkCore",
            "type": "{Object}",
            "access": "private",
            "tagname": "",
            "class": "LinkProperties",
            "module": "Properties"
        },
        {
            "file": "js\\classes\\Properties\\LinkProperties.js",
            "line": 42,
            "description": "Object with key-value pairs for link style. To be set, if corresponding key is not set.\n<pre>{'text-decoration': 'underline', 'font-weight': 'normal', 'padding': 0, 'margin': 0}</pre>",
            "itemtype": "property",
            "name": "linkStyleCore",
            "type": "{Object}",
            "access": "private",
            "tagname": "",
            "class": "LinkProperties",
            "module": "Properties"
        },
        {
            "file": "js\\classes\\Properties\\ListItemProperties.js",
            "line": 18,
            "description": "Re-set private properties defined in parent class {{#crossLink \"Styles\"}}Styles{{/crossLink}}:\n<ol><li>\n{{#crossLink \"Properties/className:property\"}}className{{/crossLink}} to be \"ListItemProperties\"\n</li></ol>",
            "itemtype": "method",
            "name": "constructor",
            "class": "ListItemProperties",
            "module": "Properties"
        },
        {
            "file": "js\\classes\\Properties\\ListItemProperties.js",
            "line": 28,
            "description": "Object with key-value pairs for styles of list items. To be set, if corresponding key is not set.\n<pre>{'padding': 0, 'margin': 0, 'font-size': 12, 'font-weight': 'normal', 'color': '#000001'}</pre>",
            "itemtype": "property",
            "name": "listItemStyleCore",
            "type": "{Object}",
            "access": "private",
            "tagname": "",
            "class": "ListItemProperties",
            "module": "Properties"
        },
        {
            "file": "js\\classes\\Properties\\ListProperties.js",
            "line": 18,
            "description": "Re-set private properties defined in parent class {{#crossLink \"Styles\"}}Styles{{/crossLink}}:\n<ol><li>\n{{#crossLink \"Properties/className:property\"}}className{{/crossLink}} to be \"ListProperties\"\n</li></ol>",
            "itemtype": "method",
            "name": "constructor",
            "class": "ListProperties",
            "module": "Properties"
        },
        {
            "file": "js\\classes\\Properties\\ListProperties.js",
            "line": 27,
            "description": "Object with key-value pairs for link style. To be set, if corresponding key is not set.\n<pre>{'padding': 0, 'margin-left': 40, 'margin-right': 0, 'margin-top': 0, 'margin-bottom': 0}</pre>",
            "itemtype": "property",
            "name": "linkStyleCore",
            "type": "{Object}",
            "access": "private",
            "tagname": "",
            "class": "ListProperties",
            "module": "Properties"
        },
        {
            "file": "js\\classes\\Properties\\RowProperties.js",
            "line": 18,
            "description": "Re-set private properties defined in parent class {{#crossLink \"Properties\"}}Properties{{/crossLink}}:\n<ol><li>\n{{#crossLink \"Properties/className:property\"}}className{{/crossLink}} to be \"RowProperties\"\n</li></ol>",
            "itemtype": "method",
            "name": "constructor",
            "class": "RowProperties",
            "module": "Properties"
        },
        {
            "file": "js\\classes\\Properties\\RowProperties.js",
            "line": 28,
            "description": "Object with key-value pairs for link style. To be set, if corresponding key is not set.\n<pre>{'border-style': 'none', 'width': 0, 'max-width': 0, 'min-width': 0, 'padding': 0, 'margin': 0}</pre>",
            "itemtype": "property",
            "name": "rowStyleCore",
            "type": "{Object}",
            "access": "private",
            "tagname": "",
            "class": "RowProperties",
            "module": "Properties"
        },
        {
            "file": "js\\classes\\Properties\\TableProperties.js",
            "line": 18,
            "description": "Re-set private properties defined in parent class {{#crossLink \"Properties\"}}Properties{{/crossLink}}:\n<ol><li>\n{{#crossLink \"Properties/className:property\"}}className{{/crossLink}} to be \"TableProperties\"\n</li></ol>",
            "itemtype": "method",
            "name": "constructor",
            "class": "TableProperties",
            "module": "Properties"
        },
        {
            "file": "js\\classes\\Properties\\TableProperties.js",
            "line": 28,
            "description": "Default key-value pairs for image attributes.\n<pre>{'cellpadding': 0, 'cellspacing': 0}</pre>",
            "itemtype": "property",
            "name": "tableCore",
            "type": "{Object}",
            "access": "private",
            "tagname": "",
            "class": "TableProperties",
            "module": "Properties"
        },
        {
            "file": "js\\classes\\Properties\\TableProperties.js",
            "line": 42,
            "description": "Object with key-value pairs for image style. To be set, if corresponding key is not set.\n<pre>{'border-style': 'none', 'padding': 0, 'margin': 0, 'width': 0, 'max-width': 0,  'min-width': 0,\n'border-spacing': '0px 0px', 'font-size': 13, 'text-align': 'justify', 'font-family': 'Arial, sans-serif'}</pre>",
            "itemtype": "property",
            "name": "tableStyleCore",
            "type": "{Object}",
            "access": "private",
            "tagname": "",
            "class": "TableProperties",
            "module": "Properties"
        },
        {
            "file": "js\\classes\\CKHelper.js",
            "line": 14,
            "description": "Finds the nearest ascendant of the \"elem\" for which \"filter\" returns true",
            "itemtype": "method",
            "name": "findAscendant",
            "params": [
                {
                    "name": "elem",
                    "description": "",
                    "type": "CKEDITOR.dom.element"
                },
                {
                    "name": "filter",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "CKEDITOR.dom.element|null"
            },
            "class": "CKHelper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\CKHelper.js",
            "line": 34,
            "description": "Drops inline property named `propName` from DOM element",
            "itemtype": "method",
            "name": "dropInlineStyleAttr",
            "params": [
                {
                    "name": "element",
                    "description": "an inline attribute of  this element will be dropped.\n                                                   The element should respond to jQuery \"attr\" method.",
                    "type": "Object"
                },
                {
                    "name": "attrName",
                    "description": "attribute name to be dropped.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "CKHelper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\CKHelper.js",
            "line": 52,
            "description": "Removes link-related stuff from `link`  and then replaces it in the editor.",
            "itemtype": "method",
            "name": "unlink",
            "params": [
                {
                    "name": "ed",
                    "description": "Represents an editor instance.",
                    "type": "CKEditor.editor"
                },
                {
                    "name": "link",
                    "description": "",
                    "type": "CKEDITOR.dom.element"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "CKHelper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\CKHelper.js",
            "line": 76,
            "description": "Drops the table row. If after removing the table becomes empty, then removes it as well.",
            "itemtype": "method",
            "name": "dropRow",
            "params": [
                {
                    "name": "ed",
                    "description": "Represents an editor instance.",
                    "type": "CKEditor.editor"
                }
            ],
            "return": {
                "description": "",
                "type": "Null"
            },
            "class": "CKHelper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\CKHelper.js",
            "line": 100,
            "description": "Whether the argument is a CKEDITOR.editor instance.",
            "itemtype": "method",
            "name": "isEditor",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Any"
                }
            ],
            "class": "CKHelper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\CKHelper.js",
            "line": 109,
            "description": "Whether the argument is a CKEDITOR.dom.selection instance.",
            "itemtype": "method",
            "name": "isSelection",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Any"
                }
            ],
            "class": "CKHelper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\CKHelper.js",
            "line": 119,
            "description": "Inserts a row at a specified position with respect to the selected element.\nThe command to insert the row is obtained by capitalizing the second argument\nand appending it to the string 'insert'. Example: if pos is 'after', the command\nto be executed is 'insertAfter'.",
            "itemtype": "method",
            "name": "insertRow",
            "params": [
                {
                    "name": "ed",
                    "description": "Represents an editor instance.",
                    "type": "CKEDITOR.editor"
                },
                {
                    "name": "pos",
                    "description": "where to insert the element with respect to the current one.",
                    "type": "String"
                }
            ],
            "class": "CKHelper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\CKHelper.js",
            "line": 163,
            "description": "Inserts a column in the table. The localtion of the column to insert is given by the second\nargument that admits two values \"before\" and \"after\" and is inserted before or after the column\nof the selected cell, respectively.",
            "itemtype": "method",
            "name": "insertColumn",
            "params": [
                {
                    "name": "ed",
                    "description": "Represents an editor instance.",
                    "type": "CKEDITOR.editor"
                },
                {
                    "name": "pos",
                    "description": "\"before\" or \"after\": location of the column to insert w.r.t. the current cell",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "CKHelper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\CKHelper.js",
            "line": 240,
            "description": "Gets the node string representation: if it is of CKEDITOR.NODE_ELEMENT type, then getOuterHtml() is returned,\nif it is of CKEDITOR.NODE_TEXT type, then getText() is returned. If none of the above types, '' (empty string is returned)",
            "itemtype": "method",
            "name": "nodeString",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "CKEDITOR.dom.element"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "CKHelper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\CKHelper.js",
            "line": 257,
            "description": "Gets the string representation of the node subelement: if the argument is of CKEDITOR.NODE_ELEMENT type, then\nthe string representation of its child \"offset\" is returned. If the argument is of CKEDITOR.NODE_TEXT type,\nthen: 1. if dir is \"start\" or null, then its substring starting from position 0 to \"offset\" (excluded) is returned;\n2. if dir=\"end\"; then its substring starting from position \"offset\" is returned.",
            "itemtype": "method",
            "name": "nodeOffsetString",
            "params": [
                {
                    "name": "offset",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "node",
                    "description": "",
                    "type": "CKEDITOR.dom.element"
                },
                {
                    "name": "dir",
                    "description": "\"start\" - for the beginning of the string, \"end\" for the end. Default - \"start\"",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "CKHelper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\CKHelper.js",
            "line": 283,
            "description": "If `elem` is of CKEDITOR.NODE_ELEMENT type, pushes it into array `container` . Otherwise, it is ignored.",
            "itemtype": "method",
            "name": "insertNode",
            "params": [
                {
                    "name": "container",
                    "description": "array in which an element is to be inserted.",
                    "type": "Array"
                },
                {
                    "name": "elem",
                    "description": "if of CKEDITOR.NODE_ELEMENT type, it is to be inserted into container.",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "CKHelper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\CKHelper.js",
            "line": 296,
            "description": "Transforms each element of the array into a string and concatenates them. String representation\nof the element is supposed to be a text version (without tags).",
            "itemtype": "method",
            "name": "arrayToText",
            "params": [
                {
                    "name": "arr",
                    "description": "array of elements (of mixed types)",
                    "type": "Array"
                },
                {
                    "name": "sep",
                    "description": "a string which will separate the text representation of each element.\n                                                Default is \"\" (empty string).",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "CKHelper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\CKHelper.js",
            "line": 323,
            "description": "Check whether two different CKEDITOR.dom.node's \"overlaps\". Returns true, if:\n<ol><li>both `elem1` and `elem2` are of `CKEDITOR.dom.element` type and either `elem1` contains `elem2` or viceverse,</li>\n<li>only one of `elem1`, `elem2` is of `CKEDITOR.dom.element` and it contains other,</li>\n<li>both `elem1` and `elem2` are of `CKEDITOR.dom.text` and they are equal.</li></ol>\nOtherwise, false is returned.",
            "params": [
                {
                    "name": "elem1",
                    "description": "",
                    "type": "CKEDITOR.dom.element|CKEDITOR.dom.text"
                },
                {
                    "name": "elem2",
                    "description": "",
                    "type": "CKEDITOR.dom.element|CKEDITOR.dom.text"
                }
            ],
            "itemtype": "method",
            "name": "doesOverlap",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "CKHelper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\CKHelper.js",
            "line": 352,
            "description": "Inserts a list which items are populated from the selection. If the selection is empty,\na list item with empty content is generated.",
            "itemtype": "method",
            "name": "insertList",
            "params": [
                {
                    "name": "editor",
                    "description": "Represents an editor instance.",
                    "type": "CKEDITOR.editor"
                },
                {
                    "name": "listType",
                    "description": "Type of the list to insert (ol, ul)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "CKHelper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\CKHelper.js",
            "line": 404,
            "description": "Change the type of `list` to be `newListType` and replace the old list with newer one.",
            "itemtype": "method",
            "name": "changeListType",
            "params": [
                {
                    "name": "editor",
                    "description": "",
                    "type": "CKEDITOR"
                },
                {
                    "name": "list",
                    "description": "",
                    "type": "CKEDITOR.dom.element"
                },
                {
                    "name": "newListType",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "CKHelper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\CKHelper.js",
            "line": 427,
            "description": "Returns an array of elements that are next siblings of the given one. The first next sibling becomes the first element\nof the array, the second next sibling becomes the second one and so on.",
            "itemtype": "method",
            "name": "next-siblings",
            "params": [
                {
                    "name": "elem",
                    "description": "",
                    "type": "CKEDITOR.dom.element|CKEDITOR.dom.node"
                }
            ],
            "return": {
                "description": "array of CKEDITOR.dom.node",
                "type": "Array"
            },
            "class": "CKHelper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\CKHelper.js",
            "line": 444,
            "description": "Returns an array of elements that are siblings of the given one and that come before it. The first prevoius\nsibling becomes the first element of the array, the second previous sibling becomes the second one and so on.",
            "itemtype": "method",
            "name": "prev-siblings",
            "params": [
                {
                    "name": "elem",
                    "description": "",
                    "type": "CKEDITOR.dom.element|CKEDITOR.dom.node"
                }
            ],
            "return": {
                "description": "array of CKEDITOR.dom.node",
                "type": "Array"
            },
            "class": "CKHelper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\CKHelper.js",
            "line": 461,
            "description": "Returns an array containing `node` and elements that come after it\nthe in DOM in the context of `root`. Therefore, all array elements\nbelong to `root`. `root` itself is not included in the output except\nthe case when it is equal to `node`. If `root` does not contain `node`,\nthe output must be an empty array.\nUses {{#crossLink \"CKHelper/next-siblings:method\"}}CKHelper['next-siblings']{{/crossLink}}\nto fill in array with the next siblings.",
            "itemtype": "method",
            "name": "bunch-next-siblings",
            "params": [
                {
                    "name": "node",
                    "description": "a node that must be inside of root node",
                    "type": "CKEDITOR.dom.element|CKEDITOR.dom.node"
                },
                {
                    "name": "root",
                    "description": "the returned array elements will be inside this node.",
                    "type": "CKEDITOR.dom.element|CKEDITOR.dom.node"
                }
            ],
            "return": {
                "description": "nodes between `node` and `root` last child (inclusively)",
                "type": "Array"
            },
            "class": "CKHelper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\CKHelper.js",
            "line": 494,
            "description": "Returns an array containing `node` and elements that come before it\nthe in DOM in the context of `root`. Therefore, all array elements\nbelong to `root`. `root` itself is not included in the output except\nthe case when it is equal to `node`. If `root` does not contain `node`,\nthe output must be an empty array.\nUses {{#crossLink \"CKHelper/prev-siblings:method\"}}CKHelper['prev-siblings']{{/crossLink}}\nto fill in array with the next siblings.",
            "itemtype": "method",
            "name": "bunch-prev-siblings",
            "params": [
                {
                    "name": "node",
                    "description": "a node that must be inside of root node",
                    "type": "CKEDITOR.dom.element|CKEDITOR.dom.node"
                },
                {
                    "name": "root",
                    "description": "the returned array elements will be inside this node.",
                    "type": "CKEDITOR.dom.element|CKEDITOR.dom.node"
                }
            ],
            "return": {
                "description": "nodes between `node` and `root` first child (inclusively)",
                "type": "Array"
            },
            "class": "CKHelper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\CKHelper.js",
            "line": 527,
            "description": "Returns the first child of the `root` containing `node`.\nIf `root` does not contain `node`, `null` is returned.\nUses {{#crossLink \"CKHelper/containsOrEqual:method\"}}CKHelper::containsOrEqual(){{/crossLink}}.",
            "itemtype": "method",
            "name": "childWithNode",
            "params": [
                {
                    "name": "root",
                    "description": "haystack to be searched in",
                    "type": "CKEDITOR.dom.node"
                },
                {
                    "name": "node",
                    "description": "needle to be present in the haystack",
                    "type": "CKEDITOR.dom.node"
                }
            ],
            "return": {
                "description": "the first child of the haystack that contians needle, or `null`\n                                              if there is no nedlee in the haystack.",
                "type": "CKEDITOR.dom.node|null"
            },
            "class": "CKHelper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\CKHelper.js",
            "line": 552,
            "description": "Returns true if `elem1` contains `elem2` or if they are equal. False otherwise.",
            "itemtype": "method",
            "name": "containsOrEqual",
            "params": [
                {
                    "name": "elem1",
                    "description": "",
                    "type": "CKEDITOR.dom.node"
                },
                {
                    "name": "elem2",
                    "description": "",
                    "type": "CKEDITOR.dom.node"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "CKHelper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\Helper.js",
            "line": 11,
            "description": "Converts the first letter of the string into the upper case\nIf the string is empty, the output is empty string as well.",
            "itemtype": "method",
            "name": "firstLetterUpperCase",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Helper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\Helper.js",
            "line": 22,
            "description": "Converts the first letter of the string into the upper case\nIf the string is empty, the output is empty string as well.",
            "itemtype": "method",
            "name": "onlyFirstLetterUpperCase",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Helper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\Helper.js",
            "line": 34,
            "description": "transforms each element of the input array into a non-negative number.\nIf an element is negative, its absolute value is used.\nIf an element fails to be converted to a number, it is substituted by zero.",
            "itemtype": "method",
            "name": "sanitize",
            "example": [
                "   [1.1, 2.4, 2] -> [1.1, 2.4, 2],\n           [\"4\", -3, 3.2, \"a\"] -> [4, 3, 3.2, 0]"
            ],
            "params": [
                {
                    "name": "arr",
                    "description": "array of numbers",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "array of numbers",
                "type": "Array"
            },
            "class": "Helper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\Helper.js",
            "line": 54,
            "description": "calculates the sum the array elements. The elements are supposed to be numbers. Otherwise nothing is guaranteed.",
            "itemtype": "method",
            "name": "trace",
            "example": [
                "     [1, 2, 2] -> 1 + 2 + 2 = 5"
            ],
            "params": [
                {
                    "name": "arr",
                    "description": "array of numbers",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Helper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\Helper.js",
            "line": 72,
            "description": "normalizes the array. If all elements are equal to zero, then the elements are to be normallized uniformally.\nIf not all the elements are equal to zero, but the trace is equal to zero, then the input array is returned.",
            "itemtype": "method",
            "name": "normalize",
            "example": [
                "     [1, 3, 4]       -> [ 0.125, 0.375, 0.5 ]",
                "     [2, 0, -1, -1]  -> [ 2, 0, -1, -1 ]",
                "     [0, 0]          -> [ 0.5, 0.5]"
            ],
            "params": [
                {
                    "name": "Array",
                    "description": "of numbers",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "array of numbers",
                "type": "Array"
            },
            "class": "Helper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\Helper.js",
            "line": 106,
            "description": "Slices the first argument according to the weights given by the second argument.\nThe elements of the second array are supposed to be non-negative numbers.",
            "itemtype": "method",
            "name": "splitWeighted",
            "example": [
                "   (10, [1, 2, 2])    -> [2, 4, 4],\n           (30, [4, 2, 3, 1]) -> [12, 6, 9, 3]"
            ],
            "params": [
                {
                    "name": "overall",
                    "description": "a number to be splitted",
                    "type": "Number"
                },
                {
                    "name": "pieces",
                    "description": "array of weigths",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "array of numbers",
                "type": "Array"
            },
            "class": "Helper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\Helper.js",
            "line": 128,
            "description": "rounds each elements of the array",
            "itemtype": "method",
            "name": "roundUp",
            "example": [
                " [1, 2.2, 5.6, 0, 4.5] -> [1, 2, 6, 0, 5]"
            ],
            "params": [
                {
                    "name": "arr",
                    "description": "array of numbers",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "array of integers",
                "type": "Array"
            },
            "class": "Helper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\Helper.js",
            "line": 142,
            "description": "composition of roundUp and splitWeighted",
            "itemtype": "method",
            "name": "columnWidths",
            "params": [
                {
                    "name": "overall",
                    "description": "table width",
                    "type": "Number"
                },
                {
                    "name": "pieces",
                    "description": "array of numbers",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "array of integers",
                "type": "Array"
            },
            "class": "Helper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\Helper.js",
            "line": 154,
            "description": "Modification of {{#crossLink \"Helper/columnWidths:method\"}}columnWidths{{/crossLink}} method:\nreturns splitting of number `overall` in integers according to weights `pieces`, but the last\narray element absorbs eventual neglected fractions of the previous elements such that the sum\nof all elements is equactly equal to `overall`.",
            "itemtype": "method",
            "name": "columnWidth2",
            "params": [
                {
                    "name": "overall",
                    "description": "table width",
                    "type": "Number"
                },
                {
                    "name": "pieces",
                    "description": "array of numbers",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "array of integers",
                "type": "Array"
            },
            "class": "Helper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\Helper.js",
            "line": 178,
            "description": "Deletes the protocol name from the url.\nEverything until the first occurence of '://' will be removed (inclusively).",
            "itemtype": "method",
            "name": "dropProtocol",
            "params": [
                {
                    "name": "url",
                    "description": "",
                    "type": "String"
                }
            ],
            "example": [
                "  'http://www.test.com'      -> 'www.test.com'",
                "  'www.test.com'             -> 'www.test.com'"
            ],
            "return": {
                "description": "url without protocol name",
                "type": "String"
            },
            "class": "Helper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\Helper.js",
            "line": 194,
            "description": "Gives file extension.",
            "itemtype": "method",
            "name": "fileExt",
            "params": [
                {
                    "name": "fileName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Helper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\Helper.js",
            "line": 205,
            "description": "Gives the validated width. If the width is given in \"px\" or \"pt\", the integer part is given.\nIf the length is given in \"em\" or \"%\", it is left as it is.",
            "itemtype": "method",
            "name": "validateWidth",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Helper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\Helper.js",
            "line": 233,
            "description": "Replaces special characters present in the input string by their unicodes. It is supposed to replace symbols like à, ò, è, é\nand not a, b, c etc. For the moment it replaces any characters which unicode is outside the range [32, 125].\n\nThis function seems useless for the moment, because after execution of this method, symbol \"à\" gets changed into \"&#224;\", but\nthe editor automatically changes the newly appeared \"&\" into \"&amp;\" so that \"à\" becomes \"&amp;#224;\".",
            "itemtype": "method",
            "name": "specialChar",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Helper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\Helper.js",
            "line": 263,
            "description": "Splits array element at position \"pos\" in two parts in such a way that the trace of the original array\nis equal to the trace of the output array. If it is the first element of the array to be splitted, then\nit is splitted in 1/2 and 1/2 (up to the truncation). If the element has a left neighbour, then the neighbour\nand the element are taken off 1/3 and these two parts are given to the newly created element that is inserted\nbetween the neighbour and the element: [a, b, ...] -> [2/3 a, 1/3 (a + b), 2/3 b, ...]",
            "itemtype": "method",
            "name": "crack",
            "params": [
                {
                    "name": "arr",
                    "description": "array of integers",
                    "type": "Array"
                },
                {
                    "name": "pos",
                    "description": "index of the element, before which an element will be inserted",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "array of integers",
                "type": "Array"
            },
            "class": "Helper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\Helper.js",
            "line": 303,
            "description": "Flatten the object. This function was written because Node::attributes returns attributes in format\n{'1': {name: \"width\", value:\"100\", ...}, '2': {name: \"color\", value:\"black\", ...}, ...} -> {\"width\":\"100\", \"color\":\"black\", ...}",
            "itemtype": "method",
            "name": "flatten",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "deprecated": true,
            "deprecationMessage": "This method is incorporated in \"load\" methods of Attributes and Style classes.",
            "class": "Helper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\Helper.js",
            "line": 324,
            "description": "Sandwiches the midlle string with the left and the right ones. If the middle one is empty, empty string is returned.\nIf the right arguments is not given, the left one is used.",
            "itemtype": "method",
            "name": "sandwichWith",
            "params": [
                {
                    "name": "left",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "middle",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "right",
                    "description": "",
                    "type": "String"
                }
            ],
            "type": "String|Null",
            "return": {
                "description": "",
                "type": "String|Null"
            },
            "class": "Helper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\Helper.js",
            "line": 343,
            "description": "Glues all elements of the array, replace trailing spaces and repaces multiple spaces with a single one.",
            "itemtype": "method",
            "name": "concatDropSpaces",
            "params": [
                {
                    "name": "arr",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "glue",
                    "description": "glue string",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Helper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\Helper.js",
            "line": 357,
            "description": "Generates a string that can be used as id for the elements of the string `str`. This means that\nthe generated string must be not present among id's of the elements of the string `str`, while it might\nbe present as a content of the elements. The second argument `seed` serves as a hint to create the id:\nif the hint string is available as id, it will be returned. Otherwise, a random symbol from 0-9, a-z\nwill be appended to the hint string until it becomes a valid id.",
            "itemtype": "method",
            "name": "str",
            "params": [
                {
                    "name": "seed",
                    "description": "",
                    "type": "String|Null"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Helper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\Helper.js",
            "line": 383,
            "description": "Inserts element into array `arr` just before the last element. If the array is empty,\nthe element is inserted into array (so that the element becomes the first and the last\nelement of the array).",
            "itemtype": "method",
            "name": "pushBeforeLast",
            "params": [
                {
                    "name": "arr",
                    "description": "array into which an element is to be inserted",
                    "type": "Array"
                },
                {
                    "name": "elem",
                    "description": "the element to be inserted",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Helper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\Helper.js",
            "line": 404,
            "description": "Returns true if the string is a semantically valid html string.",
            "itemtype": "method",
            "name": "isSemanticallyValid",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Helper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\Helper.js",
            "line": 418,
            "description": "Picks up styles of `sel` from css string `str`. Value corresponding to each occurence\nof `sel` is passed to {{#crossLink \"Styles\"}}Styles{{/crossLink}} constructor and transformed\ninto a string representation. After all, these strings are concatenated using semicolon as separator.",
            "itemtype": "method",
            "name": "cssOfSelector",
            "params": [
                {
                    "name": "sel",
                    "description": "name of selector",
                    "type": "String"
                },
                {
                    "name": "str",
                    "description": "css string (i.e: \"div {width: 100px; color: red} img {float: left;}\")",
                    "type": "String"
                }
            ],
            "return": {
                "description": "all styles of the selector",
                "type": "String"
            },
            "class": "Helper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\Helper.js",
            "line": 446,
            "description": "Implementation of Euclid's algorithm for greatest common divisor of numbers `m` and `n`.\n<ul><li>\nIf among input numbers there is a float number, then 1 is returned.\n</li><li>\nIf among input numbers there is one zero and one non-zero integer, then that integer is returned.\n</li><li>\nIf among input numbers there is one zero and one non-zero float, then 1 is returned.\n</li><li>\nIf both input numbers are zero, then 1 is returned.\n</li></ul>",
            "itemtype": "method",
            "name": "gcd",
            "params": [
                {
                    "name": "m",
                    "description": "",
                    "type": "Integer"
                },
                {
                    "name": "n",
                    "description": "",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "",
                "type": "Integer"
            },
            "since": "0.0.6",
            "class": "Helper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\Helper.js",
            "line": 488,
            "description": "Checks whether the argument is an integer number.",
            "itemtype": "method",
            "name": "isInteger",
            "params": [
                {
                    "name": "m",
                    "description": "",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "`true` if the argument is a decimal integer, `false` otherwise.",
                "type": "Boolean"
            },
            "class": "Helper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\Helper.js",
            "line": 498,
            "description": "Returns gcd of all input array element.\n<ul><li>\nIf `numbers` is an empty array, nothing is returned.\n</li><li>\nIf `numbers` contains just one element, then either that element (if it is non-zero integer) or 1\n(in all other cases) is returned.\n</li><li>\nIf `numbers` contains exactly two elements, then output of\n{{#crossLink \"Helper/gcd:method\"}}gcd{{/crossLink}} is returned.\n</li><li>\nIf `numbers` contains more than two elements, then the last two elements are replaced by their\n{{#crossLink \"Helper/gcd:method\"}}gcd{{/crossLink}} and a new recursive call of\n{{#crossLink \"Helper/gcdList:method\"}}gcdList{{/crossLink}} with shorter input array is performed.\n</li></ul>",
            "itemtype": "method",
            "name": "gcdList",
            "params": [
                {
                    "name": "numbers",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Integer"
            },
            "since": "0.0.6",
            "class": "Helper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\Helper.js",
            "line": 541,
            "description": "Cancelling common factors of each array element.\n\nDivides each element of the input array by its gcd.",
            "itemtype": "method",
            "name": "divideByGcd",
            "params": [
                {
                    "name": "numbers",
                    "description": "array of numbers",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "array of numbers",
                "type": "Array"
            },
            "class": "Helper",
            "module": "Helper"
        },
        {
            "file": "js\\classes\\Properties.js",
            "line": 21,
            "description": "Object that contains all the properties. Its keys and values must be either strings or numbers.\nUse {{#crossLink \"Properties/getProperty:method\"}}getProperty(){{/crossLink}} and\n{{#crossLink \"Properties/setProperty:method\"}}setProperty(){{/crossLink}} methods to\naccess the content of this object.",
            "itemtype": "property",
            "name": "core",
            "type": "{Object}",
            "access": "private",
            "tagname": "",
            "class": "Properties",
            "module": "Properties"
        },
        {
            "file": "js\\classes\\Properties.js",
            "line": 32,
            "description": "Array of allowed types for core keys. Set to 'string', 'number'.",
            "itemtype": "property",
            "name": "_allowedCoreKeyTypes",
            "type": "{Array}",
            "access": "private",
            "tagname": "since           0.0.5",
            "class": "Properties",
            "module": "Properties"
        },
        {
            "file": "js\\classes\\Properties.js",
            "line": 41,
            "description": "Array of allowed types for core values. For the moment, it is allowed to have string-valued, number-valued\nand object-valued values of the keys.",
            "itemtype": "property",
            "name": "_allowedCoreValueTypes",
            "type": "{Array}",
            "access": "private",
            "tagname": "since           0.0.5",
            "class": "Properties",
            "module": "Properties"
        },
        {
            "file": "js\\classes\\Properties.js",
            "line": 52,
            "description": "The  name of the class.",
            "itemtype": "property",
            "name": "className",
            "type": "{String}",
            "access": "private",
            "tagname": "",
            "class": "Properties",
            "module": "Properties"
        },
        {
            "file": "js\\classes\\Properties.js",
            "line": 60,
            "description": "Mode to be used when representing this instance as a string by means of\n{{#crossLink \"Properties/toString:method\"}}toString{{/crossLink}} method.\nIf it is set to 0, then string representation has the following form\n`width=\"20\" title=\"read me!\"`\nIf it is set to 1, then string representation has the following form\n`width: 50px; color: red`.",
            "itemtype": "property",
            "name": "_mode",
            "type": "{Integer}",
            "access": "private",
            "tagname": "",
            "default": "0",
            "class": "Properties",
            "module": "Properties"
        },
        {
            "file": "js\\classes\\Properties.js",
            "line": 74,
            "description": "{{#crossLink \"Properties/_mode:property\"}}_mode{{/crossLink}} setter. If argument\nis different from 0 and 1, it is ignored.",
            "itemtype": "method",
            "name": "setMode",
            "params": [
                {
                    "name": "m",
                    "description": "",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Properties",
            "module": "Properties"
        },
        {
            "file": "js\\classes\\Properties.js",
            "line": 90,
            "description": "{{#crossLink \"Property/_mode:property\"}}_mode{{/crossLink}} getter.",
            "itemtype": "method",
            "name": "getMode",
            "return": {
                "description": "",
                "type": "Integer"
            },
            "since": "0.0.5",
            "class": "Properties",
            "module": "Properties"
        },
        {
            "file": "js\\classes\\Properties.js",
            "line": 100,
            "description": "{{#crossLink \"Properties/className:property\"}}className{{/crossLink}} getter.",
            "itemtype": "method",
            "name": "getName",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Properties",
            "module": "Properties"
        },
        {
            "file": "js\\classes\\Properties.js",
            "line": 109,
            "description": "{{#crossLink \"Properties/className:property\"}}Class name{{/crossLink}} setter.",
            "itemtype": "method",
            "name": "setName",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Properties",
            "module": "Properties"
        },
        {
            "file": "js\\classes\\Properties.js",
            "line": 122,
            "description": "Sets value of `style` key. Converts argument into {{#crossLink \"Properties\"}}Properties{{/crossLink}} instance\nand then performs assignment.",
            "itemtype": "method",
            "name": "setStyles",
            "params": [
                {
                    "name": "stl",
                    "description": "",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "since": "0.0.5",
            "class": "Properties",
            "module": "Properties"
        },
        {
            "file": "js\\classes\\Properties.js",
            "line": 135,
            "description": "If both `key` and `value` are of allowed types (given by\n{{#crossLink \"Properties/_allowedCoreKeyTypes:property\"}}_allowedCoreKeyTypes{{/crossLink}} and\n{{#crossLink \"Properties/_allowedCoreValueTypes:property\"}}_allowedCoreValueTypes{{/crossLink}}), then property `key` of\n{{#crossLink \"Properties/core:property\"}}core{{/crossLink}} is set to `value`\nand `true` is returned. Otherwise, `false` is returned. If `key` is a string `style`, then method\n{{#crossLink \"Properties/setStyles:method\"}}setStyles(){{/crossLink}} is envoked.",
            "itemtype": "method",
            "name": "setProperty",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "Any"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "true in case of success, false otherwise.",
                "type": "Boolean"
            },
            "class": "Properties",
            "module": "Properties"
        },
        {
            "file": "js\\classes\\Properties.js",
            "line": 161,
            "description": "allowed key types getter",
            "itemtype": "method",
            "name": "getAllowedKeyTypes",
            "since": "0.0.5",
            "return": {
                "description": "array of strings",
                "type": "Array"
            },
            "class": "Properties",
            "module": "Properties"
        },
        {
            "file": "js\\classes\\Properties.js",
            "line": 171,
            "description": "allowed value types getter",
            "itemtype": "method",
            "name": "getAllowedValueTypes",
            "since": "0.0.5",
            "return": {
                "description": "array of strings",
                "type": "Array"
            },
            "class": "Properties",
            "module": "Properties"
        },
        {
            "file": "js\\classes\\Properties.js",
            "line": 183,
            "description": "Retrieves the value of the requested property from\n{{#crossLink \"Properties/core:property\"}}core{{/crossLink}}.\nIf property `key` does not exist, but its pattern is `base-position`, where `position` is one of\n`left`, `right`, `top` or `bottom` and `base` key exists, then is it returned a value based on the\nformat of the `base` property:\n<dl><dt>\"X\"</dt><dd>`base-top`, `base-right`, `base-bottom`, `base-left` are equal to `X`</dd>\n<dt>\"X Y\"</dt><dd>`base-top` = X, `base-right` = Y, `base-bottom` = X, `base-left` = `Y`</dd>\n<dt>\"X Y Z\"</dt><dd>`base-top` = X, `base-right` = Y, `base-bottom` = Z, `base-left` = `X`</dd>\n<dt>\"X Y Z W\"</dt><dd>`base-top` = X, `base-right` = Y, `base-bottom` = X, `base-left` = `W`</dd>\n</dl>",
            "itemtype": "method",
            "name": "getProperty",
            "return": {
                "description": "",
                "type": "Any"
            },
            "class": "Properties",
            "module": "Properties"
        },
        {
            "file": "js\\classes\\Properties.js",
            "line": 204,
            "description": "If the key is present in {{#crossLink \"Properties/core:property\"}}core{{/crossLink}}, drops it and\nreturns the key value.",
            "itemtype": "method",
            "name": "dropProperty",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "",
                "type": "Any"
            },
            "class": "Properties",
            "module": "Properties"
        },
        {
            "file": "js\\classes\\Properties.js",
            "line": 219,
            "description": "Replaces {{#crossLink \"Properties/core:property\"}}core{{/crossLink}} with empty object {}.",
            "itemtype": "method",
            "name": "dropAllProperties",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Properties",
            "module": "Properties"
        },
        {
            "file": "js\\classes\\Properties.js",
            "line": 228,
            "description": "If `key` is present in `style` object of {{#crossLink \"Properties/styles:property\"}}core{{/crossLink}}, drops it and\nreturns the key value.",
            "itemtype": "method",
            "name": "dropStyleProperty",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Any"
            },
            "since": "0.0.5",
            "class": "Properties",
            "module": "Properties"
        },
        {
            "file": "js\\classes\\Properties.js",
            "line": 246,
            "description": "Fills in the core with key-value pairs from the argument if any. If the argument\nis a string, splits it according to the pattern \"key: value;\". If the argument is\nan object, then it gets its key-value pairs. Obtained blocks are then sent one\nby one to {{#crossLink \"Properties/setProperty:method\"}}setProperty(){{/crossLink}}\nmethod.",
            "itemtype": "method",
            "name": "appendPropertyAsStringOrObj",
            "params": [
                {
                    "name": "input",
                    "description": "",
                    "type": "Any"
                }
            ],
            "access": "private",
            "tagname": "",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Properties",
            "module": "Properties"
        },
        {
            "file": "js\\classes\\Properties.js",
            "line": 291,
            "description": "Adds properties into {{#crossLink \"Properties/core:property\"}}core{{/crossLink}}. It passes its argument to a\nprivate method\n{{#crossLink \"Properties/appendPropertyAsStringOrObj:method\"}}appendPropertyAsStringOrObj(){{/crossLink}}.",
            "itemtype": "method",
            "name": "appendProperty",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Properties",
            "module": "Properties"
        },
        {
            "file": "js\\classes\\Properties.js",
            "line": 303,
            "description": "Appends properties to `style` key. If the key does not exist, creates it.",
            "itemtype": "method",
            "name": "appendStyle",
            "params": [
                {
                    "name": "prop",
                    "description": "",
                    "type": "Properties"
                }
            ],
            "since": "0.0.5",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Properties",
            "module": "Properties"
        },
        {
            "file": "js\\classes\\Properties.js",
            "line": 315,
            "description": "Initializes `style` key: if it does not exist, set it to\na new instance of {{#crossLink \"Properties\"}}Properties{{/crossLink}} with\n{{#crossLink \"Properties/_mode:property\"}}_mode{{/crossLink}} set to 1.",
            "itemtype": "method",
            "name": "initializeStyle",
            "since": "0.0.5",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Properties",
            "module": "Properties"
        },
        {
            "file": "js\\classes\\Properties.js",
            "line": 333,
            "description": "Switches property `propName` between `val` and `altVal` in the following way:\n<ol><li>\nif the instance has property `propName` equal to `val`, then the method imposes\nits value to be `altVal` (if `altVal` is not defined, then the key `propName` gets dropped).\n</li><li>\nif the instance contains property `propName` equal to `altVal`, then the method sets\nits value to be `val`.\n</li><li>\nif the instance does not have property `propName`, then the method imposes it to be `val`.\n</li></ol>",
            "itemtype": "method",
            "name": "toggleProperty",
            "params": [
                {
                    "name": "propName",
                    "description": "property key to toggle (i.e., \"width\", \"position\")",
                    "type": "String"
                },
                {
                    "name": "val",
                    "description": "value of property key (i.e., \"25em\", \"fixed\")",
                    "type": "String"
                },
                {
                    "name": "altVal",
                    "description": "alternative value of property key (i.e. null, \"0em\").\n                                               This parameter is optional.",
                    "type": "String|null"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Properties",
            "module": "Properties"
        },
        {
            "file": "js\\classes\\Properties.js",
            "line": 364,
            "description": "Returns `true` if the instance has property `key` set and the value of this property is not\nin `ignoreValues` array. Otherwise, `false` is returned.",
            "itemtype": "method",
            "name": "hasSet",
            "params": [
                {
                    "name": "key",
                    "description": "property name which value is to be checked",
                    "type": "String"
                },
                {
                    "name": "ignoreValues",
                    "description": "Optional. Array of \"ignore-values\": if key value belongs to\n                                                         this array, then the key is considered as not set.\n                                                         If this parameter is not an array, then it is ignored.",
                    "type": "Array|Null"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Properties",
            "module": "Properties"
        },
        {
            "file": "js\\classes\\Properties.js",
            "line": 385,
            "description": "Appends properties of `p` to the current Properties instance",
            "itemtype": "method",
            "name": "_suggestProperty",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "p",
                    "description": "",
                    "type": "Properties"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "since": "0.0.7",
            "class": "Properties",
            "module": "Properties"
        },
        {
            "file": "js\\classes\\Properties.js",
            "line": 414,
            "description": "Splits the argument in key-value pieces as it is performed in\n{{#crossLink \"Properties/appendPropertyAsStringOrObj:method\"}}appendPropertyAsStringOrObj(){{/crossLink}}.\nIf the `key` is not present in the {{#crossLink \"Properties/core:property\"}}core{{/crossLink}}, it is initialized\nwith `value`. Otherwise, it is ignored.",
            "itemtype": "method",
            "name": "suggestProperty",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "String|Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Properties",
            "module": "Properties"
        },
        {
            "file": "js\\classes\\Properties.js",
            "line": 454,
            "description": "Returns `true` if requested property is the {{#crossLink \"Properties/core:property\"}}core{{/crossLink}} key,\n`false` otherwise.",
            "itemtype": "method",
            "name": "hasProperty",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Properties",
            "module": "Properties"
        },
        {
            "file": "js\\classes\\Properties.js",
            "line": 465,
            "description": "Gets the number of records in {{#crossLink \"Properties/core:property\"}}core{{/crossLink}}.",
            "itemtype": "method",
            "name": "propNum",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Properties",
            "module": "Properties"
        },
        {
            "file": "js\\classes\\Properties.js",
            "line": 474,
            "description": "Returns a copy of the {{#crossLink \"Properties/core:property\"}}core{{/crossLink}}.",
            "itemtype": "method",
            "name": "getCore",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Properties",
            "module": "Properties"
        },
        {
            "file": "js\\classes\\Properties.js",
            "line": 490,
            "description": "Compares {{#crossLink \"Properties/core:property\"}}core{{/crossLink}} of the target and the argument.\nReturns `true` if they are equal, `false` otherwise.",
            "itemtype": "method",
            "name": "isTheSameAs",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Properties",
            "module": "Properties"
        },
        {
            "file": "js\\classes\\Properties.js",
            "line": 514,
            "description": "Clones the target. Parses all attributes of the target. If the attribute responds to \"clone\"\nmethod, then assign the result of this method to the corresponding clone attribute. Otherwise,\nassign the attribute value to the clone attribute (potentially problematic for what is passed\nby reference and not by value, like arrays).\n{{#crossLink \"Properties/core:property\"}}Core{{/crossLink}} is a private variable, so in the\nclone it is populated by means of {{#crossLink \"Properties/getProperty:method\"}}getProperty(){{/crossLink}}\nand {{#crossLink \"Properties/setProperty:method\"}}setProperty(){{/crossLink}} method.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Properties",
            "module": "Properties"
        },
        {
            "file": "js\\classes\\Properties.js",
            "line": 548,
            "description": "Returns `true` if {{#crossLink \"Properties/core:property\"}}core{{/crossLink}} has no keys,\notherwise - `false`.",
            "itemtype": "method",
            "name": "isEmpty",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Properties",
            "module": "Properties"
        },
        {
            "file": "js\\classes\\Properties.js",
            "line": 559,
            "description": "String representation of the instance. If {{#crossLink \"Properties/_mode:property\"}}_mode{{/crossLink}} is set to 0,\nthe representation of the following type is produced:\n<div style=\"font-family: Courier; font-weight: bold;padding: 1em;\">width=\"20\" title=\"read me!\"</div>\nIf {{#crossLink \"Properties/_mode:property\"}}_mode{{/crossLink}} is set to 1, the representation of the following\ntype is produced:\n<div style=\"font-family: Courier; font-weight: bold;padding: 1em;\">width: 50px; color: red</div>\nIt parses all {{#crossLink \"Properties/core:property\"}}core{{/crossLink}} keys and if\n<ol><li>\ncorresponding value responds to a `toString()` method\n</li><li>\ncorresponding value is a number and {{#crossLink \"Properties/_mode:property\"}}_mode{{/crossLink}} is 1,\nthen 'px' is appended (**resolve this explicit dependency on unit of measurement!**)\n</li><li>\ncorresponding value is a string\n</li>\n</ol>\nthen uses it for further substitution. Otherwise, the value is ignored.\n\nFurther, if the corresponding string representation of the value turns out to be empty or undefined,\nthe whole key-value pair is ignored.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "",
                "type": "String"
            },
            "since": "0.0.5",
            "class": "Properties",
            "module": "Properties"
        },
        {
            "file": "js\\classes\\Properties.js",
            "line": 622,
            "description": "Loads attributes from the argument into {{#crossLink \"Properties/core:property\"}}core{{/crossLink}}.\nReturns `true` if loading succeeds and `false` otherwise.\n\nTo do: for the moment, thw method always returns `true`.\n\nThe argument is supposed to be of a type\n[NamedNodeMap](http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-1780488922).\nNevertheless, it is sufficient that `attr` be a collection of objects with `name` and `value` properties.",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "attrs",
                    "description": "instance of NamedNodeMap",
                    "type": "NamedNodeMap"
                }
            ],
            "return": {
                "description": "true, if the properties are loaded, false otherwise",
                "type": "Boolean"
            },
            "class": "Properties",
            "module": "Properties"
        },
        {
            "file": "js\\classes\\Properties.js",
            "line": 655,
            "description": "Returns `true` if the instance has key `style`, `false` otherwise. Alias for\n{{#crossLink \"Properties/hasProperty:method\"}}hasProperty('style'){{/crossLink}} method.",
            "itemtype": "method",
            "name": "hasStyles",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Properties",
            "module": "Properties"
        },
        {
            "file": "js\\classes\\Properties.js",
            "line": 665,
            "description": "Returns value of `style` key. Alias for {{#crossLink \"Properties/getProperty:method\"}}getProperty('styles'){{/crossLink}}.",
            "itemtype": "method",
            "name": "getStyles",
            "return": {
                "description": "",
                "type": "Properties"
            },
            "since": "0.0.5",
            "class": "Properties",
            "module": "Properties"
        },
        {
            "file": "js\\classes\\Properties.js",
            "line": 676,
            "description": "Returns `true` if instance contains `style` key inside which there is a key `propName`.\nOtherwise, `false` is returned.",
            "itemtype": "method",
            "name": "hasStyleProperty",
            "params": [
                {
                    "name": "propName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "since": "0.0.5",
            "class": "Properties",
            "module": "Properties"
        },
        {
            "file": "js\\classes\\Properties.js",
            "line": 689,
            "description": "Sets the `key` to be equal to `value` inside object {{#crossLink \"Properties\"}}Properties{{/crossLink}}\ninstance corresponding to `style` key of the current objects which is, naturally,\n{{#crossLink \"Properties\"}}Properties{{/crossLink}} instance as well.",
            "itemtype": "method",
            "name": "setStyleProperty",
            "since": "0.0.5",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "Any"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Any"
                }
            ],
            "class": "Properties",
            "module": "Properties"
        },
        {
            "file": "js\\classes\\Properties.js",
            "line": 706,
            "description": "Returns the value of key `propName` inside `style` key (if it exists) of the current object.\nIf it does not exist, nothing is returned.",
            "itemtype": "method",
            "name": "getStyleProperty",
            "since": "0.0.5",
            "params": [
                {
                    "name": "propName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Any"
            },
            "class": "Properties",
            "module": "Properties"
        },
        {
            "file": "js\\classes\\Properties.js",
            "line": 722,
            "description": "Returns object {width: ..., color: ..., style: ...} describing border. If the Style has no Properties\n'border-style', then 'none' will be used. If the Style has no 'border-width', then zero will be used.\nIf the Style has no Properties 'border-color', then it will not be set.",
            "itemtype": "method",
            "name": "getBorderInfo",
            "return": {
                "description": "object of the form {'width': ..., 'color': ..., 'style': ...}",
                "type": "Object"
            },
            "since": "0.0.5",
            "class": "Properties",
            "module": "Properties"
        },
        {
            "file": "js\\classes\\Properties.js",
            "line": 741,
            "description": "Applies the attributes on the argument. The argument is supposed to be an instance of\n[DOM.Element](https://developer.mozilla.org/en-US/docs/Web/API/element). In fact,\nit is used only [setAttribute()](https://developer.mozilla.org/en-US/docs/Web/API/Element.setAttribute)\nmethod of that instance. It",
            "itemtype": "method",
            "name": "decorateElement",
            "params": [
                {
                    "name": "elem",
                    "description": "",
                    "type": "DOM.Element"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Properties",
            "module": "Properties"
        },
        {
            "file": "js\\classes\\Properties.js",
            "line": 760,
            "description": "Sets key `width` inside {{#crossLink \"Poroperties/_core:property\"}}_core{{/crossLink}}\nas well as key `width` inside `style` of {{#crossLink \"Poroperties/_core:property\"}}_core{{/crossLink}}.",
            "itemtype": "method",
            "name": "setWidth",
            "params": [
                {
                    "name": "w",
                    "description": "",
                    "type": "Number|String"
                }
            ],
            "since": "0.0.5",
            "class": "Properties",
            "module": "Properties"
        },
        {
            "file": "js\\classes\\Properties.js",
            "line": 776,
            "description": "Returns value of key `width` of the instance: first looks up key `width` inside\nstyles and if it is not present there, looks it up among attributes.",
            "itemtype": "method",
            "name": "getWidth",
            "return": {
                "description": "w",
                "type": "Number|String"
            },
            "since": "0.0.5",
            "class": "Properties",
            "module": "Properties"
        },
        {
            "file": "js\\classes\\Properties.js",
            "line": 793,
            "description": "Loads properties from the node attributes into the current instance. Each property value is\nattempted to be converted into a number and if this operation succeeds, that number is inserted\nas key value.\n\nIn fact, it uses {{#crossLink \"Properties/load:method\"}}load{{/crossLink}} method which is\ncalled with node `n` attributes in case they are present.",
            "itemtype": "method",
            "name": "loadNodeProperties",
            "params": [
                {
                    "name": "n",
                    "description": "",
                    "type": "DOM.Node"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Properties",
            "module": "Properties"
        },
        {
            "file": "js\\classes\\Properties.js",
            "line": 811,
            "description": "Set border-related attributes.\n\nIt sets key `border` of {{#crossLink \"Properties/core:property\"}}core{{/crossLink}}\nas well as keys `border-width`, `border-color` and `border-style` of `style` key of\n{{#crossLink \"Properties/core:property\"}}core{{/crossLink}}.\n\nArgument `borderInfo` is supposed to have the following keys:\n<ul><li>\n`width` - to set width of the border. If not provided, default value 1 is used.\n</li><li>\n`color` - to set border color. If not set, default value '#000001' is used.\n</li><li>\n`style` - to set border style (solid, dashed etc). If not set, default value 'solid' is used.\n</li></ul>",
            "itemtype": "method",
            "name": "setBorder",
            "params": [
                {
                    "name": "borderInfo",
                    "description": "json object containing 'width', 'color' and 'style' of the border.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "since": "0.0.6",
            "class": "Properties",
            "module": "Properties"
        },
        {
            "file": "js\\classes\\Properties.js",
            "line": 849,
            "description": "Returns object containing information about border.\n\nFormat of the returned object:\n<code> {style: ... [, width: ...[, color: ...]]}</code>\nIf `style` key is set to `none`, then `width` and `color` might be not set. If `width` is not\nset or equal to zero, then `color` might be not set.",
            "itemtype": "method",
            "name": "getBorder",
            "return": {
                "description": "",
                "type": "Object"
            },
            "since": "0.0.6",
            "class": "Properties",
            "module": "Properties"
        },
        {
            "file": "js\\classes\\Properties.js",
            "line": 876,
            "description": "Drops border-related attributes.\n\nRemoves attributes `border-width`, `border-color` and sets `border-style` to `none` in `style` key of\n{{#crossLink \"Properties/core:property\"}}core{{/crossLink}}.\n\nRemoves as well `border` attribute from {{#crossLink \"Properties/core:property\"}}core{{/crossLink}}.",
            "itemtype": "method",
            "name": "removeBorder",
            "since": "0.0.6",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Properties",
            "module": "Properties"
        },
        {
            "file": "js\\classes\\Properties.js",
            "line": 901,
            "description": "Shrinks width attribute by `d`.\n\nIf width attribute exists and\n<ul><li>\n`d` is a number, then absolute value of width attribute gets descreased by `d`.\n</li><li>\n`d` is a string, then width key gets descreased by `d` both values have the same measure. Otherwise,\nan error is thrown.\n</li></ul>",
            "itemtype": "method",
            "name": "shrinkBy",
            "params": [
                {
                    "name": "d",
                    "description": "",
                    "type": "String|Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "uses": [
                "{Unit}             Unit class to perform calculations on values with unit of measurement."
            ],
            "class": "Properties",
            "module": "Properties"
        },
        {
            "file": "js\\controllers\\CDownload.js",
            "line": 19,
            "description": "Path to a script that saves content. Path is relative with repsect to the `index.php` of the application.",
            "itemtype": "property",
            "name": "_saveScriptPath",
            "type": "{String}",
            "access": "private",
            "tagname": "",
            "since": "0.0.7",
            "class": "CDownload",
            "module": "Controllers"
        },
        {
            "file": "js\\controllers\\CDownload.js",
            "line": 28,
            "description": "Path to a script that downloads file. Path is relative with repsect to the `index.php` of the application.",
            "itemtype": "property",
            "name": "_downloadScriptPath",
            "type": "{String}",
            "access": "private",
            "tagname": "",
            "since": "0.0.7",
            "class": "CDownload",
            "module": "Controllers"
        },
        {
            "file": "js\\controllers\\CDownload.js",
            "line": 37,
            "description": "Name of the parameter with which the content is transferred by help of ajax request\nto a script that saves the content and hence the script can access recieved content\nby using this key name in  $_POST hash.",
            "itemtype": "property",
            "name": "_keyName",
            "type": "{String}",
            "access": "private",
            "tagname": "",
            "since": "0.0.7",
            "class": "CDownload",
            "module": "Controllers"
        },
        {
            "file": "js\\controllers\\CDownload.js",
            "line": 48,
            "description": "Prepares the content of the editor for downloading in html format and launches the window\nfor downloading.\n\nIt sends ajax post request to the script `php/saveDraft.php` using JQuery library.",
            "itemtype": "method",
            "name": "downloadAsHtml",
            "params": [
                {
                    "name": "context",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "editor",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "CDownload",
            "module": "Controllers"
        },
        {
            "file": "js\\controllers\\CDownload.js",
            "line": 79,
            "description": "Downloads content of the editor window as it is.",
            "itemtype": "method",
            "name": "downloadRaw",
            "params": [
                {
                    "name": "dialog",
                    "description": "See [dialog definition](http://docs.ckeditor.com/#!/api/CKEDITOR.dialog).",
                    "type": "CKEDITOR.dialog"
                },
                {
                    "name": "editor",
                    "description": "[editor](http://docs.ckeditor.com/#!/api/CKEDITOR.editor) instance",
                    "type": "CKEDITOR.editor"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "since": "0.0.7",
            "class": "CDownload",
            "module": "Controllers"
        },
        {
            "file": "js\\controllers\\CDownload.js",
            "line": 97,
            "description": "Appends time stamp string to the argument.",
            "itemtype": "method",
            "name": "appendTimeStamp",
            "params": [
                {
                    "name": "seed",
                    "description": "the time stamp is to be appended to this string",
                    "type": "String|Null"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "CDownload",
            "module": "Controllers"
        },
        {
            "file": "js\\controllers\\CDownload.js",
            "line": 118,
            "description": "Launches a window for downloading file with content `data` and suggested name `filename`.\nIf `filename` is not given or is not valid, the file name will be generated.\n\nFor the moment, the method use jQuery library. It is desirable to rewrite\nthe method such that native javascript methods are used.\n(The commented code at the end contains some hints.)",
            "itemtype": "method",
            "name": "downloadFile",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "filename",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "CDownload",
            "module": "Controllers"
        },
        {
            "file": "js\\controllers\\CImage.js",
            "line": 14,
            "description": "Inserts image into `editor`.\n\nIt uses information inserted in the dialog menu.",
            "itemtype": "method",
            "name": "insert",
            "params": [
                {
                    "name": "context",
                    "description": "context by means the variables are passed from view to the controller",
                    "type": "Object"
                },
                {
                    "name": "editor",
                    "description": "instance of CKEDITOR",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "CImage",
            "module": "Controllers"
        },
        {
            "file": "js\\controllers\\CImage.js",
            "line": 40,
            "description": "Loads information about image into dialog menu if the selection contains image.",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "context",
                    "description": "context by means the variables are passed from view to the controller",
                    "type": "Object"
                },
                {
                    "name": "editor",
                    "description": "instance of CKEDITOR",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "CImage",
            "module": "Controllers"
        },
        {
            "file": "js\\controllers\\CImage.js",
            "line": 60,
            "description": "Validator for url in the dialog menu.\n\n<span style=\"color: red\">To do</span>: for the moment, the method has side effect: it shows some info in case the validation fails.",
            "itemtype": "method",
            "name": "validateUrl",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "editor",
                    "description": "instance of CKEDITOR",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "CImage",
            "module": "Controllers"
        },
        {
            "file": "js\\controllers\\CLink.js",
            "line": 19,
            "description": "Reads the content of the link insertion dialog, generates links and inserts them into the editor.",
            "itemtype": "method",
            "name": "convertToLinks",
            "params": [
                {
                    "name": "context",
                    "description": "context of the dialog menu",
                    "type": "Object"
                },
                {
                    "name": "editor",
                    "description": "editor instance",
                    "type": "Object"
                },
                {
                    "name": "scheme",
                    "description": "stands for `mail` or `link`",
                    "type": "String"
                }
            ],
            "return": {
                "description": "inserts link into the editor",
                "type": "Void"
            },
            "class": "CLink",
            "module": "Controllers"
        },
        {
            "file": "js\\controllers\\CLink.js",
            "line": 87,
            "description": "Populates the field of the link insertion dialog.",
            "itemtype": "method",
            "name": "fillInDialog",
            "params": [
                {
                    "name": "context",
                    "description": "context of the dialog menu",
                    "type": "Object"
                },
                {
                    "name": "selection",
                    "description": "instance of Selection class",
                    "type": "Selection"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "CLink",
            "module": "Controllers"
        },
        {
            "file": "js\\controllers\\CLink.js",
            "line": 130,
            "description": "Converts information collected from the link dialog menu into format defined by\n{{#crossLink \"Link/template:method\"}}Link::template{{/crossLink}} method.\n\nOverrides {{#crossLink \"Controller\"}}base class{{/crossLink}} definition of\n{{#crossLink \"Controller/dialogToTemplate:method\"}}dialogToTemplate{{/crossLink}}.\nThe returning object include the following keys:\nReturns an object with the following keys:<dl>\n<dt>href</dt><dd> (String) value of the link \"href\" attribute</dd>\n<dt>scheme</dt><dd> (String) scheme (mail or link)</dd>\n<dt>color</dt><dd>(String) link color</dd>\n<dt>isUnderlined</dt><dd>(Boolean) whether the link is underlined</dd>\n<dt>isCompound</dt><dd>(Boolean) whether the link content contains more that one element</dd>\n<dt>target</dt><dd> (String) in what window the link is supposed to be open</dd>\n<dt>text</dt><dd> (String) string representation of the link content</dd>\n<dt>title</dt><dd> (String) title attribute</dd>\n</dl>",
            "itemtype": "method",
            "name": "dialogToTemplate",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "CLink",
            "module": "Controllers"
        },
        {
            "file": "js\\controllers\\CLink.js",
            "line": 165,
            "description": "Converts output of link {{#crossLink \"Link/template:method\"}}template{{/crossLink}} method\ninto an object accepted by link dialog menu, that is into a format described by\n{{#crossLink \"Controller/getDialogData:method\"}}getDialogData{{/crossLink}}.",
            "itemtype": "method",
            "name": "templateToDialog",
            "params": [
                {
                    "name": "template",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "since": "0.0.7",
            "class": "CLink",
            "module": "Controllers"
        },
        {
            "file": "js\\controllers\\CLink.js",
            "line": 190,
            "description": "Returns instance of {{#crossLink \"Link\"}}Link{{/crossLink}} corresponding to a DOM.Element\ninside which the cursor is situated. If no link is found, nothing is returned.",
            "itemtype": "method",
            "name": "getLink",
            "params": [
                {
                    "name": "editor",
                    "description": "editor instance",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Link"
            },
            "class": "CLink",
            "module": "Controllers"
        },
        {
            "file": "js\\controllers\\CLink.js",
            "line": 208,
            "description": "Returns the nearest (for current cursor position) parent link. If no link is found among ancestors, `null`\nis returned.\n\nSought element has tag `a`.",
            "itemtype": "method",
            "name": "findParentLink",
            "params": [
                {
                    "name": "editor",
                    "description": "",
                    "type": "CKEDITOR"
                }
            ],
            "return": {
                "description": "",
                "type": "DOM.Node"
            },
            "class": "CLink",
            "module": "Controllers"
        },
        {
            "file": "js\\controllers\\CLink.js",
            "line": 227,
            "description": "Collects parameters from link dialog menu.\n\nThe returning object include the following keys:\n<dl>\n<dt>href</dt><dd>(string) url or email (depending on a scheme)</dd>\n<dt>text</dt><dd>(string) hyperlink text</dd>\n<dt>status</dt><dd>(boolean) whether text field is enabled</dd>\n<dt>title</dt><dd>(string, optional) popup text</dd>\n<dt>underlined</dt><dd>(boolean) whether the link is underlined or not</dd>\n<dt>target</dt><dd>(boolean) whether the link should be open in a new window</dd>\n<dt>color</dt><dd>(string) color of the hyperlink text</dd>\n</dl>",
            "itemtype": "method",
            "name": "getDialogData",
            "params": [
                {
                    "name": "dialog",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "CLink",
            "module": "Controllers"
        },
        {
            "file": "js\\controllers\\CLink.js",
            "line": 251,
            "description": "Fills in `dialog` window based on current selection.",
            "itemtype": "method",
            "name": "fillInDialogWithSmart",
            "params": [
                {
                    "name": "dialog",
                    "description": "[CKEDITOR.dialog](http://docs.ckeditor.com/#!/api/CKEDITOR.dialog)",
                    "type": "CKEDITOR.dialog"
                },
                {
                    "name": "editor",
                    "description": "[CKEDITOR](http://docs.ckeditor.com/#!/api/CKEDITOR)",
                    "type": "CKEDITOR"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "CLink",
            "module": "Controllers"
        },
        {
            "file": "js\\controllers\\CTable.js",
            "line": 19,
            "description": "Returns the width of the parent element available for its children.\n<pre>\navailable width = (element width) - (element left border width) -\n\t\t(element right border width) - (element left margin) - (element right margin)\n</pre>\nThe element width is supposed to be greater than zero and hence to have a unit of\nmeasurement (e.g. 'px'). If not set, widths of other attributes are equal to zero\nwithout unit of measurement.  In this case one has to set the unit of measurement\nequal to the element width.",
            "itemtype": "method",
            "name": "parentWidth",
            "return": {
                "description": "available width for the children as Unit object\n                               (with properties \"value\" and \"measure\")",
                "type": "Unit"
            },
            "class": "CTable",
            "module": "Controllers"
        },
        {
            "file": "js\\controllers\\CTable.js",
            "line": 47,
            "description": "Returns html string for the table with properties specified by the user\nin the dialog menu.",
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "context",
                    "description": "context by means the variables are passed from view to the controller",
                    "type": "Object"
                },
                {
                    "name": "editor",
                    "description": "editor instance",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "DOM.Element"
            },
            "class": "CTable",
            "module": "Controllers"
        },
        {
            "file": "js\\controllers\\CTable.js",
            "line": 69,
            "description": "Converts information collected from the table dialog menu into format defined by\n{{#crossLink \"Table/template:method\"}}Table::template{{/crossLink}} method.\n\nOverrides {{#crossLink \"Controller\"}}base class{{/crossLink}} definition of\n{{#crossLink \"Controller/dialogToTemplate:method\"}}dialogToTemplate{{/crossLink}}.\nThe returning object include the following keys:\n<dl>\n<dt>rows</dt><dd>number of table rows</dd>\n<dt>cols</dt><dd>number of table columns</dd>\n<dt>tableBorderWidth</dt><dd>{{#crossLink \"Unit\"}}Unit{{/crossLink}} instance for table border width</dd>\n<dt>tableBorderColor</dt><dd>string for table border color</dd>\n<dt>phantomBorderWidth</dt><dd>{{#crossLink \"Unit\"}}Unit{{/crossLink}} instance for width around table rows</dd>\n<dt>phantomBorderColor</dt><dd>string for the border around table rows</dd>\n<dt>cellBorders</dt><dd>boolean variables for borders around table cells:\n\t\t<code>leftVer</code>, <code>rightVer</code>, <code>intVer</code>,\n  \t<code>topHor</code>, <code>bottomHor</code>, <code>intHor</code>\n</dd>\n<dt>cellBorderWidth</dt><dd>{{#crossLink \"Unit\"}}Unit{{/crossLink}} instance for border width around table cells</dd>\n<dt>cellBorderColor</dt><dd>string for border color around table cells</dd>\n<dt>globalTableBgColor</dt><dd>string for table background color</dd>\n<dt>spaceTableGlobal</dt><dd>{{#crossLink \"Unit\"}}Unit{{/crossLink}} instance for the table margin</dd>\n<dt>paddingTableGlobal</dt><dd>{{#crossLink \"Unit\"}}Unit{{/crossLink}} instance for the table padding</dd>\n<dt>spaceBtwRows</dt><dd>{{#crossLink \"Unit\"}}Unit{{/crossLink}} instance to set vertical spacing between rows\n(horizontal is set to 0 px)</dd>\n<dt>spaceCell</dt><dd>{{#crossLink \"Unit\"}}Unit{{/crossLink}} instance for table cells padding </dd>\n<dt>cellWeights</dt><dd>array of (non-negative) numbers that have meaning of weights with which columns contribute\nto the total table width</dd>\n</dl>",
            "itemtype": "method",
            "name": "dialogToTemplate",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "CTable",
            "module": "Controllers"
        },
        {
            "file": "js\\controllers\\CTable.js",
            "line": 146,
            "description": "Converts output of table {{#crossLink \"Table/template:method\"}}template{{/crossLink}} method\ninto an object accepted by table dialog menu, that is into a format described by\n{{#crossLink \"Controller/getDialogData:method\"}}getDialogData{{/crossLink}}.",
            "itemtype": "method",
            "name": "templateToDialog",
            "params": [
                {
                    "name": "template",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "since": "0.0.7",
            "class": "CTable",
            "module": "Controllers"
        },
        {
            "file": "js\\controllers\\CTable.js",
            "line": 203,
            "description": "Returns html tag to insert icon.",
            "itemtype": "method",
            "name": "iconName",
            "params": [
                {
                    "name": "fileName",
                    "description": "icon file name. It should be located in \"table2/icons\" folder of the\n                                     custom plugin folder.",
                    "type": "String"
                },
                {
                    "name": "title",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "width",
                    "description": "icon width in px",
                    "type": "Number|Null"
                },
                {
                    "name": "height",
                    "description": "icon height in px",
                    "type": "Number|Null"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "CTable",
            "module": "Controllers"
        },
        {
            "file": "js\\controllers\\CTable.js",
            "line": 226,
            "description": "Returns instance of {{#crossLink \"Table\"}}Table{{/crossLink}} corresponding to a DOM.Element\ninside which the cursor is situated. If no table is found, nothing is returned.",
            "itemtype": "method",
            "name": "getTable",
            "params": [
                {
                    "name": "editor",
                    "description": "editor instance",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Table"
            },
            "class": "CTable",
            "module": "Controllers"
        },
        {
            "file": "js\\controllers\\CTable.js",
            "line": 245,
            "description": "Appends `n` input fields to `elem` element in order to insert column width weigths.",
            "itemtype": "method",
            "name": "addColWeightFields",
            "params": [
                {
                    "name": "elem",
                    "description": "element to which append input fields",
                    "type": "DOM.Element"
                },
                {
                    "name": "num",
                    "description": "number of input fields to append",
                    "type": "Integer"
                }
            ],
            "class": "CTable",
            "module": "Controllers"
        },
        {
            "file": "js\\controllers\\CTable.js",
            "line": 265,
            "description": "Fills in input text element parametrized by `tabId` and `elemId` by `colorValue` and\nimposes \"background-color\" style attribute to `colorValue`.",
            "itemtype": "method",
            "name": "setColorField",
            "params": [
                {
                    "name": "context",
                    "description": "context of the dialog menu",
                    "type": "Object"
                },
                {
                    "name": "tabId",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "fieldId",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "colorValue",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "since": "0.0.6",
            "class": "CTable",
            "module": "Controllers"
        },
        {
            "file": "js\\controllers\\CTable.js",
            "line": 288,
            "description": "Returns the nearest (for current cursor position) parent table. If no table is found among ancestors, `null`\nis returned.\n\nSought element has tag `table` and attribute NEWSLETTER['marker-name'] equal to {{#crossLink \"Table\"}}Table{{/crossLink}}\n{{#crossLink \"Tag/getName:method\"}}getName(){{/crossLink}} method.",
            "itemtype": "method",
            "name": "findParentTable",
            "params": [
                {
                    "name": "editor",
                    "description": "",
                    "type": "CKEDITOR"
                }
            ],
            "return": {
                "description": "",
                "type": "Dom.Element"
            },
            "class": "CTable",
            "module": "Controllers"
        },
        {
            "file": "js\\controllers\\CTable.js",
            "line": 309,
            "description": "Updates parameters of `tableNode` with new ones provided by `editor` dialog.",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "context",
                    "description": "context by means the variables are passed from view to the controller",
                    "type": "Object"
                },
                {
                    "name": "editor",
                    "description": "editor instance",
                    "type": "Object"
                },
                {
                    "name": "tableNode",
                    "description": "node corresponding to a table which parameters are to be updated",
                    "type": "DOM.Element"
                }
            ],
            "return": {
                "description": "",
                "type": "DOM.Element"
            },
            "class": "CTable",
            "module": "Controllers"
        },
        {
            "file": "js\\controllers\\Controller.js",
            "line": 14,
            "description": "Variable to deal with elements selected in the editor. It is supposed to be an instance of\n{{#crossLink \"Selection\"}}Selection{{/crossLink}} class.",
            "itemtype": "property",
            "name": "_selection",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "since": "0.0.7",
            "class": "Controller",
            "module": "Controllers"
        },
        {
            "file": "js\\controllers\\Controller.js",
            "line": 23,
            "description": "{{#crossLink \"Controller/_selection:property\"}}_selection{{/crossLink}} getter.",
            "itemtype": "method",
            "name": "getSelection",
            "return": {
                "description": "",
                "type": "Object"
            },
            "since": "0.0.7",
            "class": "Controller",
            "module": "Controllers"
        },
        {
            "file": "js\\controllers\\Controller.js",
            "line": 33,
            "description": "{{#crossLink \"Controller/_selection:property\"}}_selection{{/crossLink}} setter.",
            "itemtype": "property",
            "name": "sel      {{#crossLink \"Selection\"}}Selection{{/crossLink}} instance",
            "type": "Object",
            "return": {
                "description": "",
                "type": "Void"
            },
            "since": "0.0.7",
            "class": "Controller",
            "module": "Controllers"
        },
        {
            "file": "js\\controllers\\Controller.js",
            "line": 45,
            "description": "Collects parameters from the dialog menu and returns json like object with that data.\nIf optional parameter `types` is provided, then only dialog fields of types present\nin array `types` are to be taken in consideration.\n\nReturns json object whose keys are page ids of the dialog menu and values are json objects\nwhose keys are ids of the elements present on that page and values are those read from  the\ndialog menu.\n\nExample: <pre>{infoTab: {author: 'A.Einstein', title: 'On electrodynamics of moving electron'},\npublisher: {code: TDR19, license: 1031}}</pre>",
            "itemtype": "method",
            "name": "getDialogData",
            "params": [
                {
                    "name": "dialog",
                    "description": "See [dialog definition](http://docs.ckeditor.com/#!/api/CKEDITOR.dialog).",
                    "type": "CKEDITOR.dialog"
                },
                {
                    "name": "types",
                    "description": "array of strings standing for dialog field types.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Controller",
            "module": "Controllers"
        },
        {
            "file": "js\\controllers\\Controller.js",
            "line": 90,
            "description": "Populates the field of the dialog menu. `data` must be of a format described in\n{{#crossLink \"Controller/getDialogData:method\"}}getDialog{{/crossLink}} method.\nIf a key has undefined value, then it is not takedn into consideration.",
            "itemtype": "method",
            "name": "fillInDialog",
            "params": [
                {
                    "name": "data",
                    "description": "data to be inserted,\n                                                       {{#crossLink \"Controller/getDialogData:method\"}}getDialog{{/crossLink}}",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "Controller",
            "module": "Controllers"
        },
        {
            "file": "js\\controllers\\Controller.js",
            "line": 122,
            "description": "Disables single element with id `elemId` on page with id `pageId` in `dialog`.",
            "itemtype": "method",
            "name": "_disableField",
            "params": [
                {
                    "name": "dialog",
                    "description": "",
                    "type": "CKEDITOR.dialog"
                },
                {
                    "name": "pageId",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "elemId",
                    "description": "id of the element to disable",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "since": "0.0.7",
            "access": "private",
            "tagname": "",
            "class": "Controller",
            "module": "Controllers"
        },
        {
            "file": "js\\controllers\\Controller.js",
            "line": 142,
            "description": "Disables element(s) with id `elemId` on page with id `pageId` in `dialog`.\n\nIf `elemId` is an array, then\n{{#crossLink \"Controller/_disableField:method\"}}_disableField{{/crossLink}} uses\neach array element to disable single elements.",
            "itemtype": "method",
            "name": "_disableFields",
            "params": [
                {
                    "name": "dialog",
                    "description": "",
                    "type": "CKEDITOR.dialog"
                },
                {
                    "name": "pageId",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "elemIds",
                    "description": "element id or array of element ids",
                    "type": "String|Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "since": "0.0.7",
            "access": "private",
            "tagname": "",
            "class": "Controller",
            "module": "Controllers"
        },
        {
            "file": "js\\controllers\\Controller.js",
            "line": 167,
            "description": "Disables input fields described by `data` in `dialog`.\n\n`data` is a json key-value object which keys are page ids and values are array of element ids that\nshould be disabled. There two possible formats of `data`:\n\n<pre> {pageId: [fieldId1, fieldId2, ...], ...} </pre>\n<pre> {pageId: fieldId, ...} </pre>",
            "itemtype": "method",
            "name": "disableFields",
            "params": [
                {
                    "name": "dialog",
                    "description": "",
                    "type": "CKEDITOR.dialog"
                },
                {
                    "name": "data",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "since": "0.0.7",
            "class": "Controller",
            "module": "Controllers"
        },
        {
            "file": "js\\controllers\\Controller.js",
            "line": 196,
            "description": "Converts object of dialog menu format to an object of {{#crossLink \"Tag/template:method\"}}Tag{{/crossLink}}\nformat.\nEventually, the emplementation should be corrected by inherited class.",
            "itemtype": "method",
            "name": "dialogToTemplate",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "since": "0.0.7",
            "class": "Controller",
            "module": "Controllers"
        },
        {
            "file": "js\\controllers\\Controller.js",
            "line": 210,
            "description": "Converts object of {{#crossLink \"Tag/template:method\"}}Tag{{/crossLink}} format to object\nof dialog menu format.\n\nEventually, the emplementation should be corrected by inherited class.",
            "itemtype": "method",
            "name": "templateToDialog",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "since": "0.0.7",
            "class": "Controller",
            "module": "Controllers"
        },
        {
            "file": "js\\controllers\\Controller.js",
            "line": 225,
            "description": "Shows error message. Uses javascript method `alert` to display the message.\nIf `msg` is not a string, default message is displayed.",
            "itemtype": "method",
            "name": "showMessage",
            "params": [
                {
                    "name": "msg",
                    "description": "text of the message",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "since": "0.0.7",
            "class": "Controller",
            "module": "Controllers"
        },
        {
            "file": "js\\controllers\\Controller.js",
            "line": 237,
            "description": "Returns a first node satifying given `criteria`. The look up is performed among",
            "itemtype": "method",
            "name": "detectAscendant",
            "params": [
                {
                    "name": "criteria",
                    "description": "[description]",
                    "type": "[type]"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "Controller",
            "module": "Controllers"
        },
        {
            "file": "js\\converters\\Converter.js",
            "line": 18,
            "description": "Dispatcher that decides what converter should be used.",
            "itemtype": "property",
            "name": "_mapper",
            "type": "FormatMapper",
            "access": "private",
            "tagname": "",
            "class": "Converter",
            "module": "HtmlElements"
        },
        {
            "file": "js\\converters\\Converter.js",
            "line": 26,
            "description": "{{#crossLink \"Converter/_mapper:property\"}}_mapper{{/crossLink}} getter.",
            "itemtype": "method",
            "name": "getMapper",
            "return": {
                "description": "",
                "type": "Mapper"
            },
            "class": "Converter",
            "module": "HtmlElements"
        },
        {
            "file": "js\\converters\\Converter.js",
            "line": 36,
            "description": "{{#crossLink \"Converter/_mapper:property\"}}_mapper{{/crossLink}} setter.",
            "itemtype": "method",
            "name": "setMapper",
            "params": [
                {
                    "name": "m",
                    "description": "",
                    "type": "Mapper"
                }
            ],
            "class": "Converter",
            "module": "HtmlElements"
        },
        {
            "file": "js\\converters\\Converter.js",
            "line": 48,
            "description": "Converts `n` into format `format`.\n\nIt makes use of functionality of {{#crossLink \"Converter/_mapper:property\"}}_mapper{{/crossLink}}\nwhich is an instance of {{#crossLink \"Mapper\"}}Mapper{{/crossLink}} class.",
            "itemtype": "method",
            "name": "convertTo",
            "params": [
                {
                    "name": "n",
                    "description": "",
                    "type": "DOM.Node"
                },
                {
                    "name": "format",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "parent",
                    "description": "of n",
                    "type": "DOM.Node"
                }
            ],
            "return": {
                "description": "",
                "type": "DOM.Node"
            },
            "class": "Converter",
            "module": "HtmlElements"
        },
        {
            "file": "js\\converters\\ConverterElastic.js",
            "line": 23,
            "description": "Number of digits after decimal point to maintain.",
            "itemtype": "property",
            "name": "_precision",
            "type": "{Number}",
            "class": "ConverterElastic",
            "module": "HtmlElements"
        },
        {
            "file": "js\\converters\\ConverterElastic.js",
            "line": 31,
            "description": "Returns information about node width. The following locations are explored (in order of precedence):\n<ol>\n<li>offsetWidth property of the node. See\n[explanation here](https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model/Determining_the_dimensions_of_elements).\n</li>\n<li>\"data-original-width\",</li>\n<li>\"width\"</li>\n<li>\"style: .... width: ...; ...\"</li>\n</ol>",
            "itemtype": "method",
            "name": "_findWidthInfo",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "DOM.Element"
                }
            ],
            "return": {
                "description": "",
                "type": "String|Number"
            },
            "class": "ConverterElastic",
            "module": "HtmlElements"
        },
        {
            "file": "js\\converters\\ConverterElastic.js",
            "line": 65,
            "description": "Modifies width-related properties in `node`. This function is to be added to\n{{#crossLink \"ConvertFluid/_workers:property\"}}_workers{{/crossLink}}.\n\nIt updates value of width attribute of `node` on the base of the width attribute of its parent node.",
            "itemtype": "method",
            "name": "_widthFluid",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "DOM.Element"
                },
                {
                    "name": "par",
                    "description": "parent of node",
                    "type": "DOM.Element"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "access": "private",
            "tagname": "",
            "class": "ConverterElastic",
            "module": "HtmlElements"
        },
        {
            "file": "js\\converters\\ConverterElastic.js",
            "line": 114,
            "description": "Updates font sizes.",
            "itemtype": "method",
            "name": "_fontFluid",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "DOM.Node"
                },
                {
                    "name": "par",
                    "description": "parent of node",
                    "type": "DOM.Node"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "access": "private",
            "tagname": "",
            "class": "ConverterElastic",
            "module": "HtmlElements"
        },
        {
            "file": "js\\converters\\ConverterElastic.js",
            "line": 156,
            "description": "Updates the following attributes\n<pre>\n'padding', 'padding-left', 'padding-right', 'padding-top', 'padding-bottom'\n</pre>\ninside style property of the node.",
            "itemtype": "method",
            "name": "_paddingFluid",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "DOM.Node"
                },
                {
                    "name": "par",
                    "description": "parent of node",
                    "type": "DOM.Node"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "ConverterElastic",
            "module": "HtmlElements"
        },
        {
            "file": "js\\converters\\ConverterElastic.js",
            "line": 215,
            "description": "Sets workers {{#crossLink \"ConverterElastic/_fontFluid:method\"}}_fontFluid{{/crossLink}},\n{{#crossLink \"ConverterElastic/_widthFluid:method\"}}_widthFluid{{/crossLink}},\n{{#crossLink \"ConverterElastic/_paddingFluid:method\"}}_paddingFluid{{/crossLink}}.",
            "itemtype": "method",
            "name": "constructor",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "ConverterElastic",
            "module": "HtmlElements"
        },
        {
            "file": "js\\converters\\ConverterFixed.js",
            "line": 23,
            "description": "Modifies width-related properties in `node`. This function is to be added to\n{{#crossLink \"ConvertFluid/_workers:property\"}}_workers{{/crossLink}}.\n\nIt adds keys `max-width` and `min-width` into style properties as well.",
            "itemtype": "method",
            "name": "_widthFixed",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "DOM.Element"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "access": "private",
            "tagname": "",
            "class": "ConverterFixed",
            "module": "HtmlElements"
        },
        {
            "file": "js\\converters\\ConverterFixed.js",
            "line": 54,
            "description": "If the argument is a list (ordered or unordered), then margin-related keys are added\ninto styles.",
            "itemtype": "method",
            "name": "_listMargins",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "DOM.Element"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "ConverterFixed",
            "module": "HtmlElements"
        },
        {
            "file": "js\\converters\\ConverterFixed.js",
            "line": 78,
            "description": "Appends workers",
            "itemtype": "method",
            "name": "constructor",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "ConverterFixed",
            "module": "HtmlElements"
        },
        {
            "file": "js\\converters\\ConverterGeneral.js",
            "line": 18,
            "description": "Array of functions to be applied to each node. Each array element is supposed to modify the argument it acts on.",
            "itemtype": "property",
            "name": "_workers",
            "type": "{Array}",
            "access": "private",
            "tagname": "",
            "class": "ConverterGeneral",
            "module": "HtmlElements"
        },
        {
            "file": "js\\converters\\ConverterGeneral.js",
            "line": 26,
            "description": "{{#crossLink \"ConverterGeneral/_worker:property\"}}_worker{{/crossLink}} setter.\nEach element of the input array must be a function. Non functions are skipped.",
            "itemtype": "method",
            "name": "setWorker",
            "params": [
                {
                    "name": "funs",
                    "description": "array of functions",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "ConverterGeneral",
            "module": "HtmlElements"
        },
        {
            "file": "js\\converters\\ConverterGeneral.js",
            "line": 43,
            "description": "{{#crossLink \"ConverterGeneral/_workers:property\"}}_workers{{/crossLink}} getter.",
            "itemtype": "method",
            "name": "getWorkers",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "ConverterGeneral",
            "module": "HtmlElements"
        },
        {
            "file": "js\\converters\\ConverterGeneral.js",
            "line": 52,
            "description": "Returns number of elements in {{#crossLink \"ConverterGeneral/_workers:property\"}}_workers{{/crossLink}} array.",
            "itemtype": "method",
            "name": "numberOfWorkers",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "ConverterGeneral",
            "module": "HtmlElements"
        },
        {
            "file": "js\\converters\\ConverterGeneral.js",
            "line": 63,
            "description": "Gets worker number `i` from {{#crossLink \"ConverterGeneral/_worker:property\"}}_workers{{/crossLink}}\narray.",
            "itemtype": "method",
            "name": "getWorker",
            "params": [
                {
                    "name": "i",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Function"
            },
            "class": "ConverterGeneral",
            "module": "HtmlElements"
        },
        {
            "file": "js\\converters\\ConverterGeneral.js",
            "line": 76,
            "description": "Appends worker to {{#crossLink \"ConverterGeneral/_workers:property\"}}_workers{{/crossLink}}.\nIf the argument is a function, returns `true`, else returns `false`.",
            "itemtype": "method",
            "name": "appendWorker",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "ConverterGeneral",
            "module": "HtmlElements"
        },
        {
            "file": "js\\converters\\ConverterGeneral.js",
            "line": 92,
            "description": "Applies {{#crossLink \"ConverterGeneral/process:method\"}}process{{/crossLink}} method to a clone of node `n`.\n\nFor a proper functioning, it is better to provide a parent node, because some calculations require\nknoweledge of parent node properties. If parent element is not\nprovided, default values are used.",
            "itemtype": "method",
            "name": "convert",
            "params": [
                {
                    "name": "n",
                    "description": "",
                    "type": "DOM.Node"
                },
                {
                    "name": "par",
                    "description": "parent of n (optional)",
                    "type": "DOM.Node"
                }
            ],
            "return": {
                "description": "",
                "type": "DOM.Node"
            },
            "class": "ConverterGeneral",
            "module": "HtmlElements"
        },
        {
            "file": "js\\converters\\ConverterGeneral.js",
            "line": 114,
            "description": "Applies each function from {{#crossLink \"ConverterGeneral/_workers:property\"}}_worker{{/crossLink}}\nto node `n` and then to each children. For proper functioning, it is better to provide a parent\nnode, because some calculations require knoweledge of parent properties. If parent element is not\nprovided, default values are used.",
            "itemtype": "method",
            "name": "process",
            "params": [
                {
                    "name": "n",
                    "description": "",
                    "type": "DOM.Node"
                },
                {
                    "name": "par",
                    "description": "parent of n (optional)",
                    "type": "DOM.Node"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "ConverterGeneral",
            "module": "HtmlElements"
        },
        {
            "file": "js\\converters\\ConverterGeneral.js",
            "line": 139,
            "description": "Applies all functions from {{#crossLink \"ConvertFluid/_workers:property\"}}_workers{{/crossLink}} to\nnode `n` and not to its children.",
            "itemtype": "method",
            "name": "processRoot",
            "params": [
                {
                    "name": "n",
                    "description": "",
                    "type": "DOM.Node"
                },
                {
                    "name": "par",
                    "description": "parent of n",
                    "type": "DOM.Node"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "ConverterGeneral",
            "module": "HtmlElements"
        },
        {
            "file": "js\\converters\\ConverterSimpleText.js",
            "line": 22,
            "description": "Array of workers.",
            "itemtype": "property",
            "name": "_workers         array of Worker instances",
            "type": "{Array}",
            "class": "ConverterSimpleText",
            "module": "HtmlElements"
        },
        {
            "file": "js\\converters\\ConverterSimpleText.js",
            "line": 30,
            "description": "{{#crossLink \"ConverterSimpleText/_workers:property\"}}_workers{{/crossLink}} getter.",
            "itemtype": "method",
            "name": "getWorkers",
            "return": {
                "description": "array of Worker instances",
                "type": "Array"
            },
            "class": "ConverterSimpleText",
            "module": "HtmlElements"
        },
        {
            "file": "js\\converters\\ConverterSimpleText.js",
            "line": 40,
            "description": "Converts node `n` applying {{#crossLink \"ConverterSimpleText/precess:method\"}}process{{/crossLink}}\nmethod on it.\nIf the resulting node admits appending child nodes, then convert child nodes (if any) of `n` and append them\nto the resulting node.",
            "itemtype": "method",
            "name": "convert",
            "params": [
                {
                    "name": "n",
                    "description": "",
                    "type": "DOM.Node"
                }
            ],
            "return": {
                "description": "",
                "type": "Any"
            },
            "class": "ConverterSimpleText",
            "module": "HtmlElements"
        },
        {
            "file": "js\\converters\\ConverterSimpleText.js",
            "line": 71,
            "description": "Applies each element from {{#crossLink \"ConverterSimpleText/_workers:property\"}}_workers{{/crossLink}}\narray on `n`.\nReturns the result of consequitive application of those elements on `n`.",
            "itemtype": "method",
            "name": "process",
            "params": [
                {
                    "name": "n",
                    "description": "",
                    "type": "DOM.Node"
                }
            ],
            "return": {
                "description": "",
                "type": "DOM.Node|null"
            },
            "class": "ConverterSimpleText",
            "module": "HtmlElements"
        },
        {
            "file": "js\\converters\\ConverterSimpleText.js",
            "line": 91,
            "description": "Workers.",
            "itemtype": "property",
            "name": "linkTrigger",
            "type": "Function",
            "class": "ConverterSimpleText",
            "module": "HtmlElements"
        },
        {
            "file": "js\\converters\\Worker.js",
            "line": 31,
            "description": "A trigger that decides whether the {{#crossLink \"Worker/_action:property\"}}_action{{/crossLink}}\nis to be applied or not.\n\nIt is supposed to be a boolean-valued function: if it returns `true`, corresponding\n {{#crossLink \"Worker/_action:property\"}}_action{{/crossLink}} is applied, otherwise - not.",
            "itemtype": "property",
            "name": "_trigger",
            "type": "Function",
            "access": "private",
            "tagname": "",
            "class": "Worker",
            "module": "Converter"
        },
        {
            "file": "js\\converters\\Worker.js",
            "line": 45,
            "description": "An action to be applied in case {{#crossLink \"Worker/_trigger:property\"}}_trigger{{/crossLink}}\nreturns `true`.",
            "itemtype": "property",
            "name": "_action",
            "type": "Function",
            "access": "private",
            "tagname": "",
            "class": "Worker",
            "module": "Converter"
        },
        {
            "file": "js\\converters\\Worker.js",
            "line": 56,
            "description": "{{#crossLink \"Worker/_trigger:property\"}}_trigger{{/crossLink}} setter.",
            "itemtype": "method",
            "name": "setTrigger",
            "params": [
                {
                    "name": "t",
                    "description": "function to be used as a trigger",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "throws": {
                "description": "If `t` is not a function",
                "type": "Error"
            },
            "class": "Worker",
            "module": "Converter"
        },
        {
            "file": "js\\converters\\Worker.js",
            "line": 71,
            "description": "{{#crossLink \"Worker/_trigger:property\"}}_trigger{{/crossLink}} getter.",
            "itemtype": "method",
            "name": "getTrigger",
            "return": {
                "description": "",
                "type": "Function"
            },
            "class": "Worker",
            "module": "Converter"
        },
        {
            "file": "js\\converters\\Worker.js",
            "line": 81,
            "description": "{{#crossLink \"Worker/_action:property\"}}_action{{/crossLink}} setter.",
            "itemtype": "method",
            "name": "setAction",
            "params": [
                {
                    "name": "a",
                    "description": "function to be used as an action",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "throws": {
                "description": "If `a` is not a function",
                "type": "Error"
            },
            "class": "Worker",
            "module": "Converter"
        },
        {
            "file": "js\\converters\\Worker.js",
            "line": 96,
            "description": "{{#crossLink \"Worker/_action:property\"}}_action{{/crossLink}} getter.",
            "itemtype": "method",
            "name": "getAction",
            "return": {
                "description": "",
                "type": "Function"
            },
            "class": "Worker",
            "module": "Converter"
        },
        {
            "file": "js\\converters\\Worker.js",
            "line": 106,
            "description": "Elaborates argument.\n\nIf the {{#crossLink \"Worker/_trigger:property\"}}_trigger{{/crossLink}} evaluates to `true` on the argument `n`,\nthen {{#crossLink \"Worker/_action:property\"}}_action(`n`){{/crossLink}} is returned. Otherwise, `n` is returned.",
            "itemtype": "method",
            "name": "elaborate",
            "params": [
                {
                    "name": "n",
                    "description": "",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "",
                "type": "Any"
            },
            "class": "Worker",
            "module": "Converter"
        },
        {
            "file": "js\\eventHandlers\\EHToolbar.js",
            "line": 14,
            "description": "Attaches listeners for two type of events on `ed` element:\n<dl>\n<dt>`mousedown` event</dt>\n<dd>triggers when one moves cursor by clicking mouse button. </dd>\n<dt>`keydown` event</dt>\n<dd>triggers when one moves arrow keys. Uses\n{{#crossLink \"EHToolbar/isArrow:method\"}}isArrow{{/crossLink}} method in order to decide\nwhether the event should be handled or not.\n</dd></dl>\n\nEvent handler for the above events is {{#crossLink \"EHToolbar/highlight:method\"}}highlight{{/crossLink}}.",
            "itemtype": "method",
            "name": "registerEvent",
            "params": [
                {
                    "name": "ed",
                    "description": "CKEDITOR.editor instance",
                    "type": "CKEDITOR.editor"
                },
                {
                    "name": "property",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "pluginName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "EHToolbar",
            "module": "EventHandler"
        },
        {
            "file": "js\\eventHandlers\\EHToolbar.js",
            "line": 53,
            "description": "Switches the state of element with id `elemId` to be `on` if the cursor\nis located inside element that has a property descibed in object `prop`,\notherwise the state is set to `off`.\n\n`on/off` states are given by [CKEDITOR](http://docs.ckeditor.com/#!/api/CKEDITOR) constants\n[TRISTATE_ON](http://docs.ckeditor.com/#!/api/CKEDITOR-property-TRISTATE_ON)\nand [TRISTATE_OFF](http://docs.ckeditor.com/#!/api/CKEDITOR-property-TRISTATE_OFF).\n\nObject `prop` is required to have the following keys (presence of other keys is allowed):<dl>\n<dt> `name` </dt>\n<dd> name of the attribute to search among start element ascendants</dd>\n<dt>`value`</dt>\n<dd> value that the attribute is supposed to have</dd>\n</dl>\n\nUses [setState](http://docs.ckeditor.com/#!/api/CKEDITOR.dom.element-method-setState) method\nwith <b>hardcoded</b> optional parameter set to to 'cke_button'.",
            "itemtype": "method",
            "name": "highlight",
            "params": [
                {
                    "name": "ed",
                    "description": "editor instance",
                    "type": "CKEDITOR.editor"
                },
                {
                    "name": "prop",
                    "description": "name of the attribute to search",
                    "type": "Object"
                },
                {
                    "name": "elemId",
                    "description": "id of the element which state should be changed",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "EHToolbar",
            "module": "EventHandler"
        },
        {
            "file": "js\\eventHandlers\\EHToolbar.js",
            "line": 100,
            "description": "Returns `true` if `event` corresponds to pressing one of the arrow keys: 'Left', 'Right', 'Down', 'Up'.\nThe check is performed by the code of the pressed key: 37 for 'Left', 39 for 'Right', 40 for 'Down', 38 for 'Up'.",
            "itemtype": "method",
            "name": "isArrow",
            "params": [
                {
                    "name": "event",
                    "description": "[CKEDITOR.eventInfo](http://docs.ckeditor.com/#!/api/CKEDITOR.eventInfo)",
                    "type": "CKEDITOR.eventInfo"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "EHToolbar",
            "module": "EventHandler"
        },
        {
            "file": "settings\\editor_config.js",
            "line": 12,
            "description": "Language in which toolbar phrases are displayed.",
            "itemtype": "property",
            "name": "language",
            "type": "{String}",
            "default": "it",
            "class": "CKEDITOR",
            "module": "Config"
        },
        {
            "file": "settings\\editor_config.js",
            "line": 21,
            "description": "Default language (in case {{#crossLink \"CKEDITOR/language:property\"}}language{{/crossLink}}\nis not found).",
            "itemtype": "property",
            "name": "defaultLanguage",
            "type": "{String}",
            "default": "en",
            "class": "CKEDITOR",
            "module": "Config"
        },
        {
            "file": "settings\\editor_config.js",
            "line": 31,
            "description": "Editor window width.",
            "itemtype": "property",
            "name": "width",
            "type": "{String}",
            "default": "\"850px\"",
            "class": "CKEDITOR",
            "module": "Config"
        },
        {
            "file": "settings\\editor_config.js",
            "line": 40,
            "description": "Editor window height.",
            "itemtype": "property",
            "name": "height",
            "type": "{String}",
            "default": "\"650px\"",
            "class": "CKEDITOR",
            "module": "Config"
        },
        {
            "file": "settings\\editor_config.js",
            "line": 49,
            "description": "Enter mode: when pressing \"ENTER\", &lt;br&gt; is inserted, not &lt;p&gt;.",
            "itemtype": "property",
            "name": "enterMode",
            "type": "{Number}",
            "default": "CKEDITOR.ENTER_BR",
            "class": "CKEDITOR",
            "module": "Config"
        },
        {
            "file": "settings\\editor_config.js",
            "line": 58,
            "description": "Whether objects in the editor window can be resized or not.",
            "itemtype": "property",
            "name": "disableObjectResizing",
            "type": "{Boolean}",
            "default": "true",
            "class": "CKEDITOR",
            "module": "Config"
        },
        {
            "file": "settings\\editor_config.js",
            "line": 68,
            "description": "Activate browser spellchecker.",
            "itemtype": "property",
            "name": "disableNativeSpellChecker",
            "type": "{Boolean}",
            "since": "0.0.7",
            "default": "false",
            "class": "CKEDITOR",
            "module": "Config"
        },
        {
            "file": "settings\\editor_config.js",
            "line": 77,
            "description": "Allows appearance of the browser context menu (triggers upon ctrl + right mouse button click).",
            "itemtype": "property",
            "name": "browserContextMenuOnCtrl",
            "type": "{Boolean}",
            "since": "0.0.7",
            "default": "false",
            "class": "CKEDITOR",
            "module": "Config"
        },
        {
            "file": "settings\\editor_config.js",
            "line": 142,
            "description": "Loads fonts given in\n{{#crossLink \"NEWSLETTER/additionalFonts:property\"}}NEWSLETTER.additionalFonts{{/crossLink}}\ninto the configuration.\n\nConverts a key-value object into a string of the format\n<code>\"first string to display/first string to use; second string to display/second string to use; ...\"</code>\nas required by [API](http://docs.ckeditor.com/#!/api/CKEDITOR.config-cfg-font_names):\n<blockquote>The list of fonts names to be displayed in the Font combo in the toolbar.\nEntries are separated by semi-colons (';'), while it's possible to have more than\none font for each entry, in the HTML way (separated by comma).\nA display name may be optionally defined by prefixing the entries with the name\nand the slash character. For example, 'Arial/Arial, Helvetica, sans-serif' will\nbe displayed as 'Arial' in the list, but will be outputted as 'Arial, Helvetica, sans-serif'.\n</blockquote>",
            "itemtype": "method",
            "name": "constructor",
            "class": "CKEDITOR",
            "module": "Config"
        },
        {
            "file": "settings\\general_config.js",
            "line": 15,
            "description": "Singlet instance.",
            "itemtype": "property",
            "name": "_instance",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "class": "NEWSLETTER",
            "module": "Config"
        },
        {
            "file": "settings\\general_config.js",
            "line": 22,
            "description": "Intializes the singlet instance.",
            "itemtype": "method",
            "name": "_init",
            "access": "private",
            "tagname": "",
            "class": "NEWSLETTER",
            "module": "Config"
        },
        {
            "file": "settings\\general_config.js",
            "line": 32,
            "description": "Default width, to be set to elements whose width can not be established.",
            "itemtype": "property",
            "name": "defaultWidth",
            "type": "{String}",
            "default": "\"500px\"",
            "class": "NEWSLETTER",
            "module": "Config"
        },
        {
            "file": "settings\\general_config.js",
            "line": 40,
            "description": "{{#crossLink \"NEWSLETTER/defaultWidth:property\"}}defaultWidth{{/crossLink}} getter.",
            "itemtype": "method",
            "name": "width",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "NEWSLETTER",
            "module": "Config"
        },
        {
            "file": "settings\\general_config.js",
            "line": 49,
            "description": "Fonts to be added to those already present in the editor.\n\nObject keys are to be displayed in the toolbar combo box, while thier\nvalues are to be used for 'font-family' attribute.",
            "itemtype": "property",
            "name": "additionalFonts",
            "type": "{Object}",
            "default": "{'Calibri': 'Calibri, sans-serif'}",
            "class": "NEWSLETTER",
            "module": "Config"
        },
        {
            "file": "settings\\general_config.js",
            "line": 60,
            "description": "Sets maximum width of element available inside editor window.\n\nThis value is to be set to an element when it is failed to find its parent.\nIf w is a string, its value is imposed as default width. If it is a number,\ndefault unit measure is appended to that number.",
            "itemtype": "method",
            "name": "setWidth",
            "params": [
                {
                    "name": "w",
                    "description": "",
                    "type": "Number|String"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "NEWSLETTER",
            "module": "Config"
        },
        {
            "file": "settings\\general_config.js",
            "line": 80,
            "description": "Default font size, to be set to elements whose width can not be established.",
            "itemtype": "property",
            "name": "defaultFontSize",
            "type": "{String}",
            "default": "\"14px\"",
            "class": "NEWSLETTER",
            "module": "Config"
        },
        {
            "file": "settings\\general_config.js",
            "line": 88,
            "description": "{{#crossLink \"NEWSLETTER/defaultFontSize:property\"}}defaultFontSize{{/crossLink}} getter.",
            "itemtype": "method",
            "name": "fontsize",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "NEWSLETTER",
            "module": "Config"
        },
        {
            "file": "settings\\general_config.js",
            "line": 98,
            "description": "Default unit of measurement, to be applied to elements whose width can not be established.",
            "itemtype": "property",
            "name": "defaultUnitMeasure",
            "type": "{String}",
            "class": "NEWSLETTER",
            "module": "Config"
        },
        {
            "file": "settings\\general_config.js",
            "line": 106,
            "description": "{{#crossLink \"NEWSLETTER/defaultUnitMeasure:property\"}}defaultUnitMeasure{{/crossLink}} getter.",
            "itemtype": "method",
            "name": "unitMeasure",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "NEWSLETTER",
            "module": "Config"
        },
        {
            "file": "settings\\general_config.js",
            "line": 116,
            "description": "Name of the marker attribute to be used in order to mark tag elements.",
            "itemtype": "property",
            "name": "marker-name",
            "type": "{String}",
            "final": 1,
            "class": "NEWSLETTER",
            "module": "Config"
        },
        {
            "file": "settings\\general_config.js",
            "line": 127,
            "description": "Name of custom plugin directory. It is supposed that this directory is a sibling\nof directory in which CKEDITOR resides (\"ckeditor/\").",
            "itemtype": "property",
            "name": "customPluginDir",
            "type": "String",
            "final": 1,
            "class": "NEWSLETTER",
            "module": "Config"
        },
        {
            "file": "settings\\general_config.js",
            "line": 138,
            "description": "A {{#crossLink \"Mapper\"}}Mapper{{/crossLink}} to establish relations between html tags and corresponding classes.",
            "itemtype": "property",
            "name": "_tagMapper",
            "type": "Mapper",
            "access": "private",
            "tagname": "",
            "class": "NEWSLETTER",
            "module": "Config"
        },
        {
            "file": "settings\\general_config.js",
            "line": 155,
            "description": "Factory to produce instances of {{#crossLink \"Tag\"}}Tag{{/crossLink}} class.\n\nThis factory is configured in such a way that its {{#crossLink \"Factory/_mapping:property\"}}_mapping{{/crossLink}}\nis set to {{#crossLink \"NEWSLETTER/_tagMapper:property\"}}_tagMapper{{/crossLink}}.",
            "itemtype": "property",
            "name": "factory",
            "type": "Factory",
            "final": 1,
            "class": "NEWSLETTER",
            "module": "Config"
        },
        {
            "file": "settings\\general_config.js",
            "line": 169,
            "description": "Maps format identifier (string description) to class that performs required actions.\n\nConverters {{#crossLink \"ConverterFixed\"}}ConverterFixed{{/crossLink}} and\n{{#crossLink \"ConverterElastic\"}}ConverterElastic{{/crossLink}} are registered for this mapper.",
            "itemtype": "property",
            "name": "_formatMapper",
            "type": "Mapper",
            "access": "private",
            "tagname": "",
            "class": "NEWSLETTER",
            "module": "Config"
        },
        {
            "file": "settings\\general_config.js",
            "line": 181,
            "description": "Maps format identifier (string description) to class that performs required actions.\n\nIts value is set to {{#crossLink \"NEWSLETTER/_formatMapper:property\"}}_formatMapper{{/crossLink}} and\nis write-protected.",
            "itemtype": "property",
            "name": "formatMapper",
            "type": "Mapper",
            "final": 1,
            "class": "NEWSLETTER",
            "module": "Config"
        },
        {
            "file": "settings\\general_config.js",
            "line": 194,
            "description": "Base styles that are applied when saving the editor content.\nIt is a css-like formatted string, i.e. `h1 {color: red; position: absolute;}`",
            "itemtype": "property",
            "name": "cssBase",
            "type": "String",
            "since": "0.0.6",
            "final": 1,
            "class": "NEWSLETTER",
            "module": "Config"
        },
        {
            "file": "settings\\general_config.js",
            "line": 207,
            "description": "Styles that are applied to the content of the editor only and not to a saved content.\nIt is a css-like formatted string, i.e. `h1 {color: red; position: absolute;}`",
            "itemtype": "property",
            "name": "cssEditor",
            "type": "String",
            "since": "0.0.6",
            "final": 1,
            "class": "NEWSLETTER",
            "module": "Config"
        }
    ],
    "warnings": []
}